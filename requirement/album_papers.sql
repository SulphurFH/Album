-- MySQL dump 10.13  Distrib 5.5.54, for debian-linux-gnu (x86_64)
--
-- Host: localhost    Database: album_papers
-- ------------------------------------------------------
-- Server version	5.5.54-0ubuntu0.14.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `auth_group`
--

DROP TABLE IF EXISTS `auth_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_group` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(80) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_group`
--

LOCK TABLES `auth_group` WRITE;
/*!40000 ALTER TABLE `auth_group` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_group` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_group_permissions`
--

DROP TABLE IF EXISTS `auth_group_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_group_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `group_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `group_id` (`group_id`,`permission_id`),
  KEY `auth_group_p_permission_id_2d0befd56e0eae6_fk_auth_permission_id` (`permission_id`),
  CONSTRAINT `auth_group_p_permission_id_2d0befd56e0eae6_fk_auth_permission_id` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`),
  CONSTRAINT `auth_group_permission_group_id_31d88e20bb64fbb5_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_group_permissions`
--

LOCK TABLES `auth_group_permissions` WRITE;
/*!40000 ALTER TABLE `auth_group_permissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_group_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_permission`
--

DROP TABLE IF EXISTS `auth_permission`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_permission` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `content_type_id` int(11) NOT NULL,
  `codename` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `content_type_id` (`content_type_id`,`codename`),
  CONSTRAINT `auth__content_type_id_24f98db5610c5eaa_fk_django_content_type_id` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_permission`
--

LOCK TABLES `auth_permission` WRITE;
/*!40000 ALTER TABLE `auth_permission` DISABLE KEYS */;
INSERT INTO `auth_permission` VALUES (1,'Can add log entry',1,'add_logentry'),(2,'Can change log entry',1,'change_logentry'),(3,'Can delete log entry',1,'delete_logentry'),(4,'Can add permission',2,'add_permission'),(5,'Can change permission',2,'change_permission'),(6,'Can delete permission',2,'delete_permission'),(7,'Can add group',3,'add_group'),(8,'Can change group',3,'change_group'),(9,'Can delete group',3,'delete_group'),(10,'Can add user',4,'add_user'),(11,'Can change user',4,'change_user'),(12,'Can delete user',4,'delete_user'),(13,'Can add content type',5,'add_contenttype'),(14,'Can change content type',5,'change_contenttype'),(15,'Can delete content type',5,'delete_contenttype'),(16,'Can add session',6,'add_session'),(17,'Can change session',6,'change_session'),(18,'Can delete session',6,'delete_session'),(19,'Can add book info',7,'add_bookinfo'),(20,'Can change book info',7,'change_bookinfo'),(21,'Can delete book info',7,'delete_bookinfo'),(22,'Can add hero info',8,'add_heroinfo'),(23,'Can change hero info',8,'change_heroinfo'),(24,'Can delete hero info',8,'delete_heroinfo'),(25,'Can add user info',9,'add_userinfo'),(26,'Can change user info',9,'change_userinfo'),(27,'Can delete user info',9,'delete_userinfo'),(28,'Can add area info',10,'add_areainfo'),(29,'Can change area info',10,'change_areainfo'),(30,'Can delete area info',10,'delete_areainfo');
/*!40000 ALTER TABLE `auth_permission` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user`
--

DROP TABLE IF EXISTS `auth_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `password` varchar(128) NOT NULL,
  `last_login` datetime DEFAULT NULL,
  `is_superuser` tinyint(1) NOT NULL,
  `username` varchar(30) NOT NULL,
  `first_name` varchar(30) NOT NULL,
  `last_name` varchar(30) NOT NULL,
  `email` varchar(254) NOT NULL,
  `is_staff` tinyint(1) NOT NULL,
  `is_active` tinyint(1) NOT NULL,
  `date_joined` datetime NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user`
--

LOCK TABLES `auth_user` WRITE;
/*!40000 ALTER TABLE `auth_user` DISABLE KEYS */;
INSERT INTO `auth_user` VALUES (3,'pbkdf2_sha256$20000$PbPgqhIUF581$EROb/KCL5UJ0IRIm6ItolJc8vr/RMMkmlHzTm3CRl6c=','2017-05-13 16:03:38',0,'FangHao','','','fanghao9342@163.com',0,1,'2017-03-27 22:24:23'),(4,'pbkdf2_sha256$20000$bSFp9kUPZv4K$BuWy0/rkSwBoleAkBhig05scDOcM6t6AYB0xN/NBLpo=','2017-05-11 20:08:20',0,'archever','','','archever@163.com',0,1,'2017-03-27 22:37:50'),(5,'pbkdf2_sha256$20000$difxi3JTR5WD$3TOb812Tq/DaWT5GVs/IVEyZec6X1UE0c6PyhttP7tE=','2017-03-27 22:44:02',0,'Lamont','','','413452920@qq.com',0,1,'2017-03-27 22:43:40'),(6,'pbkdf2_sha256$20000$Kteh69GSfn1F$owB3ULhjP4HmEOhepkTto730Bgxkfg2yyjPzwI1oRNM=','2017-03-27 22:54:33',0,'莫明','','','907597205@qq.com',0,1,'2017-03-27 22:53:40'),(7,'pbkdf2_sha256$20000$iyH1gaRyPj6J$SwEdTx3SoLwsD91RQrLH0pkeOhhsge40wu+dPz5cTd0=','2017-03-31 18:35:56',0,'Anecho','','','ljcbxwznpy@163.com',0,1,'2017-03-27 23:15:52'),(8,'pbkdf2_sha256$20000$JKPIjDlErklJ$hMkfK80GnyFJ+yCy6oKBsavb0Y5TL377tvmA+2EC+DQ=','2017-03-28 01:23:19',0,'funny','','','123@qq.com',0,1,'2017-03-28 01:22:38'),(9,'pbkdf2_sha256$20000$HXtyoAY5ROAt$9kr+dHGniH6tl/ohMIWEu3jKqsrZdcQK8P/wJKbqfXM=','2017-03-28 14:49:39',0,'qwe','','','q@qq.com',0,1,'2017-03-28 03:49:37'),(10,'pbkdf2_sha256$20000$OJ3z9uQCDAmV$eKXZLiGkXhPcxVcIWOVLg1HC+v+oxL4Ydxsb4SY2wsY=','2017-05-10 12:30:51',0,'MaQianli','','','mql9348@163.com',0,1,'2017-03-28 07:23:15'),(11,'pbkdf2_sha256$20000$0PIxyrtTyd5e$pku6f2pvFJUWNvWCVbE9I8BcLLivV2tz8SLSNgce3Fc=',NULL,0,'fangle','','','fangle17@163.com',0,1,'2017-03-28 07:59:23'),(12,'pbkdf2_sha256$20000$fysThfHHZsJi$eEVrChRk2hWhu3vPsdMID6RHPFEyzizlFRHGSsxld6o=','2017-03-28 15:57:53',0,'migongrenjia','','','migongrenjia@163.com',0,1,'2017-03-28 09:12:05'),(13,'pbkdf2_sha256$20000$6mdmbZvlnIAq$ned1HSE/Bx9xtmWfLcJTWsrlPULJNAVhZi8WteidT8c=','2017-03-28 09:50:25',0,'WhyNot','','','362521692@qq.com',0,1,'2017-03-28 09:47:47'),(14,'pbkdf2_sha256$20000$bHryAQXVdO5D$6xHQIpa8RiZbjJbIjOa9U1g/m8H8baaqWe2/7Wq0i9s=','2017-03-28 12:42:33',0,'bbbqqq','','','1573649960@qq.com',0,1,'2017-03-28 12:41:25'),(15,'pbkdf2_sha256$20000$FJkjYHNQg9yT$l1o1unH8x+GgTO1U5Pxaf8scT8eHsnFeuWW/1kKyOWo=',NULL,0,'zoe','','','zoezero@gmail.com',0,1,'2017-04-03 17:08:49'),(16,'pbkdf2_sha256$20000$eivb7WBmOIxX$3RMPWzqhrkb1x33cnujvAUvKSPs+em0yAMJ4ZBUUVHA=','2017-04-04 11:49:10',0,'zoezoe','','','zoezero0@gmail.com',0,1,'2017-04-04 11:47:44'),(17,'pbkdf2_sha256$20000$mFEQa5atV9fl$rAFFTpg69gfXKT9L6vtVmJw4nhOMaWcCqphF8tUg08Q=','2017-04-11 15:01:16',0,'wwwwww','','','339847016@qq.com',0,1,'2017-04-11 14:59:22'),(18,'pbkdf2_sha256$20000$aDpWKCZ3oLGS$e/y8wkY+CbYx4LqV0pYZN3/IMoxwCRX2BP4Ft96Qjng=','2017-04-11 15:15:32',0,'sersin','','','sersin@163.com',0,1,'2017-04-11 15:09:04'),(19,'pbkdf2_sha256$20000$KwZNvGLYZp5i$VkSsTm4G3++2sosz78fjFWKdJUROVG6BK//uczp2DRo=','2017-05-05 23:13:18',0,'XuGuangQiang','','','981886190@qq.com',0,1,'2017-05-05 23:13:14'),(20,'pbkdf2_sha256$20000$uqh5z7LVSnPU$A+xuG8mG45ERKAe1RZiABmAutztdL/v5xzOAwfYEL7s=','2017-05-10 12:31:45',0,'kongbin','','','1428175016@qq.com',0,1,'2017-05-10 12:29:57'),(21,'pbkdf2_sha256$20000$tFJtAL1AzxxG$LwLHXKgTw1z8z7Mxxk+516CPCVTAsVfkxftCcdx1zGk=','2017-05-13 23:23:38',0,'liuwei_star','','','liuwei_hwbj@163.com',0,1,'2017-05-13 23:23:31'),(22,'pbkdf2_sha256$20000$AGPLoHjXMOBz$wT5Nuos2CQoguDivxPbuD/pEBfhDj+oi9/u7UyIluI0=','2017-05-31 21:40:00',0,'caicai','','','85732612@qq.com',0,1,'2017-05-31 21:35:50');
/*!40000 ALTER TABLE `auth_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user_groups`
--

DROP TABLE IF EXISTS `auth_user_groups`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_user_groups` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `group_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_id` (`user_id`,`group_id`),
  KEY `auth_user_groups_group_id_495cc7ac9b31e17d_fk_auth_group_id` (`group_id`),
  CONSTRAINT `auth_user_groups_group_id_495cc7ac9b31e17d_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`),
  CONSTRAINT `auth_user_groups_user_id_7e712683b4c85012_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user_groups`
--

LOCK TABLES `auth_user_groups` WRITE;
/*!40000 ALTER TABLE `auth_user_groups` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_user_groups` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user_user_permissions`
--

DROP TABLE IF EXISTS `auth_user_user_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_user_user_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_id` (`user_id`,`permission_id`),
  KEY `auth_user_us_permission_id_a806e7873d97185_fk_auth_permission_id` (`permission_id`),
  CONSTRAINT `auth_user_us_permission_id_a806e7873d97185_fk_auth_permission_id` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`),
  CONSTRAINT `auth_user_user_permissi_user_id_591447dcdc7fd3b5_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user_user_permissions`
--

LOCK TABLES `auth_user_user_permissions` WRITE;
/*!40000 ALTER TABLE `auth_user_user_permissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_user_user_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `books_bookinfo`
--

DROP TABLE IF EXISTS `books_bookinfo`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `books_bookinfo` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `btitle` varchar(40) NOT NULL,
  `bauthor` varchar(15) NOT NULL,
  `bpub_date` datetime NOT NULL,
  `bread` int(11) NOT NULL,
  `bcontent` longtext NOT NULL,
  `bhtml` longtext NOT NULL,
  `isrelease` tinyint(1) NOT NULL,
  `isDelete` tinyint(1) NOT NULL,
  `user_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `books_bookinfo_user_id_b21b83eabad0675_fk_users_userinfo_id` (`user_id`),
  CONSTRAINT `books_bookinfo_user_id_b21b83eabad0675_fk_users_userinfo_id` FOREIGN KEY (`user_id`) REFERENCES `users_userinfo` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=50 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `books_bookinfo`
--

LOCK TABLES `books_bookinfo` WRITE;
/*!40000 ALTER TABLE `books_bookinfo` DISABLE KEYS */;
INSERT INTO `books_bookinfo` VALUES (1,'第一篇文章','archever','2017-03-27 22:39:53',0,'## hello\n\n```python\ndef hello():\n    print(\'hello\')\n```\n\n*    lsit\n*    list2\n','<h2>hello</h2>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">():</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<ul>\n<li>lsit</li>\n<li>list2</li>\n</ul>',0,1,2),(2,'第一篇文章','archever','2017-03-27 22:39:53',0,'## hello\n\n```python\ndef hello():\n    print(\'hello\')\n```\n\n*    lsit\n*    list2\n','<h2>hello</h2>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">():</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<ul>\n<li>lsit</li>\n<li>list2</li>\n</ul>',0,1,2),(3,'上传头像没反应啊，提计量系统了~','WhyNot','2017-03-28 09:51:38',0,'','',1,0,11),(4,'标题','qwe','2017-03-28 14:45:13',0,'##阿斯顿\n\n\n\n','<h2>阿斯顿</h2>',1,0,7),(5,'asd','Anecho','2017-03-31 18:35:27',0,'asaaaa','<p>asaaaa</p>',1,0,5),(6,'wenz','FangHao','2017-04-11 10:23:39',0,'#h1\n##h2\n\n```python\nfrom time import time\n```','<h1>h1</h1>\n<h2>h2</h2>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n</pre></div>',1,1,1),(7,'hello','FangHao','2017-04-11 14:56:52',0,'#h1\n##h2\n```python\n#coding=utf-8\nfrom django.db import models\n\nclass UserInfo(models.Model):\n    uname=models.CharField(max_length=20)\n    upwd=models.CharField(max_length=40)\n    uemail=models.CharField(max_length=30)\n    ushou=models.CharField(max_length=20,default=\'\')\n    uaddress=models.CharField(max_length=100,default=\'\')\n    uyoubian=models.CharField(max_length=6,default=\'\')\n    uphone=models.CharField(max_length=11,default=\'\')\n    #default,blank是python层面的约束，不影响数据库表结构\n\n```','<h1>h1</h1>\n<h2>h2</h2>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserInfo</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">uname</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"n\">upwd</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">)</span>\n    <span class=\"n\">uemail</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n    <span class=\"n\">ushou</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">uaddress</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">uyoubian</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">uphone</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\">#default,blank是python层面的约束，不影响数据库表结构</span>\n</pre></div>',1,1,1),(8,'MySQL基础','FangHao','2017-04-30 10:42:49',0,'###MySQL安装\n```bash\nsudo apt-get install mysql-server mysql-client\n```\n###管理服务\n```bash\nsudo service mysql start/stop/restart\n```\n###允许远程连接\n修改配置文件\n\n```bash\nsudo vi /etc/mysql/mysql.conf.d/mysqld.cnf\n将bind-address=127.0.0.1注释\n```\n用户赋权\n\n```sql\ngrant all privileges on *.* to \'root\'@\'%\' identified by \'mysql\' with grant option;\nflush privileges;\n```\n重启数据库\n\n###数据库操作\n创建数据库\n\n```sql\ncreate database DB_Name charset=utf8;\n```\n删除数据库\n\n```sql\ndrop database DB_Name;\n```\n切换数据库\n\n```sql\nuse DB_Name;\n```\n显示当前使用数据库\n\n```sql\nselect database();\n```\n显示存在的数据库\n\n```sql\nshow databases;\n```\n\n###表操作\n创建表\n\n```sql\ncreate table Table_Name(\n  id int auto_increment primary key not null,\n  name varchar(10),\n  cls_id int,\n  foreign key(cls_id) references class(id),\n  index index_id(id(11)),\n  .........\n);\n```\n修改表\n\n```sql\nalter table Table_Name add|change|motify|drop column\nalter table students add stu_name varchar(10) not null;\nalter table students motify stu_name char(10);\nalter table students motify stu_name students_name varchar(10);\nalter table students drop stu_name;\nalter table students add constraint stu_cls foreign key(cls_id) references class(id);\nalter table students drop foreign key stu_cls;\n```\n表的约束\n\n- 主键primary key\n- 非空not null\n- 惟一unique\n- 默认default\n- 外键foreign key\n\n###索引\n创建索引\n\n```sql\n普通索引\ncreate index Index_Name on Table_Name(column【(length)】【desc|asc】);\n唯一索引\ncreate unique index Index_Name on Table_Name(column【(length)】【desc|asc】);\n全文索引\ncreate fulltext index Index_Name on Table_Name(column【(length)】【desc|asc】); --MySQL5.6之后InnnoDB也可以创建全文索引，全文索引主要是对char、varchar、text做的查询优化\n多列索引\ncreate index Index_Name on Table_Name(\ncolumn1【(length)】【desc|asc】,\ncolumn2【(length)】【desc|asc】\ncolumn3【(length)】【desc|asc】\n......);\n```\n删除索引\n\n```sql\ndrop index Index_Name on Table_Name;\n```\n###视图\n创建视图\n\n```sql\ncreate view View_Name as 查询语句;\n```\n查看视图\n\n```sql\nselect * from View_Name;\nshow create view View_Name;\n```\n删除视图\n\n```sql\ndrop view View_Name 【,View_Name2,.....】;\n```\n修改视图\n\n```sql\ncreate or replace view View_Name as 查询语句;\n```\n###触发器\n创建触发器\n\n```sql\ncreate trigger trigger_Name\n  BEFORE|AFTER trigger_Event\n    on TABLE_NAME FOR EACH ROW trigger_STMT;\ntrigger_Event:\n- INSERT\n- DELETE\n- UPDATE\ntrigger_STMT:\n满足触发条件后执行的语句\n```\n删除触发器\n\n```sql\ndrop trigger Trigger_Name;\n```\n###数据维护\n插入\n\n```sql\ninsert into Table_Name(name,gender) values (\'张三\',1),(\'李四\',1),(\'王五\',1);\ninsert into Table_Name values (0,\'张三\',1),(0,\'李四\',1),(0,\'王五\',1);--不选择插入的列需要全部的列都要写，默认的列的值如果写上会被替换，如果不写可以用default代表默认\n```\n删除\n\n```sql\ndelete from Table_Name where id=1;\ntruncate table Tabel_Name;--注意截断表的数据无法恢复，但是删除速度快\n```\n更新\n\n```sql\nupdate Table_Name\n  set field1 = value1,\n      field2 = value2\n  where CONDITION;\n```\n###查询\n查询语句\n\n```sql\nselect distinct *\nfrom 表名\nwhere ....\ngroup by ... having ...\norder by ...\nlimit star,count;\n```\n执行顺序\n\n```sql\nfrom 表名\nwhere ....\ngroup by ...\nselect distinct *\nhaving ...\norder by ...\nlimit star,count\n```\n聚合\n\n```sql\ncount()\nsum()\navg()\nmax()\nmin()\n```\n关系\n\n```sql\njoin\ninner join\nleft join\nright join\nselect * from sutdents inner join class on students.cls_id = class.id;\n```\n自关联\n\n```sql\ncreate table areas(\naid int primary key,\natitle varchar(20),\npid int,\nforeign key(pid) references areas(id)\n);\n```\n事务\n\n```sql\nbegin;\ncommit;\nrollback;\n```\n###数据库备份\n备份\n\n```bash\nmysqldump -uroot p DatabaseName > ~/Desktop/back.sql\n```\n恢复\n\n```bash\nmysql -uroot –p DatabaseName < ~/Desktop/back.sql\n```\n###用户\n创建用户\n\n```sql\nCREATE USER \'dog\'@\'localhost\' IDENTIFIED BY \'123456\';\nCREATE USER \'pig\'@\'192.168.1.101_\' IDENDIFIED BY \'123456\';\nCREATE USER \'pig\'@\'%\' IDENTIFIED BY \'123456\';\nCREATE USER \'pig\'@\'%\' IDENTIFIED BY \'\';\nCREATE USER \'pig\'@\'%\';\n```\n- username：你将创建的用户名\n- host：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符%\n- password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器\n\n删除用户\n\n```sql\nDROP USER \'username\'@\'host\';\n```\n\n赋权\n\n```sql\nGRANT privileges ON databasename.tablename TO \'username\'@\'host\'\n```\n- privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALL\n- databasename：数据库名\n- tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用*表示，如*.*\n\n```sql\nGRANT SELECT, INSERT ON test.user TO \'pig\'@\'%\';\nGRANT ALL ON *.* TO \'pig\'@\'%\';\nGRANT privileges ON databasename.tablename TO \'username\'@\'host\' WITH GRANT OPTION;--赋权给用户可以给他们赋权的权限\n```\n\n撤销赋权\n\n```sql\nREVOKE privilege ON databasename.tablename FROM \'username\'@\'host\';\n```\n- privilege, databasename, tablename：同授权部分\n\n###密码安全\n修改密码\n\n```sql\nSET PASSWORD FOR \'username\'@\'host\' = PASSWORD(\'newpassword\');\n```\n如果是当前用户\n\n```sql\nSET PASSWORD = PASSWORD(\"newpassword\");\n```  \n\n### Mac配置\n安装mysql:\n\n```bash\nbrew install mysql\n```\n启动mysql\n\n```bash\nmysql.server start\n```\n设置密码：\n\n```bash\nmysql_secure_installation\n```\n','<h3>MySQL安装</h3>\n<div class=\"codehilite\"><pre><span></span>sudo apt-get install mysql-server mysql-client\n</pre></div>\n\n\n<h3>管理服务</h3>\n<div class=\"codehilite\"><pre><span></span>sudo service mysql start/stop/restart\n</pre></div>\n\n\n<h3>允许远程连接</h3>\n<p>修改配置文件</p>\n<div class=\"codehilite\"><pre><span></span>sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf\n将bind-address<span class=\"o\">=</span><span class=\"m\">127</span>.0.0.1注释\n</pre></div>\n\n\n<p>用户赋权</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">grant</span> <span class=\"k\">all</span> <span class=\"k\">privileges</span> <span class=\"k\">on</span> <span class=\"o\">*</span><span class=\"p\">.</span><span class=\"o\">*</span> <span class=\"k\">to</span> <span class=\"s1\">&#39;root&#39;</span><span class=\"o\">@</span><span class=\"s1\">&#39;%&#39;</span> <span class=\"n\">identified</span> <span class=\"k\">by</span> <span class=\"s1\">&#39;mysql&#39;</span> <span class=\"k\">with</span> <span class=\"k\">grant</span> <span class=\"k\">option</span><span class=\"p\">;</span>\n<span class=\"n\">flush</span> <span class=\"k\">privileges</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>重启数据库</p>\n<h3>数据库操作</h3>\n<p>创建数据库</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">create</span> <span class=\"k\">database</span> <span class=\"n\">DB_Name</span> <span class=\"n\">charset</span><span class=\"o\">=</span><span class=\"n\">utf8</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>删除数据库</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">drop</span> <span class=\"k\">database</span> <span class=\"n\">DB_Name</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>切换数据库</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">use</span> <span class=\"n\">DB_Name</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>显示当前使用数据库</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">select</span> <span class=\"k\">database</span><span class=\"p\">();</span>\n</pre></div>\n\n\n<p>显示存在的数据库</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">show</span> <span class=\"n\">databases</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<h3>表操作</h3>\n<p>创建表</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">create</span> <span class=\"k\">table</span> <span class=\"k\">Table_Name</span><span class=\"p\">(</span>\n  <span class=\"n\">id</span> <span class=\"nb\">int</span> <span class=\"n\">auto_increment</span> <span class=\"k\">primary</span> <span class=\"k\">key</span> <span class=\"k\">not</span> <span class=\"k\">null</span><span class=\"p\">,</span>\n  <span class=\"n\">name</span> <span class=\"nb\">varchar</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">),</span>\n  <span class=\"n\">cls_id</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n  <span class=\"k\">foreign</span> <span class=\"k\">key</span><span class=\"p\">(</span><span class=\"n\">cls_id</span><span class=\"p\">)</span> <span class=\"k\">references</span> <span class=\"k\">class</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">),</span>\n  <span class=\"k\">index</span> <span class=\"n\">index_id</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">)),</span>\n  <span class=\"p\">.........</span>\n<span class=\"p\">);</span>\n</pre></div>\n\n\n<p>修改表</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">alter</span> <span class=\"k\">table</span> <span class=\"k\">Table_Name</span> <span class=\"k\">add</span><span class=\"o\">|</span><span class=\"n\">change</span><span class=\"o\">|</span><span class=\"n\">motify</span><span class=\"o\">|</span><span class=\"k\">drop</span> <span class=\"k\">column</span>\n<span class=\"k\">alter</span> <span class=\"k\">table</span> <span class=\"n\">students</span> <span class=\"k\">add</span> <span class=\"n\">stu_name</span> <span class=\"nb\">varchar</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"k\">not</span> <span class=\"k\">null</span><span class=\"p\">;</span>\n<span class=\"k\">alter</span> <span class=\"k\">table</span> <span class=\"n\">students</span> <span class=\"n\">motify</span> <span class=\"n\">stu_name</span> <span class=\"nb\">char</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">);</span>\n<span class=\"k\">alter</span> <span class=\"k\">table</span> <span class=\"n\">students</span> <span class=\"n\">motify</span> <span class=\"n\">stu_name</span> <span class=\"n\">students_name</span> <span class=\"nb\">varchar</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">);</span>\n<span class=\"k\">alter</span> <span class=\"k\">table</span> <span class=\"n\">students</span> <span class=\"k\">drop</span> <span class=\"n\">stu_name</span><span class=\"p\">;</span>\n<span class=\"k\">alter</span> <span class=\"k\">table</span> <span class=\"n\">students</span> <span class=\"k\">add</span> <span class=\"k\">constraint</span> <span class=\"n\">stu_cls</span> <span class=\"k\">foreign</span> <span class=\"k\">key</span><span class=\"p\">(</span><span class=\"n\">cls_id</span><span class=\"p\">)</span> <span class=\"k\">references</span> <span class=\"k\">class</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">);</span>\n<span class=\"k\">alter</span> <span class=\"k\">table</span> <span class=\"n\">students</span> <span class=\"k\">drop</span> <span class=\"k\">foreign</span> <span class=\"k\">key</span> <span class=\"n\">stu_cls</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>表的约束</p>\n<ul>\n<li>主键primary key</li>\n<li>非空not null</li>\n<li>惟一unique</li>\n<li>默认default</li>\n<li>外键foreign key</li>\n</ul>\n<h3>索引</h3>\n<p>创建索引</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">普通索引</span>\n<span class=\"k\">create</span> <span class=\"k\">index</span> <span class=\"n\">Index_Name</span> <span class=\"k\">on</span> <span class=\"k\">Table_Name</span><span class=\"p\">(</span><span class=\"k\">column</span><span class=\"err\">【</span><span class=\"p\">(</span><span class=\"k\">length</span><span class=\"p\">)</span><span class=\"err\">】【</span><span class=\"k\">desc</span><span class=\"o\">|</span><span class=\"k\">asc</span><span class=\"err\">】</span><span class=\"p\">);</span>\n<span class=\"err\">唯一索引</span>\n<span class=\"k\">create</span> <span class=\"k\">unique</span> <span class=\"k\">index</span> <span class=\"n\">Index_Name</span> <span class=\"k\">on</span> <span class=\"k\">Table_Name</span><span class=\"p\">(</span><span class=\"k\">column</span><span class=\"err\">【</span><span class=\"p\">(</span><span class=\"k\">length</span><span class=\"p\">)</span><span class=\"err\">】【</span><span class=\"k\">desc</span><span class=\"o\">|</span><span class=\"k\">asc</span><span class=\"err\">】</span><span class=\"p\">);</span>\n<span class=\"err\">全文索引</span>\n<span class=\"k\">create</span> <span class=\"n\">fulltext</span> <span class=\"k\">index</span> <span class=\"n\">Index_Name</span> <span class=\"k\">on</span> <span class=\"k\">Table_Name</span><span class=\"p\">(</span><span class=\"k\">column</span><span class=\"err\">【</span><span class=\"p\">(</span><span class=\"k\">length</span><span class=\"p\">)</span><span class=\"err\">】【</span><span class=\"k\">desc</span><span class=\"o\">|</span><span class=\"k\">asc</span><span class=\"err\">】</span><span class=\"p\">);</span> <span class=\"c1\">--MySQL5.6之后InnnoDB也可以创建全文索引，全文索引主要是对char、varchar、text做的查询优化</span>\n<span class=\"err\">多列索引</span>\n<span class=\"k\">create</span> <span class=\"k\">index</span> <span class=\"n\">Index_Name</span> <span class=\"k\">on</span> <span class=\"k\">Table_Name</span><span class=\"p\">(</span>\n<span class=\"n\">column1</span><span class=\"err\">【</span><span class=\"p\">(</span><span class=\"k\">length</span><span class=\"p\">)</span><span class=\"err\">】【</span><span class=\"k\">desc</span><span class=\"o\">|</span><span class=\"k\">asc</span><span class=\"err\">】</span><span class=\"p\">,</span>\n<span class=\"n\">column2</span><span class=\"err\">【</span><span class=\"p\">(</span><span class=\"k\">length</span><span class=\"p\">)</span><span class=\"err\">】【</span><span class=\"k\">desc</span><span class=\"o\">|</span><span class=\"k\">asc</span><span class=\"err\">】</span>\n<span class=\"n\">column3</span><span class=\"err\">【</span><span class=\"p\">(</span><span class=\"k\">length</span><span class=\"p\">)</span><span class=\"err\">】【</span><span class=\"k\">desc</span><span class=\"o\">|</span><span class=\"k\">asc</span><span class=\"err\">】</span>\n<span class=\"p\">......);</span>\n</pre></div>\n\n\n<p>删除索引</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">drop</span> <span class=\"k\">index</span> <span class=\"n\">Index_Name</span> <span class=\"k\">on</span> <span class=\"k\">Table_Name</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<h3>视图</h3>\n<p>创建视图</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">create</span> <span class=\"k\">view</span> <span class=\"n\">View_Name</span> <span class=\"k\">as</span> <span class=\"err\">查询语句</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>查看视图</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">View_Name</span><span class=\"p\">;</span>\n<span class=\"k\">show</span> <span class=\"k\">create</span> <span class=\"k\">view</span> <span class=\"n\">View_Name</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>删除视图</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">drop</span> <span class=\"k\">view</span> <span class=\"n\">View_Name</span> <span class=\"err\">【</span><span class=\"p\">,</span><span class=\"n\">View_Name2</span><span class=\"p\">,.....</span><span class=\"err\">】</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>修改视图</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">create</span> <span class=\"k\">or</span> <span class=\"k\">replace</span> <span class=\"k\">view</span> <span class=\"n\">View_Name</span> <span class=\"k\">as</span> <span class=\"err\">查询语句</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<h3>触发器</h3>\n<p>创建触发器</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">create</span> <span class=\"k\">trigger</span> <span class=\"k\">trigger_Name</span>\n  <span class=\"k\">BEFORE</span><span class=\"o\">|</span><span class=\"k\">AFTER</span> <span class=\"n\">trigger_Event</span>\n    <span class=\"k\">on</span> <span class=\"k\">TABLE_NAME</span> <span class=\"k\">FOR</span> <span class=\"k\">EACH</span> <span class=\"k\">ROW</span> <span class=\"n\">trigger_STMT</span><span class=\"p\">;</span>\n<span class=\"n\">trigger_Event</span><span class=\"p\">:</span>\n<span class=\"o\">-</span> <span class=\"k\">INSERT</span>\n<span class=\"o\">-</span> <span class=\"k\">DELETE</span>\n<span class=\"o\">-</span> <span class=\"k\">UPDATE</span>\n<span class=\"n\">trigger_STMT</span><span class=\"p\">:</span>\n<span class=\"err\">满足触发条件后执行的语句</span>\n</pre></div>\n\n\n<p>删除触发器</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">drop</span> <span class=\"k\">trigger</span> <span class=\"k\">Trigger_Name</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<h3>数据维护</h3>\n<p>插入</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">insert</span> <span class=\"k\">into</span> <span class=\"k\">Table_Name</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"n\">gender</span><span class=\"p\">)</span> <span class=\"k\">values</span> <span class=\"p\">(</span><span class=\"s1\">&#39;张三&#39;</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),(</span><span class=\"s1\">&#39;李四&#39;</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),(</span><span class=\"s1\">&#39;王五&#39;</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"k\">insert</span> <span class=\"k\">into</span> <span class=\"k\">Table_Name</span> <span class=\"k\">values</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"s1\">&#39;张三&#39;</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"s1\">&#39;李四&#39;</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"s1\">&#39;王五&#39;</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"c1\">--不选择插入的列需要全部的列都要写，默认的列的值如果写上会被替换，如果不写可以用default代表默认</span>\n</pre></div>\n\n\n<p>删除</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">delete</span> <span class=\"k\">from</span> <span class=\"k\">Table_Name</span> <span class=\"k\">where</span> <span class=\"n\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"k\">truncate</span> <span class=\"k\">table</span> <span class=\"n\">Tabel_Name</span><span class=\"p\">;</span><span class=\"c1\">--注意截断表的数据无法恢复，但是删除速度快</span>\n</pre></div>\n\n\n<p>更新</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">update</span> <span class=\"k\">Table_Name</span>\n  <span class=\"k\">set</span> <span class=\"n\">field1</span> <span class=\"o\">=</span> <span class=\"n\">value1</span><span class=\"p\">,</span>\n      <span class=\"n\">field2</span> <span class=\"o\">=</span> <span class=\"n\">value2</span>\n  <span class=\"k\">where</span> <span class=\"n\">CONDITION</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<h3>查询</h3>\n<p>查询语句</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">select</span> <span class=\"k\">distinct</span> <span class=\"o\">*</span>\n<span class=\"k\">from</span> <span class=\"err\">表名</span>\n<span class=\"k\">where</span> <span class=\"p\">....</span>\n<span class=\"k\">group</span> <span class=\"k\">by</span> <span class=\"p\">...</span> <span class=\"k\">having</span> <span class=\"p\">...</span>\n<span class=\"k\">order</span> <span class=\"k\">by</span> <span class=\"p\">...</span>\n<span class=\"k\">limit</span> <span class=\"n\">star</span><span class=\"p\">,</span><span class=\"k\">count</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>执行顺序</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">from</span> <span class=\"err\">表名</span>\n<span class=\"k\">where</span> <span class=\"p\">....</span>\n<span class=\"k\">group</span> <span class=\"k\">by</span> <span class=\"p\">...</span>\n<span class=\"k\">select</span> <span class=\"k\">distinct</span> <span class=\"o\">*</span>\n<span class=\"k\">having</span> <span class=\"p\">...</span>\n<span class=\"k\">order</span> <span class=\"k\">by</span> <span class=\"p\">...</span>\n<span class=\"k\">limit</span> <span class=\"n\">star</span><span class=\"p\">,</span><span class=\"k\">count</span>\n</pre></div>\n\n\n<p>聚合</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">count</span><span class=\"p\">()</span>\n<span class=\"k\">sum</span><span class=\"p\">()</span>\n<span class=\"k\">avg</span><span class=\"p\">()</span>\n<span class=\"k\">max</span><span class=\"p\">()</span>\n<span class=\"k\">min</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>关系</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">join</span>\n<span class=\"k\">inner</span> <span class=\"k\">join</span>\n<span class=\"k\">left</span> <span class=\"k\">join</span>\n<span class=\"k\">right</span> <span class=\"k\">join</span>\n<span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">sutdents</span> <span class=\"k\">inner</span> <span class=\"k\">join</span> <span class=\"k\">class</span> <span class=\"k\">on</span> <span class=\"n\">students</span><span class=\"p\">.</span><span class=\"n\">cls_id</span> <span class=\"o\">=</span> <span class=\"k\">class</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>自关联</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">create</span> <span class=\"k\">table</span> <span class=\"n\">areas</span><span class=\"p\">(</span>\n<span class=\"n\">aid</span> <span class=\"nb\">int</span> <span class=\"k\">primary</span> <span class=\"k\">key</span><span class=\"p\">,</span>\n<span class=\"n\">atitle</span> <span class=\"nb\">varchar</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">),</span>\n<span class=\"n\">pid</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n<span class=\"k\">foreign</span> <span class=\"k\">key</span><span class=\"p\">(</span><span class=\"n\">pid</span><span class=\"p\">)</span> <span class=\"k\">references</span> <span class=\"n\">areas</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span>\n<span class=\"p\">);</span>\n</pre></div>\n\n\n<p>事务</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span><span class=\"p\">;</span>\n<span class=\"k\">commit</span><span class=\"p\">;</span>\n<span class=\"k\">rollback</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<h3>数据库备份</h3>\n<p>备份</p>\n<div class=\"codehilite\"><pre><span></span>mysqldump -uroot p DatabaseName &gt; ~/Desktop/back.sql\n</pre></div>\n\n\n<p>恢复</p>\n<div class=\"codehilite\"><pre><span></span>mysql -uroot –p DatabaseName &lt; ~/Desktop/back.sql\n</pre></div>\n\n\n<h3>用户</h3>\n<p>创建用户</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">CREATE</span> <span class=\"k\">USER</span> <span class=\"s1\">&#39;dog&#39;</span><span class=\"o\">@</span><span class=\"s1\">&#39;localhost&#39;</span> <span class=\"n\">IDENTIFIED</span> <span class=\"k\">BY</span> <span class=\"s1\">&#39;123456&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">CREATE</span> <span class=\"k\">USER</span> <span class=\"s1\">&#39;pig&#39;</span><span class=\"o\">@</span><span class=\"s1\">&#39;192.168.1.101_&#39;</span> <span class=\"n\">IDENDIFIED</span> <span class=\"k\">BY</span> <span class=\"s1\">&#39;123456&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">CREATE</span> <span class=\"k\">USER</span> <span class=\"s1\">&#39;pig&#39;</span><span class=\"o\">@</span><span class=\"s1\">&#39;%&#39;</span> <span class=\"n\">IDENTIFIED</span> <span class=\"k\">BY</span> <span class=\"s1\">&#39;123456&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">CREATE</span> <span class=\"k\">USER</span> <span class=\"s1\">&#39;pig&#39;</span><span class=\"o\">@</span><span class=\"s1\">&#39;%&#39;</span> <span class=\"n\">IDENTIFIED</span> <span class=\"k\">BY</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">CREATE</span> <span class=\"k\">USER</span> <span class=\"s1\">&#39;pig&#39;</span><span class=\"o\">@</span><span class=\"s1\">&#39;%&#39;</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<ul>\n<li>username：你将创建的用户名</li>\n<li>host：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符%</li>\n<li>password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器</li>\n</ul>\n<p>删除用户</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">DROP</span> <span class=\"k\">USER</span> <span class=\"s1\">&#39;username&#39;</span><span class=\"o\">@</span><span class=\"s1\">&#39;host&#39;</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>赋权</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">GRANT</span> <span class=\"k\">privileges</span> <span class=\"k\">ON</span> <span class=\"n\">databasename</span><span class=\"p\">.</span><span class=\"n\">tablename</span> <span class=\"k\">TO</span> <span class=\"s1\">&#39;username&#39;</span><span class=\"o\">@</span><span class=\"s1\">&#39;host&#39;</span>\n</pre></div>\n\n\n<ul>\n<li>privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALL</li>\n<li>databasename：数据库名</li>\n<li>tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用<em>表示，如</em>.*</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">GRANT</span> <span class=\"k\">SELECT</span><span class=\"p\">,</span> <span class=\"k\">INSERT</span> <span class=\"k\">ON</span> <span class=\"n\">test</span><span class=\"p\">.</span><span class=\"k\">user</span> <span class=\"k\">TO</span> <span class=\"s1\">&#39;pig&#39;</span><span class=\"o\">@</span><span class=\"s1\">&#39;%&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">GRANT</span> <span class=\"k\">ALL</span> <span class=\"k\">ON</span> <span class=\"o\">*</span><span class=\"p\">.</span><span class=\"o\">*</span> <span class=\"k\">TO</span> <span class=\"s1\">&#39;pig&#39;</span><span class=\"o\">@</span><span class=\"s1\">&#39;%&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">GRANT</span> <span class=\"k\">privileges</span> <span class=\"k\">ON</span> <span class=\"n\">databasename</span><span class=\"p\">.</span><span class=\"n\">tablename</span> <span class=\"k\">TO</span> <span class=\"s1\">&#39;username&#39;</span><span class=\"o\">@</span><span class=\"s1\">&#39;host&#39;</span> <span class=\"k\">WITH</span> <span class=\"k\">GRANT</span> <span class=\"k\">OPTION</span><span class=\"p\">;</span><span class=\"c1\">--赋权给用户可以给他们赋权的权限</span>\n</pre></div>\n\n\n<p>撤销赋权</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">REVOKE</span> <span class=\"n\">privilege</span> <span class=\"k\">ON</span> <span class=\"n\">databasename</span><span class=\"p\">.</span><span class=\"n\">tablename</span> <span class=\"k\">FROM</span> <span class=\"s1\">&#39;username&#39;</span><span class=\"o\">@</span><span class=\"s1\">&#39;host&#39;</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<ul>\n<li>privilege, databasename, tablename：同授权部分</li>\n</ul>\n<h3>密码安全</h3>\n<p>修改密码</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SET</span> <span class=\"n\">PASSWORD</span> <span class=\"k\">FOR</span> <span class=\"s1\">&#39;username&#39;</span><span class=\"o\">@</span><span class=\"s1\">&#39;host&#39;</span> <span class=\"o\">=</span> <span class=\"n\">PASSWORD</span><span class=\"p\">(</span><span class=\"s1\">&#39;newpassword&#39;</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>如果是当前用户</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">SET</span> <span class=\"n\">PASSWORD</span> <span class=\"o\">=</span> <span class=\"n\">PASSWORD</span><span class=\"p\">(</span><span class=\"ss\">&quot;newpassword&quot;</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<h3>Mac配置</h3>\n<p>安装mysql:</p>\n<div class=\"codehilite\"><pre><span></span>brew install mysql\n</pre></div>\n\n\n<p>启动mysql</p>\n<div class=\"codehilite\"><pre><span></span>mysql.server start\n</pre></div>\n\n\n<p>设置密码：</p>\n<div class=\"codehilite\"><pre><span></span>mysql_secure_installation\n</pre></div>',1,0,1),(9,'MongoDB基础','FangHao','2017-04-30 10:43:36',0,'###安装mongodb\n```bash\nsudo apt-get install -y mongodb-org\n```\n###创建mongodb文件目录\n```bash\n$ sudo mkdir -p /data/db    #创建数据存储目录\n$ sudo chmod mongodb:mongodb /data/* \n```\n###启动、停止、重启\n```bash\n$ sudo service mongodb start\n$ sudo service mongodb stop\n$ sudo service mongodb restart\n```\n###进入mongoDB客户端\n```bash\n$ sudo mongo\n```\n建议使用robomongo\n\n###数据库操作\n查看当前数据库名称\n\n```js\ndb\n```\n列出所有在物理上存在的数据库\n\n```js\nshow dbs\n```\n切换数据库\n如果数据库不存在，则指向数据库，但不创建，直到插入数据或创建集合时数据库才被创建\n\n```js\nuse Database_Name\n```\n删除数据库\n\n- 删除指向的数据库\n\n```js\ndrop Database_Name()\n```\n###集合collections\n创建集合\n\n```js\ndb.createCollection(name, options)\n```\n- options参数代表长度限制，如果想做限制可以：\n\n```js\ndb.createCollection(\"sub\", { capped : true, size : 10 } )\n```\n查看目前存在的集合\n\n```js\nshow collections\n```\n删除集合\n\n```js\ndb.Collection_Name.drop()\n```\n###数据维护\n插入\n\n```js\ndb.collections_name.insert({name:\'张三\',gender:true})\n\ns1={_id:\'20160101\',name:\'hr\'}\ns1.gender=0\ndb.stu.insert(s1)\n```\n更新\n\n```js\ndb.collection_name.update(\n   <query>,\n   <update>,\n   {multi: <boolean>}\n)\n```js\n- <query>要修改的值，这里写一个查询\n- <update>修改为什么值\n- 默认只修改一条，如果多条修改的话需要第三个参数{multi:true}\n\n```js\ndb.stu.uppdate({name:\'张三\'},{age:18}) #这条修改会改变文档的格式\ndb.stu.uppdate({name:\'张三\'},{$set:{age:18}}) #这条修改只会改变文档中age的值\n```\n删除\n\n```js\ndb.stu.remove({gender:0},{justOne:true}) #只删除一条匹配的数据\ndb.stu.remove({}) #删除stu集合中所有数据\n```\n\n###数据查询\n```js\ndb.stu.find({name:\'张三\'}) #基础查询\ndb.stu.find().pretty() #格式化查询\ndb.stu.findOne({name:\'张三\'}) #查询符合条件的一条数据\n```\n比较运算符\n\n- 等于，默认是等于判断，没有运算符\n- 小于$lt\n- 小于或等于$lte\n- 大于$gt\n- 大于或等于$gte\n- 不等于$ne\n\n```js\ndb.stu.find({age:{$gte:18}})\n```\n逻辑运算符\n\n- 查询时可以有多个条件，多个条件之间需要通过逻辑运算符连接\n- 逻辑与：默认是逻辑与的关系\n\n```js\ndb.stu.find({age:{$gte:18}},{title:\'python\'})\n```\n- 逻辑或：使用$or\n\n```js\ndb.stu.find({age:{$gte:18}},$or:[{title:\'python\'},{sal:{$lte:1500}}])\n```\n\n范围运算符\n\n- 使用\"$in\"，\"$nin\" 判断是否在某个范围内\n\n```js\ndb.stu.find(name:{$in:[\'张三\',\'李四\',\'王五\']})\n```\n支持正则表达式\n\n- 使用//或$regex编写正则表达式\n\n```js\ndb.stu.find({name:{$regex:\'^王\'}})\ndb.stu.find({name:/^王/})\n```\n自定义查询\n\n- 使用$where后面写一个函数，返回满足条件的数据\n\n```js\ndb.stu.find({$where:function(){return this.age>20}})\n```\nLIMIT与SKIP\n\n```js\ndb.stu.find().limit(2)\ndb.stu.find().skip(2)\ndb.stu.find().skip(2).limit(2) #建议先skip再limit\n```\n\n投影\n- 在查询到的返回结果中，只选择必要的字段，而不是选择一个文档的整个字段\n\n```js\ndb.stu.find({},{name:1,gender:1}) #查询结果会有的字段是_id、name、gender\ndb.stu.find({},{_id:0,name:1,gender:1}) #查询结果不会存在_id\n```\n排序\n- 方法sort()，用于对结果集进行排序\n\n```js\ndb.stu.find().sort({gender:-1,age:1})\n```\n\n统计个数\n- 方法count()用于统计结果集中文档条数\n\n```js\ndb.stu.find({title:\'python\'}).count()\ndb.stu.count({title:\'python\'})\n```\n消除重复\n- 方法distinct()对数据进行去重\n\n```js\ndb.集合名称.distinct(\'去重字段\',{条件})\ndb.stu.distinct(\'name\',{age:{$gte:20}})\n```\n\n聚合 aggregate\n- 语法\n\n```js\ndb.集合名称.aggregate([{管道:{表达式}}])\n```\n- 常用管道\n  * $group：将集合中的文档分组，可用于统计结果\n  * $match：过滤数据，只输出符合条件的文档\n  * $project：修改输入文档的结构，如重命名、增加、删除字段、创建计算结果\n  * $sort：将输入文档排序后输出\n  * $limit：限制聚合管道返回的文档数\n  * $skip：跳过指定数量的文档，并返回余下的文档\n  * $unwind：将数组类型的字段进行拆分\n- 常用表达式\n  * $sum：计算总和，$sum:1同count表示计数\n  * $avg：计算平均值\n  * $min：获取最小值\n  * $max：获取最大值\n  * $push：在结果文档中插入值到一个数组中\n  * $first：根据资源文档的排序获取第一个文档数据\n  * $last：根据资源文档的排序获取最后一个文档数据\n\n```js\ndb.stu.aggregate([\n{$match:{age:{$gt:20}}},\n{$group:{_id:\'$title\',maxAge:{$max:\'$age\'}}},\n{$sort:{maxAge:-1}},\n{$skip:2},\n{$limit:1}\n])\n```\n```js\ndb.stu.aggregate([\n    {$project:{_id:0,name:1,age:1}}\n])\n```\n```js\ndb.集合名称.aggregate([{$unwind:\'$字段名称\'}])\ndb.t2.aggregate([{$unwind:\'$size\'}])\ndb.t3.aggregate([{$unwind:{path:\'$sizes\',preserveNullAndEmptyArrays:true}}]) #消除null或者空数组的影响\n```\n\n###索引\n创建索引\n- 1表示升序，-1表示降序\n\n```js\ndb.集合.ensureIndex({属性:1})\n如\ndb.stu.ensureIndex({\'name\':1})\ndb.stu.ensureIndex({\'name\':1},{\'uniqe\':true}) #创建唯一索引\ndb.stu.ensureIndex({\'name\':1,\'age\':-1}) #创建多行索引\n```\n查看所有索引\n\n```js\ndb.stu.getIndexes()\n```\n删除索引\n\n```js\ndb.stu.dropIndexes(\'索引名\') #索引名从db.stu.getIndexes()中查询\n```\n###安全性\n- 常用系统角色如下：\n * root：只在admin数据库中可用，超级账号，超级权限\n * Read：允许用户读取指定数据库\n * readWrite：允许用户读写指定数据库\n\nmongo登录客户端创建超级管理员用户\n\n```js\nuse admin\ndb.createUser({\nuser:\'admin\',\npwd:\'admin\',\nroles:[{role:\'root\',db:\'admin\'}]\n})\n```\n修改配置文件启动身份验证\n\n```bash\nsudo vi /etc/mongod.conf\n\nsecurity:\n  authorization: enabled #注意enabled前有空格\n```\n重启mongd服务\n\n```bash\nsudo service mongod restart\n```\n退出后重新登录\n\n```bash\nmongo -u admin -p --authenticationDatabase admin\n```\n使用超级用户创建普通用户\n\n```js\nuse runoob #要给哪个数据库创建用户就use哪个\ndb.createUser({\nuser:\'runoob\',\npwd:\'runoob\',\nroles:[{role:\'readWrite\',db:\'runoob\'}]\n})\n```\n退出后使用普通用户登录\n\n```bash\nmogo -u runoob -p --authenticationDatabase runoob\n```\n修改用户：可以修改pwd、roles属性(只能用admin用户修改)\n\n```js\ndb.updateUser(\'runoob\',{pwd:\'123\'})\n```\n\n###副本集\n创建数据存储路径\n\n```bash\ncd ~/Desktop\nmkdir t1\nmkdir t2\n```\n启动主从服务\n\n```bash\nmongod --bind_ip 192.168.100.128 --port 27017 --dbpath ~/Desktop/t1 --replSet rs0\nmongod --bind_ip 192.168.100.128 --port 27018 --dbpath ~/Desktop/t2 --replSet rs0\n```\n也可以通过配置文件修改启动服务vim /etc/mongod.conf\n\n```bash\n#主服务配置\nport=27018 #指定端口\nfork=true #后台运行\ndbpath=/home/map/mongodb/mongo #规定数据库的位置\nlogpath=/home/map/mongodb/mlog/mongodb.log #规定数据库的日志文件\nmaster=true #设置主\n# bind_ip=127.0.0.1,192.168.0.4 #允许的地址 为了安全\nnohttpinterface=true #禁止http访问\n#从服务配置\nport=27018 #指定端口\nfork=true #后台运行\ndbpath=/home/map/mongodb/mongo #规定数据库的位置\nlogpath=/home/map/mongodb/mlog/mongodb.log #规定数据库的日志文件\nslave=true #声明从\nsource=192.168.0.4:27018 #规定从属于哪个ip  注意：ip是主服务器的  最好用内网ip\n# bind_ip=127.0.0.1,192.168.0.4 #允许的地址 为了安全\nnohttpinterface=true #禁止http访问\n$ sudo mongod -f  ./mongod.conf #分别启动主从服务器\n```\n连接主服务\n\n```bash\nmongo --host 192.168.196.128 --port 27017\n```\n主服务初始化并查看状态\n\n```js\nrs.initiate()\nrs.status()\n```\n主服务添加从服务集\n\n```js\nrs.add(\'192.168.196.128:27018\')\n```\n启动从服务\n\n```bash\nmongo --host 192.168.196.128 --port 27018\n```\n向主服务器中插入数据\n\n```js\nuse test1\nfor(i=0;i<10;i++){db.t1.insert({_id:i})}\ndb.t1.find()\n```\n在从服务器中插查询\n\n```js\nrs.slaveOk()\ndb.t1.find()\n```\n删除从服务\n\n```js\nrs.remove(\'192.168.196.128:27018\')\n```\n\n###备份与恢复\n备份\n\n```bash\nsudo mkdir test1bak\nsudo mongodump -h 192.168.196.128:27017 -d test1 -o ~/Desktop/test1bak\n#不需要安全认证\nsudo mongodump -u runoob -p runoob --authenticationDatabase runoob -h 192.168.100.128:27017 -d runoob -o ~/Desktop/back #需要安全认证\n```\n恢复\n\n```bash\nsudo mongorestore -h 192.168.100.128:27107 -d runoob1 -o ~/Desktop/back #不需要安全认证\nsudo mongorestore -u admin -p admin --authenticationDatabase admin -h 192.168.100.128:27017 -d runoob1 -o ~/Desktop/back #需要安全认证\n```','<h3>安装mongodb</h3>\n<div class=\"codehilite\"><pre><span></span>sudo apt-get install -y mongodb-org\n</pre></div>\n\n\n<h3>创建mongodb文件目录</h3>\n<div class=\"codehilite\"><pre><span></span>$ sudo mkdir -p /data/db    <span class=\"c1\">#创建数据存储目录</span>\n$ sudo chmod mongodb:mongodb /data/* \n</pre></div>\n\n\n<h3>启动、停止、重启</h3>\n<div class=\"codehilite\"><pre><span></span>$ sudo service mongodb start\n$ sudo service mongodb stop\n$ sudo service mongodb restart\n</pre></div>\n\n\n<h3>进入mongoDB客户端</h3>\n<div class=\"codehilite\"><pre><span></span>$ sudo mongo\n</pre></div>\n\n\n<p>建议使用robomongo</p>\n<h3>数据库操作</h3>\n<p>查看当前数据库名称</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span>\n</pre></div>\n\n\n<p>列出所有在物理上存在的数据库</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">show</span> <span class=\"nx\">dbs</span>\n</pre></div>\n\n\n<p>切换数据库\n如果数据库不存在，则指向数据库，但不创建，直到插入数据或创建集合时数据库才被创建</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">use</span> <span class=\"nx\">Database_Name</span>\n</pre></div>\n\n\n<p>删除数据库</p>\n<ul>\n<li>删除指向的数据库</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">drop</span> <span class=\"nx\">Database_Name</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<h3>集合collections</h3>\n<p>创建集合</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">createCollection</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<ul>\n<li>options参数代表长度限制，如果想做限制可以：</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">createCollection</span><span class=\"p\">(</span><span class=\"s2\">&quot;sub&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">capped</span> <span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">size</span> <span class=\"o\">:</span> <span class=\"mi\">10</span> <span class=\"p\">}</span> <span class=\"p\">)</span>\n</pre></div>\n\n\n<p>查看目前存在的集合</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">show</span> <span class=\"nx\">collections</span>\n</pre></div>\n\n\n<p>删除集合</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">Collection_Name</span><span class=\"p\">.</span><span class=\"nx\">drop</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<h3>数据维护</h3>\n<p>插入</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">collections_name</span><span class=\"p\">.</span><span class=\"nx\">insert</span><span class=\"p\">({</span><span class=\"nx\">name</span><span class=\"o\">:</span><span class=\"s1\">&#39;张三&#39;</span><span class=\"p\">,</span><span class=\"nx\">gender</span><span class=\"o\">:</span><span class=\"kc\">true</span><span class=\"p\">})</span>\n\n<span class=\"nx\">s1</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">_id</span><span class=\"o\">:</span><span class=\"s1\">&#39;20160101&#39;</span><span class=\"p\">,</span><span class=\"nx\">name</span><span class=\"o\">:</span><span class=\"s1\">&#39;hr&#39;</span><span class=\"p\">}</span>\n<span class=\"nx\">s1</span><span class=\"p\">.</span><span class=\"nx\">gender</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">insert</span><span class=\"p\">(</span><span class=\"nx\">s1</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>更新</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">collection_name</span><span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">(</span>\n   <span class=\"o\">&lt;</span><span class=\"nx\">query</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n   <span class=\"o\">&lt;</span><span class=\"nx\">update</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n   <span class=\"p\">{</span><span class=\"nx\">multi</span><span class=\"o\">:</span> <span class=\"o\">&lt;</span><span class=\"kr\">boolean</span><span class=\"o\">&gt;</span><span class=\"p\">}</span>\n<span class=\"p\">)</span>\n<span class=\"sb\">```js</span>\n<span class=\"sb\">- &lt;query&gt;要修改的值，这里写一个查询</span>\n<span class=\"sb\">- &lt;update&gt;修改为什么值</span>\n<span class=\"sb\">- 默认只修改一条，如果多条修改的话需要第三个参数{multi:true}</span>\n\n<span class=\"sb\">```</span><span class=\"nx\">js</span>\n<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">uppdate</span><span class=\"p\">({</span><span class=\"nx\">name</span><span class=\"o\">:</span><span class=\"s1\">&#39;张三&#39;</span><span class=\"p\">},{</span><span class=\"nx\">age</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"p\">})</span> <span class=\"err\">#</span><span class=\"nx\">这条修改会改变文档的格式</span>\n<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">uppdate</span><span class=\"p\">({</span><span class=\"nx\">name</span><span class=\"o\">:</span><span class=\"s1\">&#39;张三&#39;</span><span class=\"p\">},{</span><span class=\"nx\">$set</span><span class=\"o\">:</span><span class=\"p\">{</span><span class=\"nx\">age</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"p\">}})</span> <span class=\"err\">#</span><span class=\"nx\">这条修改只会改变文档中age的值</span>\n</pre></div>\n\n\n<p>删除</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">remove</span><span class=\"p\">({</span><span class=\"nx\">gender</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"p\">},{</span><span class=\"nx\">justOne</span><span class=\"o\">:</span><span class=\"kc\">true</span><span class=\"p\">})</span> <span class=\"err\">#</span><span class=\"nx\">只删除一条匹配的数据</span>\n<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">remove</span><span class=\"p\">({})</span> <span class=\"err\">#</span><span class=\"nx\">删除stu集合中所有数据</span>\n</pre></div>\n\n\n<h3>数据查询</h3>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">({</span><span class=\"nx\">name</span><span class=\"o\">:</span><span class=\"s1\">&#39;张三&#39;</span><span class=\"p\">})</span> <span class=\"err\">#</span><span class=\"nx\">基础查询</span>\n<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">().</span><span class=\"nx\">pretty</span><span class=\"p\">()</span> <span class=\"err\">#</span><span class=\"nx\">格式化查询</span>\n<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">findOne</span><span class=\"p\">({</span><span class=\"nx\">name</span><span class=\"o\">:</span><span class=\"s1\">&#39;张三&#39;</span><span class=\"p\">})</span> <span class=\"err\">#</span><span class=\"nx\">查询符合条件的一条数据</span>\n</pre></div>\n\n\n<p>比较运算符</p>\n<ul>\n<li>等于，默认是等于判断，没有运算符</li>\n<li>小于$lt</li>\n<li>小于或等于$lte</li>\n<li>大于$gt</li>\n<li>大于或等于$gte</li>\n<li>不等于$ne</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">({</span><span class=\"nx\">age</span><span class=\"o\">:</span><span class=\"p\">{</span><span class=\"nx\">$gte</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"p\">}})</span>\n</pre></div>\n\n\n<p>逻辑运算符</p>\n<ul>\n<li>查询时可以有多个条件，多个条件之间需要通过逻辑运算符连接</li>\n<li>逻辑与：默认是逻辑与的关系</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">({</span><span class=\"nx\">age</span><span class=\"o\">:</span><span class=\"p\">{</span><span class=\"nx\">$gte</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"p\">}},{</span><span class=\"nx\">title</span><span class=\"o\">:</span><span class=\"s1\">&#39;python&#39;</span><span class=\"p\">})</span>\n</pre></div>\n\n\n<ul>\n<li>逻辑或：使用$or</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">({</span><span class=\"nx\">age</span><span class=\"o\">:</span><span class=\"p\">{</span><span class=\"nx\">$gte</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"p\">}},</span><span class=\"nx\">$or</span><span class=\"o\">:</span><span class=\"p\">[{</span><span class=\"nx\">title</span><span class=\"o\">:</span><span class=\"s1\">&#39;python&#39;</span><span class=\"p\">},{</span><span class=\"nx\">sal</span><span class=\"o\">:</span><span class=\"p\">{</span><span class=\"nx\">$lte</span><span class=\"o\">:</span><span class=\"mi\">1500</span><span class=\"p\">}}])</span>\n</pre></div>\n\n\n<p>范围运算符</p>\n<ul>\n<li>使用\"$in\"，\"$nin\" 判断是否在某个范围内</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"o\">:</span><span class=\"p\">{</span><span class=\"nx\">$in</span><span class=\"o\">:</span><span class=\"p\">[</span><span class=\"s1\">&#39;张三&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;李四&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;王五&#39;</span><span class=\"p\">]})</span>\n</pre></div>\n\n\n<p>支持正则表达式</p>\n<ul>\n<li>使用//或$regex编写正则表达式</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">({</span><span class=\"nx\">name</span><span class=\"o\">:</span><span class=\"p\">{</span><span class=\"nx\">$regex</span><span class=\"o\">:</span><span class=\"s1\">&#39;^王&#39;</span><span class=\"p\">}})</span>\n<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">({</span><span class=\"nx\">name</span><span class=\"o\">:</span><span class=\"sr\">/^王/</span><span class=\"p\">})</span>\n</pre></div>\n\n\n<p>自定义查询</p>\n<ul>\n<li>使用$where后面写一个函数，返回满足条件的数据</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">({</span><span class=\"nx\">$where</span><span class=\"o\">:</span><span class=\"kd\">function</span><span class=\"p\">(){</span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">age</span><span class=\"o\">&gt;</span><span class=\"mi\">20</span><span class=\"p\">}})</span>\n</pre></div>\n\n\n<p>LIMIT与SKIP</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">().</span><span class=\"nx\">limit</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">().</span><span class=\"nx\">skip</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">().</span><span class=\"nx\">skip</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">).</span><span class=\"nx\">limit</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"err\">#</span><span class=\"nx\">建议先skip再limit</span>\n</pre></div>\n\n\n<p>投影\n- 在查询到的返回结果中，只选择必要的字段，而不是选择一个文档的整个字段</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">({},{</span><span class=\"nx\">name</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"nx\">gender</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"p\">})</span> <span class=\"err\">#</span><span class=\"nx\">查询结果会有的字段是_id</span><span class=\"err\">、</span><span class=\"nx\">name</span><span class=\"err\">、</span><span class=\"nx\">gender</span>\n<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">({},{</span><span class=\"nx\">_id</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nx\">name</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"nx\">gender</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"p\">})</span> <span class=\"err\">#</span><span class=\"nx\">查询结果不会存在_id</span>\n</pre></div>\n\n\n<p>排序\n- 方法sort()，用于对结果集进行排序</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">().</span><span class=\"nx\">sort</span><span class=\"p\">({</span><span class=\"nx\">gender</span><span class=\"o\">:-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"nx\">age</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"p\">})</span>\n</pre></div>\n\n\n<p>统计个数\n- 方法count()用于统计结果集中文档条数</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">({</span><span class=\"nx\">title</span><span class=\"o\">:</span><span class=\"s1\">&#39;python&#39;</span><span class=\"p\">}).</span><span class=\"nx\">count</span><span class=\"p\">()</span>\n<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">count</span><span class=\"p\">({</span><span class=\"nx\">title</span><span class=\"o\">:</span><span class=\"s1\">&#39;python&#39;</span><span class=\"p\">})</span>\n</pre></div>\n\n\n<p>消除重复\n- 方法distinct()对数据进行去重</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">集合名称</span><span class=\"p\">.</span><span class=\"nx\">distinct</span><span class=\"p\">(</span><span class=\"s1\">&#39;去重字段&#39;</span><span class=\"p\">,{</span><span class=\"nx\">条件</span><span class=\"p\">})</span>\n<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">distinct</span><span class=\"p\">(</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">,{</span><span class=\"nx\">age</span><span class=\"o\">:</span><span class=\"p\">{</span><span class=\"nx\">$gte</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"p\">}})</span>\n</pre></div>\n\n\n<p>聚合 aggregate\n- 语法</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">集合名称</span><span class=\"p\">.</span><span class=\"nx\">aggregate</span><span class=\"p\">([{</span><span class=\"nx\">管道</span><span class=\"o\">:</span><span class=\"p\">{</span><span class=\"nx\">表达式</span><span class=\"p\">}}])</span>\n</pre></div>\n\n\n<ul>\n<li>常用管道</li>\n<li>$group：将集合中的文档分组，可用于统计结果</li>\n<li>$match：过滤数据，只输出符合条件的文档</li>\n<li>$project：修改输入文档的结构，如重命名、增加、删除字段、创建计算结果</li>\n<li>$sort：将输入文档排序后输出</li>\n<li>$limit：限制聚合管道返回的文档数</li>\n<li>$skip：跳过指定数量的文档，并返回余下的文档</li>\n<li>$unwind：将数组类型的字段进行拆分</li>\n<li>常用表达式</li>\n<li>$sum：计算总和，$sum:1同count表示计数</li>\n<li>$avg：计算平均值</li>\n<li>$min：获取最小值</li>\n<li>$max：获取最大值</li>\n<li>$push：在结果文档中插入值到一个数组中</li>\n<li>$first：根据资源文档的排序获取第一个文档数据</li>\n<li>$last：根据资源文档的排序获取最后一个文档数据</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">aggregate</span><span class=\"p\">([</span>\n<span class=\"p\">{</span><span class=\"nx\">$match</span><span class=\"o\">:</span><span class=\"p\">{</span><span class=\"nx\">age</span><span class=\"o\">:</span><span class=\"p\">{</span><span class=\"nx\">$gt</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"p\">}}},</span>\n<span class=\"p\">{</span><span class=\"nx\">$group</span><span class=\"o\">:</span><span class=\"p\">{</span><span class=\"nx\">_id</span><span class=\"o\">:</span><span class=\"s1\">&#39;$title&#39;</span><span class=\"p\">,</span><span class=\"nx\">maxAge</span><span class=\"o\">:</span><span class=\"p\">{</span><span class=\"nx\">$max</span><span class=\"o\">:</span><span class=\"s1\">&#39;$age&#39;</span><span class=\"p\">}}},</span>\n<span class=\"p\">{</span><span class=\"nx\">$sort</span><span class=\"o\">:</span><span class=\"p\">{</span><span class=\"nx\">maxAge</span><span class=\"o\">:-</span><span class=\"mi\">1</span><span class=\"p\">}},</span>\n<span class=\"p\">{</span><span class=\"nx\">$skip</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"p\">},</span>\n<span class=\"p\">{</span><span class=\"nx\">$limit</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"p\">])</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">aggregate</span><span class=\"p\">([</span>\n    <span class=\"p\">{</span><span class=\"nx\">$project</span><span class=\"o\">:</span><span class=\"p\">{</span><span class=\"nx\">_id</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nx\">name</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"nx\">age</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"p\">}}</span>\n<span class=\"p\">])</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">集合名称</span><span class=\"p\">.</span><span class=\"nx\">aggregate</span><span class=\"p\">([{</span><span class=\"nx\">$unwind</span><span class=\"o\">:</span><span class=\"s1\">&#39;$字段名称&#39;</span><span class=\"p\">}])</span>\n<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">t2</span><span class=\"p\">.</span><span class=\"nx\">aggregate</span><span class=\"p\">([{</span><span class=\"nx\">$unwind</span><span class=\"o\">:</span><span class=\"s1\">&#39;$size&#39;</span><span class=\"p\">}])</span>\n<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">t3</span><span class=\"p\">.</span><span class=\"nx\">aggregate</span><span class=\"p\">([{</span><span class=\"nx\">$unwind</span><span class=\"o\">:</span><span class=\"p\">{</span><span class=\"nx\">path</span><span class=\"o\">:</span><span class=\"s1\">&#39;$sizes&#39;</span><span class=\"p\">,</span><span class=\"nx\">preserveNullAndEmptyArrays</span><span class=\"o\">:</span><span class=\"kc\">true</span><span class=\"p\">}}])</span> <span class=\"err\">#</span><span class=\"nx\">消除null或者空数组的影响</span>\n</pre></div>\n\n\n<h3>索引</h3>\n<p>创建索引\n- 1表示升序，-1表示降序</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">集合</span><span class=\"p\">.</span><span class=\"nx\">ensureIndex</span><span class=\"p\">({</span><span class=\"nx\">属性</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"p\">})</span>\n<span class=\"nx\">如</span>\n<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">ensureIndex</span><span class=\"p\">({</span><span class=\"s1\">&#39;name&#39;</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"p\">})</span>\n<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">ensureIndex</span><span class=\"p\">({</span><span class=\"s1\">&#39;name&#39;</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"p\">},{</span><span class=\"s1\">&#39;uniqe&#39;</span><span class=\"o\">:</span><span class=\"kc\">true</span><span class=\"p\">})</span> <span class=\"err\">#</span><span class=\"nx\">创建唯一索引</span>\n<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">ensureIndex</span><span class=\"p\">({</span><span class=\"s1\">&#39;name&#39;</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"s1\">&#39;age&#39;</span><span class=\"o\">:-</span><span class=\"mi\">1</span><span class=\"p\">})</span> <span class=\"err\">#</span><span class=\"nx\">创建多行索引</span>\n</pre></div>\n\n\n<p>查看所有索引</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">getIndexes</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>删除索引</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">dropIndexes</span><span class=\"p\">(</span><span class=\"s1\">&#39;索引名&#39;</span><span class=\"p\">)</span> <span class=\"err\">#</span><span class=\"nx\">索引名从db</span><span class=\"p\">.</span><span class=\"nx\">stu</span><span class=\"p\">.</span><span class=\"nx\">getIndexes</span><span class=\"p\">()</span><span class=\"nx\">中查询</span>\n</pre></div>\n\n\n<h3>安全性</h3>\n<ul>\n<li>常用系统角色如下：</li>\n<li>root：只在admin数据库中可用，超级账号，超级权限</li>\n<li>Read：允许用户读取指定数据库</li>\n<li>readWrite：允许用户读写指定数据库</li>\n</ul>\n<p>mongo登录客户端创建超级管理员用户</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">use</span> <span class=\"nx\">admin</span>\n<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">createUser</span><span class=\"p\">({</span>\n<span class=\"nx\">user</span><span class=\"o\">:</span><span class=\"s1\">&#39;admin&#39;</span><span class=\"p\">,</span>\n<span class=\"nx\">pwd</span><span class=\"o\">:</span><span class=\"s1\">&#39;admin&#39;</span><span class=\"p\">,</span>\n<span class=\"nx\">roles</span><span class=\"o\">:</span><span class=\"p\">[{</span><span class=\"nx\">role</span><span class=\"o\">:</span><span class=\"s1\">&#39;root&#39;</span><span class=\"p\">,</span><span class=\"nx\">db</span><span class=\"o\">:</span><span class=\"s1\">&#39;admin&#39;</span><span class=\"p\">}]</span>\n<span class=\"p\">})</span>\n</pre></div>\n\n\n<p>修改配置文件启动身份验证</p>\n<div class=\"codehilite\"><pre><span></span>sudo vi /etc/mongod.conf\n\nsecurity:\n  authorization: enabled <span class=\"c1\">#注意enabled前有空格</span>\n</pre></div>\n\n\n<p>重启mongd服务</p>\n<div class=\"codehilite\"><pre><span></span>sudo service mongod restart\n</pre></div>\n\n\n<p>退出后重新登录</p>\n<div class=\"codehilite\"><pre><span></span>mongo -u admin -p --authenticationDatabase admin\n</pre></div>\n\n\n<p>使用超级用户创建普通用户</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">use</span> <span class=\"nx\">runoob</span> <span class=\"err\">#</span><span class=\"nx\">要给哪个数据库创建用户就use哪个</span>\n<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">createUser</span><span class=\"p\">({</span>\n<span class=\"nx\">user</span><span class=\"o\">:</span><span class=\"s1\">&#39;runoob&#39;</span><span class=\"p\">,</span>\n<span class=\"nx\">pwd</span><span class=\"o\">:</span><span class=\"s1\">&#39;runoob&#39;</span><span class=\"p\">,</span>\n<span class=\"nx\">roles</span><span class=\"o\">:</span><span class=\"p\">[{</span><span class=\"nx\">role</span><span class=\"o\">:</span><span class=\"s1\">&#39;readWrite&#39;</span><span class=\"p\">,</span><span class=\"nx\">db</span><span class=\"o\">:</span><span class=\"s1\">&#39;runoob&#39;</span><span class=\"p\">}]</span>\n<span class=\"p\">})</span>\n</pre></div>\n\n\n<p>退出后使用普通用户登录</p>\n<div class=\"codehilite\"><pre><span></span>mogo -u runoob -p --authenticationDatabase runoob\n</pre></div>\n\n\n<p>修改用户：可以修改pwd、roles属性(只能用admin用户修改)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">updateUser</span><span class=\"p\">(</span><span class=\"s1\">&#39;runoob&#39;</span><span class=\"p\">,{</span><span class=\"nx\">pwd</span><span class=\"o\">:</span><span class=\"s1\">&#39;123&#39;</span><span class=\"p\">})</span>\n</pre></div>\n\n\n<h3>副本集</h3>\n<p>创建数据存储路径</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nb\">cd</span> ~/Desktop\nmkdir t1\nmkdir t2\n</pre></div>\n\n\n<p>启动主从服务</p>\n<div class=\"codehilite\"><pre><span></span>mongod --bind_ip <span class=\"m\">192</span>.168.100.128 --port <span class=\"m\">27017</span> --dbpath ~/Desktop/t1 --replSet rs0\nmongod --bind_ip <span class=\"m\">192</span>.168.100.128 --port <span class=\"m\">27018</span> --dbpath ~/Desktop/t2 --replSet rs0\n</pre></div>\n\n\n<p>也可以通过配置文件修改启动服务vim /etc/mongod.conf</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#主服务配置</span>\n<span class=\"nv\">port</span><span class=\"o\">=</span><span class=\"m\">27018</span> <span class=\"c1\">#指定端口</span>\n<span class=\"nv\">fork</span><span class=\"o\">=</span><span class=\"nb\">true</span> <span class=\"c1\">#后台运行</span>\n<span class=\"nv\">dbpath</span><span class=\"o\">=</span>/home/map/mongodb/mongo <span class=\"c1\">#规定数据库的位置</span>\n<span class=\"nv\">logpath</span><span class=\"o\">=</span>/home/map/mongodb/mlog/mongodb.log <span class=\"c1\">#规定数据库的日志文件</span>\n<span class=\"nv\">master</span><span class=\"o\">=</span><span class=\"nb\">true</span> <span class=\"c1\">#设置主</span>\n<span class=\"c1\"># bind_ip=127.0.0.1,192.168.0.4 #允许的地址 为了安全</span>\n<span class=\"nv\">nohttpinterface</span><span class=\"o\">=</span><span class=\"nb\">true</span> <span class=\"c1\">#禁止http访问</span>\n<span class=\"c1\">#从服务配置</span>\n<span class=\"nv\">port</span><span class=\"o\">=</span><span class=\"m\">27018</span> <span class=\"c1\">#指定端口</span>\n<span class=\"nv\">fork</span><span class=\"o\">=</span><span class=\"nb\">true</span> <span class=\"c1\">#后台运行</span>\n<span class=\"nv\">dbpath</span><span class=\"o\">=</span>/home/map/mongodb/mongo <span class=\"c1\">#规定数据库的位置</span>\n<span class=\"nv\">logpath</span><span class=\"o\">=</span>/home/map/mongodb/mlog/mongodb.log <span class=\"c1\">#规定数据库的日志文件</span>\n<span class=\"nv\">slave</span><span class=\"o\">=</span><span class=\"nb\">true</span> <span class=\"c1\">#声明从</span>\n<span class=\"nv\">source</span><span class=\"o\">=</span><span class=\"m\">192</span>.168.0.4:27018 <span class=\"c1\">#规定从属于哪个ip  注意：ip是主服务器的  最好用内网ip</span>\n<span class=\"c1\"># bind_ip=127.0.0.1,192.168.0.4 #允许的地址 为了安全</span>\n<span class=\"nv\">nohttpinterface</span><span class=\"o\">=</span><span class=\"nb\">true</span> <span class=\"c1\">#禁止http访问</span>\n$ sudo mongod -f  ./mongod.conf <span class=\"c1\">#分别启动主从服务器</span>\n</pre></div>\n\n\n<p>连接主服务</p>\n<div class=\"codehilite\"><pre><span></span>mongo --host <span class=\"m\">192</span>.168.196.128 --port <span class=\"m\">27017</span>\n</pre></div>\n\n\n<p>主服务初始化并查看状态</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">rs</span><span class=\"p\">.</span><span class=\"nx\">initiate</span><span class=\"p\">()</span>\n<span class=\"nx\">rs</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>主服务添加从服务集</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">rs</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"s1\">&#39;192.168.196.128:27018&#39;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>启动从服务</p>\n<div class=\"codehilite\"><pre><span></span>mongo --host <span class=\"m\">192</span>.168.196.128 --port <span class=\"m\">27018</span>\n</pre></div>\n\n\n<p>向主服务器中插入数据</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">use</span> <span class=\"nx\">test1</span>\n<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">&lt;</span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span><span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">t1</span><span class=\"p\">.</span><span class=\"nx\">insert</span><span class=\"p\">({</span><span class=\"nx\">_id</span><span class=\"o\">:</span><span class=\"nx\">i</span><span class=\"p\">})}</span>\n<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">t1</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>在从服务器中插查询</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">rs</span><span class=\"p\">.</span><span class=\"nx\">slaveOk</span><span class=\"p\">()</span>\n<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">t1</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>删除从服务</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">rs</span><span class=\"p\">.</span><span class=\"nx\">remove</span><span class=\"p\">(</span><span class=\"s1\">&#39;192.168.196.128:27018&#39;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<h3>备份与恢复</h3>\n<p>备份</p>\n<div class=\"codehilite\"><pre><span></span>sudo mkdir test1bak\nsudo mongodump -h <span class=\"m\">192</span>.168.196.128:27017 -d test1 -o ~/Desktop/test1bak\n<span class=\"c1\">#不需要安全认证</span>\nsudo mongodump -u runoob -p runoob --authenticationDatabase runoob -h <span class=\"m\">192</span>.168.100.128:27017 -d runoob -o ~/Desktop/back <span class=\"c1\">#需要安全认证</span>\n</pre></div>\n\n\n<p>恢复</p>\n<div class=\"codehilite\"><pre><span></span>sudo mongorestore -h <span class=\"m\">192</span>.168.100.128:27107 -d runoob1 -o ~/Desktop/back <span class=\"c1\">#不需要安全认证</span>\nsudo mongorestore -u admin -p admin --authenticationDatabase admin -h <span class=\"m\">192</span>.168.100.128:27017 -d runoob1 -o ~/Desktop/back <span class=\"c1\">#需要安全认证</span>\n</pre></div>',1,0,1),(10,'Redis基础','FangHao','2017-04-30 10:44:03',0,'###redis安装\n\n```bash\nsudo apt-get install redis-server\n```\n####redis基本配置文件\n\n```bash\n/lib/systemd/system/redis-server.service\n/etc/redis/redis.conf   --主要的配置文件，包含ip/端口/数据文件地址/日志地址/守护进程等\n```\n\n####基本配置\n\n在源文件/usr/local/redis目录下，文件redis.conf为配置文件\n绑定地址：如果需要远程访问，可将此行注释\n\n```bash\nbind 127.0.0.1\n```\n端口，默认为6379\n\n```bash\nport 6379\n```\n是否以守护进程运行\n如果以守护进程运行，则不会在命令行阻塞，类似于服务\n如果以非守护进程运行，则当前终端被阻塞，无法使用\n推荐改为yes，以守护进程运行\n\n````bash\ndaemonize no|yes\n````\n数据文件\n\n```bash\ndbfilename dump.rdb\n```\n数据文件存储路径\ndir的默认值为./，表示当前目录\n推荐改为：dir /var/lib/redis\n使用配置文件方式启动\n\n直接运行redis-server会直接运行，阻塞当前终端\n一般配置文件都放在/etc/目录下\n\n```bash\nsudo cp /usr/local/redis/redis.conf /etc/redis/\n```\n推荐指定配置文件启动\n\n```bash\nsudo redis-server /etc/redis/redis.conf\n```\n停止redis服务\n\n```bash\nps ajx|grep redis\nsudo kill -9 redis的进程id\n```\n\n###数据操作\n\n- redis是key-value的数据，所以每个数据都是一个键值对\n- 值的类型分为五种：\n\n * 字符串string\n * 哈希hash\n * 列表list\n * 集合set\n * 有序集合zset\n\n全部命令参照 [redis中文官网](http://redis.cn/)\n####String基本命令\n设置键值\n\n```sql\nset key value\n```\n设置键值及过期时间，以秒为单位\n\n```sql\nSETEX key seconds value\n```\n设置多个键值\n\n```sql\nMSET key value [key value ...]\n```\n\n根据键获取值，如果不存在此键则返回(nil)\n\n```sql\nGET key\n```\n根据多个键获取多个值\n\n```sql\nMGET key [key ...]\n```\n\n####hash基本命令\n\n- hash用于存储对象，对象的格式为键值对\n\n设置单个属性\n\n```sql\nHSET key field value\n```\n设置多个属性\n\n```sql\nHMSET key field value [field value ...]\n```\n\n获取一个属性的值\n\n```sql\nHGET key field\n```\n获取多个属性的值\n\n```sql\nHMGET key field [field ...]\n```\n获取所有属性和值\n\n```sql\nHGETALL key\n```\n获取所有的属性\n\n```sql\nHKEYS key\n```\n返回包含属性的个数\n\n```sql\nHLEN key\n```\n获取所有值\n\n```sql\nHVALS key\n```\n删除属性及值\n\n```sql\nHDEL key field [field ...]\n```\n\n####list基本命令\n在头部插入数据\n\n```sql\nLPUSH key value [value ...]\n```\n在尾部插入数据\n\n```sql\nRPUSH key value [value ...]\n```\n在一个元素的前|后插入新元素\n\n```sql\nLINSERT key BEFORE|AFTER pivot value\n```\n\n移除并且返回 key 对应的 list 的第一个元素\n\n```sql\nLPOP key\n```\n移除并返回存于 key 的 list 的最后一个元素\n\n```sql\nRPOP key\n```\n\n返回list列表范围内的元素\n\n```sql\nLRANGE key start stop\n```\n\n裁剪列表，改为原集合的一个子集\n- start 和 end 偏移量都是基于0的下标\n- 偏移量也可以是负数，表示偏移量是从list尾部开始计数，如-1表示列表的最后一个元素\n\n```sql\nLTRIM key start stop\n```\n\n####set基本命令\nset是无序集合，唯一不重复\n\n添加元素\n\n```sql\nSADD key member [member ...]\n```\n\n获取所有元素\n\n```sql\nsmembers key\n```\n\n返回集合元素个数\n\n```sql\nscard key\n```\n\n求多个集合的交集\n\n```sql\nSINTER key [key ...]\n\n```\n求某集合与其它集合的差集\n\n```sql\nSDIFF key [key ...]\n```\n求多个集合的合集\n\n```sql\nSUNION key [key ...]\n```\n判断元素是否在集合中\n\n```sql\nSISMEMBER key member\n```\n\n####zset基本命令\nsorted sort有序集合，依靠用户自定义score来实现排序\n\n添加\n\n```sql\nZADD key score member [score member ...]\n```\n\n###发布订阅\n\n订阅\n\n```sql\nSUBSCRIBE 频道名称 [频道名称 ...]\n```\n取消订阅\n\n```sql\n--如果不写参数，表示取消所有订阅\nUNSUBSCRIBE 频道名称 [频道名称 ...]\n```\n发布\n\n```sql\nPUBLISH 频道 消息\n```\n\n###主从配置\n\n主服务器\n\n```bash\nvim /etc/redis/redis.conf\nbind 192.168.1.10\n```\n\n从服务器\n\n```bash\nvim /etc/redis/redis.conf\nbind 192.168.1.11\nslaveof 192.168.1.10:6379\n```\n主从服务器分别重启服务然后\n\n```bash\nredis-cli -h 192.168.1.10\nredis-cli -h 192.168.1.11\n```','<h3>redis安装</h3>\n<div class=\"codehilite\"><pre><span></span>sudo apt-get install redis-server\n</pre></div>\n\n\n<h4>redis基本配置文件</h4>\n<div class=\"codehilite\"><pre><span></span>/lib/systemd/system/redis-server.service\n/etc/redis/redis.conf   --主要的配置文件，包含ip/端口/数据文件地址/日志地址/守护进程等\n</pre></div>\n\n\n<h4>基本配置</h4>\n<p>在源文件/usr/local/redis目录下，文件redis.conf为配置文件\n绑定地址：如果需要远程访问，可将此行注释</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nb\">bind</span> <span class=\"m\">127</span>.0.0.1\n</pre></div>\n\n\n<p>端口，默认为6379</p>\n<div class=\"codehilite\"><pre><span></span>port <span class=\"m\">6379</span>\n</pre></div>\n\n\n<p>是否以守护进程运行\n如果以守护进程运行，则不会在命令行阻塞，类似于服务\n如果以非守护进程运行，则当前终端被阻塞，无法使用\n推荐改为yes，以守护进程运行</p>\n<div class=\"codehilite\"><pre><span></span>daemonize no<span class=\"p\">|</span>yes\n</pre></div>\n\n\n<p>数据文件</p>\n<div class=\"codehilite\"><pre><span></span>dbfilename dump.rdb\n</pre></div>\n\n\n<p>数据文件存储路径\ndir的默认值为./，表示当前目录\n推荐改为：dir /var/lib/redis\n使用配置文件方式启动</p>\n<p>直接运行redis-server会直接运行，阻塞当前终端\n一般配置文件都放在/etc/目录下</p>\n<div class=\"codehilite\"><pre><span></span>sudo cp /usr/local/redis/redis.conf /etc/redis/\n</pre></div>\n\n\n<p>推荐指定配置文件启动</p>\n<div class=\"codehilite\"><pre><span></span>sudo redis-server /etc/redis/redis.conf\n</pre></div>\n\n\n<p>停止redis服务</p>\n<div class=\"codehilite\"><pre><span></span>ps ajx<span class=\"p\">|</span>grep redis\nsudo <span class=\"nb\">kill</span> -9 redis的进程id\n</pre></div>\n\n\n<h3>数据操作</h3>\n<ul>\n<li>redis是key-value的数据，所以每个数据都是一个键值对</li>\n<li>\n<p>值的类型分为五种：</p>\n</li>\n<li>\n<p>字符串string</p>\n</li>\n<li>哈希hash</li>\n<li>列表list</li>\n<li>集合set</li>\n<li>有序集合zset</li>\n</ul>\n<p>全部命令参照 <a href=\"http://redis.cn/\">redis中文官网</a></p>\n<h4>String基本命令</h4>\n<p>设置键值</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">set</span> <span class=\"k\">key</span> <span class=\"n\">value</span>\n</pre></div>\n\n\n<p>设置键值及过期时间，以秒为单位</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">SETEX</span> <span class=\"k\">key</span> <span class=\"n\">seconds</span> <span class=\"n\">value</span>\n</pre></div>\n\n\n<p>设置多个键值</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">MSET</span> <span class=\"k\">key</span> <span class=\"n\">value</span> <span class=\"p\">[</span><span class=\"k\">key</span> <span class=\"n\">value</span> <span class=\"p\">...]</span>\n</pre></div>\n\n\n<p>根据键获取值，如果不存在此键则返回(nil)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">GET</span> <span class=\"k\">key</span>\n</pre></div>\n\n\n<p>根据多个键获取多个值</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">MGET</span> <span class=\"k\">key</span> <span class=\"p\">[</span><span class=\"k\">key</span> <span class=\"p\">...]</span>\n</pre></div>\n\n\n<h4>hash基本命令</h4>\n<ul>\n<li>hash用于存储对象，对象的格式为键值对</li>\n</ul>\n<p>设置单个属性</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">HSET</span> <span class=\"k\">key</span> <span class=\"n\">field</span> <span class=\"n\">value</span>\n</pre></div>\n\n\n<p>设置多个属性</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">HMSET</span> <span class=\"k\">key</span> <span class=\"n\">field</span> <span class=\"n\">value</span> <span class=\"p\">[</span><span class=\"n\">field</span> <span class=\"n\">value</span> <span class=\"p\">...]</span>\n</pre></div>\n\n\n<p>获取一个属性的值</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">HGET</span> <span class=\"k\">key</span> <span class=\"n\">field</span>\n</pre></div>\n\n\n<p>获取多个属性的值</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">HMGET</span> <span class=\"k\">key</span> <span class=\"n\">field</span> <span class=\"p\">[</span><span class=\"n\">field</span> <span class=\"p\">...]</span>\n</pre></div>\n\n\n<p>获取所有属性和值</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">HGETALL</span> <span class=\"k\">key</span>\n</pre></div>\n\n\n<p>获取所有的属性</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">HKEYS</span> <span class=\"k\">key</span>\n</pre></div>\n\n\n<p>返回包含属性的个数</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">HLEN</span> <span class=\"k\">key</span>\n</pre></div>\n\n\n<p>获取所有值</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">HVALS</span> <span class=\"k\">key</span>\n</pre></div>\n\n\n<p>删除属性及值</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">HDEL</span> <span class=\"k\">key</span> <span class=\"n\">field</span> <span class=\"p\">[</span><span class=\"n\">field</span> <span class=\"p\">...]</span>\n</pre></div>\n\n\n<h4>list基本命令</h4>\n<p>在头部插入数据</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">LPUSH</span> <span class=\"k\">key</span> <span class=\"n\">value</span> <span class=\"p\">[</span><span class=\"n\">value</span> <span class=\"p\">...]</span>\n</pre></div>\n\n\n<p>在尾部插入数据</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">RPUSH</span> <span class=\"k\">key</span> <span class=\"n\">value</span> <span class=\"p\">[</span><span class=\"n\">value</span> <span class=\"p\">...]</span>\n</pre></div>\n\n\n<p>在一个元素的前|后插入新元素</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">LINSERT</span> <span class=\"k\">key</span> <span class=\"k\">BEFORE</span><span class=\"o\">|</span><span class=\"k\">AFTER</span> <span class=\"n\">pivot</span> <span class=\"n\">value</span>\n</pre></div>\n\n\n<p>移除并且返回 key 对应的 list 的第一个元素</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">LPOP</span> <span class=\"k\">key</span>\n</pre></div>\n\n\n<p>移除并返回存于 key 的 list 的最后一个元素</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">RPOP</span> <span class=\"k\">key</span>\n</pre></div>\n\n\n<p>返回list列表范围内的元素</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">LRANGE</span> <span class=\"k\">key</span> <span class=\"k\">start</span> <span class=\"n\">stop</span>\n</pre></div>\n\n\n<p>裁剪列表，改为原集合的一个子集\n- start 和 end 偏移量都是基于0的下标\n- 偏移量也可以是负数，表示偏移量是从list尾部开始计数，如-1表示列表的最后一个元素</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">LTRIM</span> <span class=\"k\">key</span> <span class=\"k\">start</span> <span class=\"n\">stop</span>\n</pre></div>\n\n\n<h4>set基本命令</h4>\n<p>set是无序集合，唯一不重复</p>\n<p>添加元素</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">SADD</span> <span class=\"k\">key</span> <span class=\"n\">member</span> <span class=\"p\">[</span><span class=\"n\">member</span> <span class=\"p\">...]</span>\n</pre></div>\n\n\n<p>获取所有元素</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">smembers</span> <span class=\"k\">key</span>\n</pre></div>\n\n\n<p>返回集合元素个数</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">scard</span> <span class=\"k\">key</span>\n</pre></div>\n\n\n<p>求多个集合的交集</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">SINTER</span> <span class=\"k\">key</span> <span class=\"p\">[</span><span class=\"k\">key</span> <span class=\"p\">...]</span>\n</pre></div>\n\n\n<p>求某集合与其它集合的差集</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">SDIFF</span> <span class=\"k\">key</span> <span class=\"p\">[</span><span class=\"k\">key</span> <span class=\"p\">...]</span>\n</pre></div>\n\n\n<p>求多个集合的合集</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">SUNION</span> <span class=\"k\">key</span> <span class=\"p\">[</span><span class=\"k\">key</span> <span class=\"p\">...]</span>\n</pre></div>\n\n\n<p>判断元素是否在集合中</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">SISMEMBER</span> <span class=\"k\">key</span> <span class=\"n\">member</span>\n</pre></div>\n\n\n<h4>zset基本命令</h4>\n<p>sorted sort有序集合，依靠用户自定义score来实现排序</p>\n<p>添加</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">ZADD</span> <span class=\"k\">key</span> <span class=\"n\">score</span> <span class=\"n\">member</span> <span class=\"p\">[</span><span class=\"n\">score</span> <span class=\"n\">member</span> <span class=\"p\">...]</span>\n</pre></div>\n\n\n<h3>发布订阅</h3>\n<p>订阅</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">SUBSCRIBE</span> <span class=\"err\">频道名称</span> <span class=\"p\">[</span><span class=\"err\">频道名称</span> <span class=\"p\">...]</span>\n</pre></div>\n\n\n<p>取消订阅</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">--如果不写参数，表示取消所有订阅</span>\n<span class=\"n\">UNSUBSCRIBE</span> <span class=\"err\">频道名称</span> <span class=\"p\">[</span><span class=\"err\">频道名称</span> <span class=\"p\">...]</span>\n</pre></div>\n\n\n<p>发布</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">PUBLISH</span> <span class=\"err\">频道</span> <span class=\"err\">消息</span>\n</pre></div>\n\n\n<h3>主从配置</h3>\n<p>主服务器</p>\n<div class=\"codehilite\"><pre><span></span>vim /etc/redis/redis.conf\n<span class=\"nb\">bind</span> <span class=\"m\">192</span>.168.1.10\n</pre></div>\n\n\n<p>从服务器</p>\n<div class=\"codehilite\"><pre><span></span>vim /etc/redis/redis.conf\n<span class=\"nb\">bind</span> <span class=\"m\">192</span>.168.1.11\nslaveof <span class=\"m\">192</span>.168.1.10:6379\n</pre></div>\n\n\n<p>主从服务器分别重启服务然后</p>\n<div class=\"codehilite\"><pre><span></span>redis-cli -h <span class=\"m\">192</span>.168.1.10\nredis-cli -h <span class=\"m\">192</span>.168.1.11\n</pre></div>',1,0,1),(11,'Git基础','FangHao','2017-04-30 10:44:37',0,'### 生成公钥\n```bash\nvim ~/.gitconfig\n[user]\n	email = fanghao9342@gmail.com\n	name = FangHao\n```\n\n```bash\nssh-keygen -t rsa -C \"fanghao9342@gmail.com\"\n```\n\n```bash\ncat id_rsa.pub\n复制cat内容，复制到GitHub>Settings>SSH and GPG keys中\n```\n\n### 克隆项目\n\n```bash\ngit clone git@github.com:SulphurFH/dailyfresh.git\n```\n\n### 创建分支\n\n```bash\ngit branch dev #dev为分支名称，默认作为成员代码合并用的\n```\n\n### push分支\n```bash\ngit push origin dev\n```\n\n### 本地分支跟踪服务器分支\n```bash\ngit branch --set-upstream-to=origin/dev dev\n```\n\n### 切换分支\n```bash\ngit checkout dev\n```\n\n### 创建并且换分支\n```bash\ngit checkout -b dev\n```\n\n### 查看当前所在分支（所有分支）\n```bash\ngit branch\n```\n\n### 删除分支\n```bash\ngit branch -d dev\n```\n\n### 代码提交至暂存区\n```bash\ngit add projectname/\n```\n\n### 暂存区代码提交至仓库区\n```bash\ngit commit -m \'#comment\'\n```\n\n### 推送分支（将此分支的本地所有提交至服务器）\n```bash\ngit push origin dev\n```\n\n### 自己代码合并至dev分支\n```bash\ngit checkout dev\ngit merge FangHao\n```\n\n### 文件添加，修改\n```bash\ngit add projectname/\n```\n\n### 文件删除\n```bash\ngit rm filename\n```\n\n### 查看日志\n```bash\ngit log\ngit reflog\n```\n\n### 文件恢复\n```bash\ngit reset HEAD\ngit checkout -- filename\n```\n\n### 文件对比\n```bash\ngit diff HEAD HEAD^ -- filename\n```\n\n### 查看暂存区状态\n```bash\ngit status\n```\n\n### 同步服务区指定分支内容\n```bash\ngit checkout dev\ngit pull\n```\n\n### 保存现场\n```bash\ngit stash\n```\n\n### 修复BUG\n```bash\n#1 保存现场\ngit stash\n#2 创建debug分支\ngit checkout -b debug\n#3 修复BUG\n#4 提交修复bug后的文件\ngit add filename\n#5 暂存区提交至仓库区\ngit commit -m \'fixbug\'\n#6 切回master并合并\ngit checkout master\ngit merge --no-ff -m \'fixbug\' debug\n#7 推送至服务器\ngit push \n#8 删除bug分支\ngit branch -d debug\n#9 切回自己分区工作\ngit checkout FangHao\n#10 恢复现场\ngit stash pop\n```\n\n### 解决合并冲突\n```bash\n#1 git merge之后发生冲突问题，首先与参与本文件代码书写的人交流确认解决方案\n#2 修改冲突文件\n#3 将冲突文件添加至暂存区\ngit add filename\n#4 将冲突文件提交至仓库区\ngit commit -m \'fix merging\'\n#5 push至服务器\ngit push origin branch_name\n```\n\n### 开发过程\n```bash\n#1 clone项目\ngit clone git@github.com:SulphurFH/dailyfresh.git\n#2 创建dev分支\ngit checkout -b dev origin/dev\n#3 获得服务器dev分支项目代码\ngit pull\n#4 创建个人开发分支\ngit checkout -b FangHao\n#5 将dev合并至个人分支\ngit merge dev\n#6 在个人分支进行开发工作\n#7 开发完成提交代码\ngit add project_name/\ngit commit -m \'comment\'\n#8 同步至dev分支\ngit checkout dev\ngit merge FangHao\n#9 如出现合并冲突问题看上面解决方案\n#10 dev合并至master分支准备发版\n```','<h3>生成公钥</h3>\n<div class=\"codehilite\"><pre><span></span>vim ~/.gitconfig\n<span class=\"o\">[</span>user<span class=\"o\">]</span>\n    <span class=\"nv\">email</span> <span class=\"o\">=</span> fanghao9342@gmail.com\n    <span class=\"nv\">name</span> <span class=\"o\">=</span> FangHao\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>ssh-keygen -t rsa -C <span class=\"s2\">&quot;fanghao9342@gmail.com&quot;</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>cat id_rsa.pub\n复制cat内容，复制到GitHub&gt;Settings&gt;SSH and GPG keys中\n</pre></div>\n\n\n<h3>克隆项目</h3>\n<div class=\"codehilite\"><pre><span></span>git clone git@github.com:SulphurFH/dailyfresh.git\n</pre></div>\n\n\n<h3>创建分支</h3>\n<div class=\"codehilite\"><pre><span></span>git branch dev <span class=\"c1\">#dev为分支名称，默认作为成员代码合并用的</span>\n</pre></div>\n\n\n<h3>push分支</h3>\n<div class=\"codehilite\"><pre><span></span>git push origin dev\n</pre></div>\n\n\n<h3>本地分支跟踪服务器分支</h3>\n<div class=\"codehilite\"><pre><span></span>git branch --set-upstream-to<span class=\"o\">=</span>origin/dev dev\n</pre></div>\n\n\n<h3>切换分支</h3>\n<div class=\"codehilite\"><pre><span></span>git checkout dev\n</pre></div>\n\n\n<h3>创建并且换分支</h3>\n<div class=\"codehilite\"><pre><span></span>git checkout -b dev\n</pre></div>\n\n\n<h3>查看当前所在分支（所有分支）</h3>\n<div class=\"codehilite\"><pre><span></span>git branch\n</pre></div>\n\n\n<h3>删除分支</h3>\n<div class=\"codehilite\"><pre><span></span>git branch -d dev\n</pre></div>\n\n\n<h3>代码提交至暂存区</h3>\n<div class=\"codehilite\"><pre><span></span>git add projectname/\n</pre></div>\n\n\n<h3>暂存区代码提交至仓库区</h3>\n<div class=\"codehilite\"><pre><span></span>git commit -m <span class=\"s1\">&#39;#comment&#39;</span>\n</pre></div>\n\n\n<h3>推送分支（将此分支的本地所有提交至服务器）</h3>\n<div class=\"codehilite\"><pre><span></span>git push origin dev\n</pre></div>\n\n\n<h3>自己代码合并至dev分支</h3>\n<div class=\"codehilite\"><pre><span></span>git checkout dev\ngit merge FangHao\n</pre></div>\n\n\n<h3>文件添加，修改</h3>\n<div class=\"codehilite\"><pre><span></span>git add projectname/\n</pre></div>\n\n\n<h3>文件删除</h3>\n<div class=\"codehilite\"><pre><span></span>git rm filename\n</pre></div>\n\n\n<h3>查看日志</h3>\n<div class=\"codehilite\"><pre><span></span>git log\ngit reflog\n</pre></div>\n\n\n<h3>文件恢复</h3>\n<div class=\"codehilite\"><pre><span></span>git reset HEAD\ngit checkout -- filename\n</pre></div>\n\n\n<h3>文件对比</h3>\n<div class=\"codehilite\"><pre><span></span>git diff HEAD HEAD^ -- filename\n</pre></div>\n\n\n<h3>查看暂存区状态</h3>\n<div class=\"codehilite\"><pre><span></span>git status\n</pre></div>\n\n\n<h3>同步服务区指定分支内容</h3>\n<div class=\"codehilite\"><pre><span></span>git checkout dev\ngit pull\n</pre></div>\n\n\n<h3>保存现场</h3>\n<div class=\"codehilite\"><pre><span></span>git stash\n</pre></div>\n\n\n<h3>修复BUG</h3>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#1 保存现场</span>\ngit stash\n<span class=\"c1\">#2 创建debug分支</span>\ngit checkout -b debug\n<span class=\"c1\">#3 修复BUG</span>\n<span class=\"c1\">#4 提交修复bug后的文件</span>\ngit add filename\n<span class=\"c1\">#5 暂存区提交至仓库区</span>\ngit commit -m <span class=\"s1\">&#39;fixbug&#39;</span>\n<span class=\"c1\">#6 切回master并合并</span>\ngit checkout master\ngit merge --no-ff -m <span class=\"s1\">&#39;fixbug&#39;</span> debug\n<span class=\"c1\">#7 推送至服务器</span>\ngit push \n<span class=\"c1\">#8 删除bug分支</span>\ngit branch -d debug\n<span class=\"c1\">#9 切回自己分区工作</span>\ngit checkout FangHao\n<span class=\"c1\">#10 恢复现场</span>\ngit stash pop\n</pre></div>\n\n\n<h3>解决合并冲突</h3>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#1 git merge之后发生冲突问题，首先与参与本文件代码书写的人交流确认解决方案</span>\n<span class=\"c1\">#2 修改冲突文件</span>\n<span class=\"c1\">#3 将冲突文件添加至暂存区</span>\ngit add filename\n<span class=\"c1\">#4 将冲突文件提交至仓库区</span>\ngit commit -m <span class=\"s1\">&#39;fix merging&#39;</span>\n<span class=\"c1\">#5 push至服务器</span>\ngit push origin branch_name\n</pre></div>\n\n\n<h3>开发过程</h3>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#1 clone项目</span>\ngit clone git@github.com:SulphurFH/dailyfresh.git\n<span class=\"c1\">#2 创建dev分支</span>\ngit checkout -b dev origin/dev\n<span class=\"c1\">#3 获得服务器dev分支项目代码</span>\ngit pull\n<span class=\"c1\">#4 创建个人开发分支</span>\ngit checkout -b FangHao\n<span class=\"c1\">#5 将dev合并至个人分支</span>\ngit merge dev\n<span class=\"c1\">#6 在个人分支进行开发工作</span>\n<span class=\"c1\">#7 开发完成提交代码</span>\ngit add project_name/\ngit commit -m <span class=\"s1\">&#39;comment&#39;</span>\n<span class=\"c1\">#8 同步至dev分支</span>\ngit checkout dev\ngit merge FangHao\n<span class=\"c1\">#9 如出现合并冲突问题看上面解决方案</span>\n<span class=\"c1\">#10 dev合并至master分支准备发版</span>\n</pre></div>',1,0,1),(12,'Python抓取网页内容乱码','FangHao','2017-04-30 10:51:10',0,'在抓取Runoob网站的时候发现用python2的urllib读取的数据会存在乱码的情况，但是别的网页没有问题，在审查html的<head>之后发现其编码的确是UTF-8无误，所以怀疑可能是由于网络发包走的是gzip，需要经过解压之类的处理，解决代码如下\n\n```python3\n#python3\nimport requests\nr=requests.get(\"http://www.runoob.com/mongodb/mongodb-tutorial.html\")\nprint(r.encoding)\nprint(r.text)\n```\n```python3\n#python2\nimport gzip\nimport StringIO\nimport urllib2\n\nur1=\'http://www.runoob.com/mongodb/mongodb-tutorial.html\'\nreponse=urllib2.urlopen(ur1)\nr=reponse.read()\ndata = StringIO.StringIO(r)\ngzipper = gzip.GzipFile(fileobj=data)\nhtml = gzipper.read()\nprint html\n```','<p>在抓取Runoob网站的时候发现用python2的urllib读取的数据会存在乱码的情况，但是别的网页没有问题，在审查html的<head>之后发现其编码的确是UTF-8无误，所以怀疑可能是由于网络发包走的是gzip，需要经过解压之类的处理，解决代码如下</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#python3</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"n\">r</span><span class=\"o\">=</span><span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;http://www.runoob.com/mongodb/mongodb-tutorial.html&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">encoding</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#python2</span>\n<span class=\"kn\">import</span> <span class=\"nn\">gzip</span>\n<span class=\"kn\">import</span> <span class=\"nn\">StringIO</span>\n<span class=\"kn\">import</span> <span class=\"nn\">urllib2</span>\n\n<span class=\"n\">ur1</span><span class=\"o\">=</span><span class=\"s1\">&#39;http://www.runoob.com/mongodb/mongodb-tutorial.html&#39;</span>\n<span class=\"n\">reponse</span><span class=\"o\">=</span><span class=\"n\">urllib2</span><span class=\"o\">.</span><span class=\"n\">urlopen</span><span class=\"p\">(</span><span class=\"n\">ur1</span><span class=\"p\">)</span>\n<span class=\"n\">r</span><span class=\"o\">=</span><span class=\"n\">reponse</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">StringIO</span><span class=\"o\">.</span><span class=\"n\">StringIO</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\n<span class=\"n\">gzipper</span> <span class=\"o\">=</span> <span class=\"n\">gzip</span><span class=\"o\">.</span><span class=\"n\">GzipFile</span><span class=\"p\">(</span><span class=\"n\">fileobj</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">gzipper</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span> <span class=\"n\">html</span>\n</pre></div>',1,0,1),(13,'Python装饰器','FangHao','2017-04-30 10:51:33',0,'##装饰器\nPython代码要符合一个```开放封闭```的原则，所谓```开放封闭```就是指的，对于之前的带么功能需要进行封闭，即不能随便的修改，但是可以进行添加新功能，这就是开放，所以有了装饰器这个东西\n几个示例代码如下：\n\n\n```python\n#coding=utf-8\n\ndef make(name=\'laowang\'):\ndef make_fun(func):\ndef make_fun_in(*args,**kwargs):\nprint(\'hello world %s!\'%name)\nfunc(*args,**kwargs)\n#直接打印出参数，但是并不是解包，所以会返回元组或者字典\n#print(args,kwargs)\n#同那个*或者**进行解包\n#print(*args,**kwargs)\nreturn make_fun_in\nreturn make_fun\n\n@make(\'xiaohua\')\ndef test(a,b,c):\nprint(\'hello test%s,%s,%s\'%(a,b,c))\n\ntest(\'shandong\',\'zibo\',\'zhangdian\')\n\n\n\"\"\"\n可以通过上述方法进行调用，也可以通过下面方法\n在这里make方法将test函数作为参数传入，整个make(\'xiaohua\')(test)会将\nmake_fun_in返回过来，make_fun_in中需要的参数，也就是往test(a,b,c)的参数\n\"\"\"\n# def test(a,b,c):\n# print(\'hello test%s,%s,%s\'%(a,b,c))\n# make(\'xiaohua\')(test)(\'shandong\',\'zibo\',\'zhangdian\')\n```\n\n\n\n```python\n#coding=utf-8\n\ndef make1(func):\ndef make_in():\nreturn \'<h1>\'+func()+\'</h1>\'\nreturn make_in\n\ndef make2(func):\ndef make_in():\nreturn \'<h2>\'+func()+\'</h2>\'\nreturn make_in\n\n\n# 会按照就近原则，先使用靠近test函数的装饰器进行装饰（make2），\n# 再使用make1进行装饰\n@make1\n@make2\ndef test():\nreturn \'hello world\'\n\nprint(test())\n```\n\n\n\n```python\n#coding=utf-8\n\nclass make_fun(object):\ndef __init__(self,func):\nself.func = func\n\ndef __call__(self):\n#print(self.func())\nreturn self.func()\n\n@make_fun\ndef test():\nreturn \'hello world\'\n\n# test()\nreuslt = test()\n# reuslt = test.__call__()\nprint(reuslt)\n\n\"\"\"\ntest = make_fun(test)\n此时等号左边test是一个对象，其中make_fun类对__call__方法做了重写，当执行test()\n的时候会调用它的__call__方法，当然也可以通过test.__call__()进行方法调用\n\"\"\"\n```\n\n\n\n```python\n#coding=utf-8\ndef make(username):\ndef make_fun(func):\ndef make_fun_in(*args,**kwargs):\nprint(username)\nprint(\'hello make_fun\')\nfor key,value in kwargs.items():\n\'\'\'\npython3运行下面print代码会展示 name = python\n但是python2运行的话会展示(\'name\',\'=\',\'python\')\n将会是一个元组\n\n\'\'\'\nprint(key,\'=\',value)\nprint(key,value)\nprint(key)\nreturn func(*args,**kwargs)\nreturn make_fun_in\nreturn make_fun\n\n# 为了展示装饰器的原理，故将下面给注释\n# @make(\'Laowang\')\n# def test(a,b,c,name = 123):\n# return \'%s,%s,%s,\'%(a,b,c)\n# result = test(1,2,3,name = \'python\')\n# print(result)\n\ndef test(a,b,c,name = 123):\nreturn \'%s,%s,%s,\'%(a,b,c)\nresult = make(\'Laowang\')(test)(1,2,3,name = \'python\')\nprint(result)\n```','<h2>装饰器</h2>\n<p>Python代码要符合一个<code>开放封闭</code>的原则，所谓<code>开放封闭</code>就是指的，对于之前的带么功能需要进行封闭，即不能随便的修改，但是可以进行添加新功能，这就是开放，所以有了装饰器这个东西\n几个示例代码如下：</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">make</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;laowang&#39;</span><span class=\"p\">):</span>\n<span class=\"k\">def</span> <span class=\"nf\">make_fun</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">):</span>\n<span class=\"k\">def</span> <span class=\"nf\">make_fun_in</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello world </span><span class=\"si\">%s</span><span class=\"s1\">!&#39;</span><span class=\"o\">%</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"n\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n<span class=\"c1\">#直接打印出参数，但是并不是解包，所以会返回元组或者字典</span>\n<span class=\"c1\">#print(args,kwargs)</span>\n<span class=\"c1\">#同那个*或者**进行解包</span>\n<span class=\"c1\">#print(*args,**kwargs)</span>\n<span class=\"k\">return</span> <span class=\"n\">make_fun_in</span>\n<span class=\"k\">return</span> <span class=\"n\">make_fun</span>\n\n<span class=\"nd\">@make</span><span class=\"p\">(</span><span class=\"s1\">&#39;xiaohua&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">):</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello test</span><span class=\"si\">%s</span><span class=\"s1\">,</span><span class=\"si\">%s</span><span class=\"s1\">,</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span><span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">))</span>\n\n<span class=\"n\">test</span><span class=\"p\">(</span><span class=\"s1\">&#39;shandong&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;zibo&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;zhangdian&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">可以通过上述方法进行调用，也可以通过下面方法</span>\n<span class=\"sd\">在这里make方法将test函数作为参数传入，整个make(&#39;xiaohua&#39;)(test)会将</span>\n<span class=\"sd\">make_fun_in返回过来，make_fun_in中需要的参数，也就是往test(a,b,c)的参数</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"c1\"># def test(a,b,c):</span>\n<span class=\"c1\"># print(&#39;hello test%s,%s,%s&#39;%(a,b,c))</span>\n<span class=\"c1\"># make(&#39;xiaohua&#39;)(test)(&#39;shandong&#39;,&#39;zibo&#39;,&#39;zhangdian&#39;)</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">make1</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">):</span>\n<span class=\"k\">def</span> <span class=\"nf\">make_in</span><span class=\"p\">():</span>\n<span class=\"k\">return</span> <span class=\"s1\">&#39;&lt;h1&gt;&#39;</span><span class=\"o\">+</span><span class=\"n\">func</span><span class=\"p\">()</span><span class=\"o\">+</span><span class=\"s1\">&#39;&lt;/h1&gt;&#39;</span>\n<span class=\"k\">return</span> <span class=\"n\">make_in</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">make2</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">):</span>\n<span class=\"k\">def</span> <span class=\"nf\">make_in</span><span class=\"p\">():</span>\n<span class=\"k\">return</span> <span class=\"s1\">&#39;&lt;h2&gt;&#39;</span><span class=\"o\">+</span><span class=\"n\">func</span><span class=\"p\">()</span><span class=\"o\">+</span><span class=\"s1\">&#39;&lt;/h2&gt;&#39;</span>\n<span class=\"k\">return</span> <span class=\"n\">make_in</span>\n\n\n<span class=\"c1\"># 会按照就近原则，先使用靠近test函数的装饰器进行装饰（make2），</span>\n<span class=\"c1\"># 再使用make1进行装饰</span>\n<span class=\"nd\">@make1</span>\n<span class=\"nd\">@make2</span>\n<span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">():</span>\n<span class=\"k\">return</span> <span class=\"s1\">&#39;hello world&#39;</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">())</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">make_fun</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"n\">func</span><span class=\"p\">):</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">func</span>\n\n<span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"c1\">#print(self.func())</span>\n<span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@make_fun</span>\n<span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">():</span>\n<span class=\"k\">return</span> <span class=\"s1\">&#39;hello world&#39;</span>\n\n<span class=\"c1\"># test()</span>\n<span class=\"n\">reuslt</span> <span class=\"o\">=</span> <span class=\"n\">test</span><span class=\"p\">()</span>\n<span class=\"c1\"># reuslt = test.__call__()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reuslt</span><span class=\"p\">)</span>\n\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">test = make_fun(test)</span>\n<span class=\"sd\">此时等号左边test是一个对象，其中make_fun类对__call__方法做了重写，当执行test()</span>\n<span class=\"sd\">的时候会调用它的__call__方法，当然也可以通过test.__call__()进行方法调用</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"k\">def</span> <span class=\"nf\">make</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">):</span>\n<span class=\"k\">def</span> <span class=\"nf\">make_fun</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">):</span>\n<span class=\"k\">def</span> <span class=\"nf\">make_fun_in</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello make_fun&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span><span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n<span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"sd\">python3运行下面print代码会展示 name = python</span>\n<span class=\"sd\">但是python2运行的话会展示(&#39;name&#39;,&#39;=&#39;,&#39;python&#39;)</span>\n<span class=\"sd\">将会是一个元组</span>\n\n<span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span><span class=\"s1\">&#39;=&#39;</span><span class=\"p\">,</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n<span class=\"k\">return</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n<span class=\"k\">return</span> <span class=\"n\">make_fun_in</span>\n<span class=\"k\">return</span> <span class=\"n\">make_fun</span>\n\n<span class=\"c1\"># 为了展示装饰器的原理，故将下面给注释</span>\n<span class=\"c1\"># @make(&#39;Laowang&#39;)</span>\n<span class=\"c1\"># def test(a,b,c,name = 123):</span>\n<span class=\"c1\"># return &#39;%s,%s,%s,&#39;%(a,b,c)</span>\n<span class=\"c1\"># result = test(1,2,3,name = &#39;python&#39;)</span>\n<span class=\"c1\"># print(result)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"mi\">123</span><span class=\"p\">):</span>\n<span class=\"k\">return</span> <span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">,</span><span class=\"si\">%s</span><span class=\"s1\">,</span><span class=\"si\">%s</span><span class=\"s1\">,&#39;</span><span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">make</span><span class=\"p\">(</span><span class=\"s1\">&#39;Laowang&#39;</span><span class=\"p\">)(</span><span class=\"n\">test</span><span class=\"p\">)(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;python&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre></div>',1,0,1),(14,'Python生成器','FangHao','2017-04-30 10:52:28',0,'##什么时候要用生成器\n例如我们在用\n```\na = [range(1000000)]\n```\n生成大数据量列表的时候，由于生成机制的问题，会一次性生成好了然后返回，所以会造成大量的内存占用，并且我们有时可能并不会完全使用其中的所有数据，而是是用一部分。所以这种情况造成了极大的浪费。因此有了生成器\n\n生成器就是将运行生成数据代码放到生成器中，当调用的时候再根据用户需求生成相应的数据。\n###（1）\n\n![](http://upload-images.jianshu.io/upload_images/4665210-d23d8b0c8f4e3af4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这是一个简单的生成器的例子，即将[]改为()即可\n\n![](http://upload-images.jianshu.io/upload_images/4665210-de7c338b7f186ee0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后我们可以根据需要在取数\n\n###（2）\n\n![](http://upload-images.jianshu.io/upload_images/4665210-773974da7d98320d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n## next()和send()\n\n![](http://upload-images.jianshu.io/upload_images/4665210-23d8d06ec0c66032.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)','<h2>什么时候要用生成器</h2>\n<p>例如我们在用</p>\n<div class=\"codehilite\"><pre><span></span>a = [range(1000000)]\n</pre></div>\n\n\n<p>生成大数据量列表的时候，由于生成机制的问题，会一次性生成好了然后返回，所以会造成大量的内存占用，并且我们有时可能并不会完全使用其中的所有数据，而是是用一部分。所以这种情况造成了极大的浪费。因此有了生成器</p>\n<p>生成器就是将运行生成数据代码放到生成器中，当调用的时候再根据用户需求生成相应的数据。</p>\n<h3>（1）</h3>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-d23d8b0c8f4e3af4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<p>这是一个简单的生成器的例子，即将[]改为()即可</p>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-de7c338b7f186ee0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<p>然后我们可以根据需要在取数</p>\n<h3>（2）</h3>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-773974da7d98320d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<h2>next()和send()</h2>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-23d8d06ec0c66032.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>',1,0,1),(15,'Python生成器','FangHao','2017-04-30 10:52:28',0,'##什么时候要用生成器\n例如我们在用\n```\na = [range(1000000)]\n```\n生成大数据量列表的时候，由于生成机制的问题，会一次性生成好了然后返回，所以会造成大量的内存占用，并且我们有时可能并不会完全使用其中的所有数据，而是是用一部分。所以这种情况造成了极大的浪费。因此有了生成器\n\n生成器就是将运行生成数据代码放到生成器中，当调用的时候再根据用户需求生成相应的数据。\n###（1）\n\n![](http://upload-images.jianshu.io/upload_images/4665210-d23d8b0c8f4e3af4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这是一个简单的生成器的例子，即将[]改为()即可\n\n![](http://upload-images.jianshu.io/upload_images/4665210-de7c338b7f186ee0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后我们可以根据需要在取数\n\n###（2）\n\n![](http://upload-images.jianshu.io/upload_images/4665210-773974da7d98320d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n## next()和send()\n\n![](http://upload-images.jianshu.io/upload_images/4665210-23d8d06ec0c66032.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)','<h2>什么时候要用生成器</h2>\n<p>例如我们在用</p>\n<div class=\"codehilite\"><pre><span></span>a = [range(1000000)]\n</pre></div>\n\n\n<p>生成大数据量列表的时候，由于生成机制的问题，会一次性生成好了然后返回，所以会造成大量的内存占用，并且我们有时可能并不会完全使用其中的所有数据，而是是用一部分。所以这种情况造成了极大的浪费。因此有了生成器</p>\n<p>生成器就是将运行生成数据代码放到生成器中，当调用的时候再根据用户需求生成相应的数据。</p>\n<h3>（1）</h3>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-d23d8b0c8f4e3af4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<p>这是一个简单的生成器的例子，即将[]改为()即可</p>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-de7c338b7f186ee0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<p>然后我们可以根据需要在取数</p>\n<h3>（2）</h3>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-773974da7d98320d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<h2>next()和send()</h2>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-23d8d06ec0c66032.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>',1,0,1),(16,'Python动态语言','FangHao','2017-04-30 10:53:01',0,'##python\n说Python是动态语言，是由于Python可以在代码运行中可以做更改，但是像C、Java之类的需要编译的语言，由于做过编译就不可以做修改了，所以是静态语言。但是像Python、PHP、Ruby之类的动态语言执行效率会不如静态语言快，毕竟中间有一层解释器。\n示例代码如下：\n\n\n```python\n#coding=utf-8\nimport types\n\nclass Person(object):\nnum = 100\npass\n\np1 = Person()\n# 给对象传递属性\np1.name = \'xiaohua\'\nprint(p1.name)\n# 给类传递属性\nPerson.pname = \'human\'\nprint(Person.pname)\nprint(p1.pname)\n\nprint(\'----------------------------\')\n\ndef test1(self):\nprint(\'--------------self-test1\')\n\ndef test2(cls):\nprint(\'--------------cls-test2\')\nprint(cls.num)\n\n@staticmethod\ndef test3():\nprint(\'--------------test3\')\n\n# 添加实例方法\np1.test1 = types.MethodType(test1,p1,Person)\n# 添加类方法\nPerson.test2 = types.MethodType(test2,Person,type)\n# 添加静态方法，这里不能使用types来创建，不然会报一个：没有参数却多传了一个参数的错误\nPerson.test3 = test3\n\np1.test1()\np1.test2()\np1.test3()\n\n#del p1.test1\ndelattr(p1,test1)\n\np1.test1()\n```\n##slots\n由于python是个动态语言，有时候人们不想让运行的代码做修改，```__slots__```就是起到了这个作用。\n\n![](http://upload-images.jianshu.io/upload_images/4665210-edaaa9b9ccfdabfc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是由于```__solts__```是个私有属性，所以如果一个子类集成了这个父类，子类是可以随意增加属性的','<h2>python</h2>\n<p>说Python是动态语言，是由于Python可以在代码运行中可以做更改，但是像C、Java之类的需要编译的语言，由于做过编译就不可以做修改了，所以是静态语言。但是像Python、PHP、Ruby之类的动态语言执行效率会不如静态语言快，毕竟中间有一层解释器。\n示例代码如下：</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">import</span> <span class=\"nn\">types</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"k\">pass</span>\n\n<span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">()</span>\n<span class=\"c1\"># 给对象传递属性</span>\n<span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;xiaohua&#39;</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"c1\"># 给类传递属性</span>\n<span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">pname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;human&#39;</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">pname</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"n\">pname</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;----------------------------&#39;</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test1</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;--------------self-test1&#39;</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test2</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;--------------cls-test2&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">num</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@staticmethod</span>\n<span class=\"k\">def</span> <span class=\"nf\">test3</span><span class=\"p\">():</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;--------------test3&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 添加实例方法</span>\n<span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"n\">test1</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">MethodType</span><span class=\"p\">(</span><span class=\"n\">test1</span><span class=\"p\">,</span><span class=\"n\">p1</span><span class=\"p\">,</span><span class=\"n\">Person</span><span class=\"p\">)</span>\n<span class=\"c1\"># 添加类方法</span>\n<span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">test2</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">MethodType</span><span class=\"p\">(</span><span class=\"n\">test2</span><span class=\"p\">,</span><span class=\"n\">Person</span><span class=\"p\">,</span><span class=\"nb\">type</span><span class=\"p\">)</span>\n<span class=\"c1\"># 添加静态方法，这里不能使用types来创建，不然会报一个：没有参数却多传了一个参数的错误</span>\n<span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">test3</span> <span class=\"o\">=</span> <span class=\"n\">test3</span>\n\n<span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"n\">test1</span><span class=\"p\">()</span>\n<span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"n\">test2</span><span class=\"p\">()</span>\n<span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"n\">test3</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#del p1.test1</span>\n<span class=\"nb\">delattr</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span><span class=\"n\">test1</span><span class=\"p\">)</span>\n\n<span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"n\">test1</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<h2>slots</h2>\n<p>由于python是个动态语言，有时候人们不想让运行的代码做修改，<code>__slots__</code>就是起到了这个作用。</p>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-edaaa9b9ccfdabfc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<p>但是由于<code>__solts__</code>是个私有属性，所以如果一个子类集成了这个父类，子类是可以随意增加属性的</p>',1,0,1),(17,'Python元类','FangHao','2017-04-30 10:53:23',0,'## 类也是对象\r\n在Python中一切都是对象，类也不例外。所以可以对类进行以下操作。\r\n1.可以当做参数传递\r\n2.可以添加属性\r\n3.可以赋给变量\r\n\r\n代码如下：\r\n\r\n\r\n```python\r\n#coding=utf-8\r\nclass Person():\r\n    pass\r\n\r\n# 可以赋值\r\nprint(Person())\r\np = Person()\r\nprint(p)\r\n\r\n# 可以当做参数传递\r\ndef printClass(patern):\r\n    print(patern)\r\n    printClass(Person())\r\n\r\n# 可以添加属性\r\n\r\nPerson.name = \'Python\'\r\nprint(Person.name)\r\n```\r\n\r\n运行结果如下：\r\n\r\n![](http://upload-images.jianshu.io/upload_images/4665210-dfa032b97bab890b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n##type\r\n\r\ntype其实就是元类，type的作用有两个，第一是查看对象的类型（也可以理解为这个对象是由什么创建创建出来的），第二是可以创建类\r\n代码如下：\r\n\r\n\r\n```python\r\n#coding=utf-8\r\nclass Person():\r\n    pass\r\n\r\nprint(type(Person))\r\nprint(type(type(Person)))\r\n```\r\n运行结果如下：\r\n\r\n![](http://upload-images.jianshu.io/upload_images/4665210-4271ded1e1d851c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n\r\n所以我们可以知道所有的类都是由type创建出来的，如果print(type(type))，最终显示的还是type（这里应该是采用了一个递归的方式）\r\n##使用type创建类\r\n代码如下：\r\n\r\n\r\n```python\r\n#coding=utf-8\r\nTest1Class = type(\'Test1\',(),{})\r\ntest1 = Test1Class()\r\nprint(test1)\r\n\r\nTest2Class = type(\'Test2\',(Test1Class,),{\'num\':100})\r\ntest2 = Test2Class()\r\nprint(test2)\r\nprint(test2.num)\r\n\r\ndef __init__(self,age):\r\nself.age = age\r\n\r\ndef instancemethod(self,name):\r\n    print(\'实例方法\')\r\n    print(name)\r\n    print(self.age)\r\n\r\n@classmethod\r\ndef classmethod(cls):\r\n    print(\'类方法\')\r\n    cls.numtest3 = 300\r\n\r\n@staticmethod\r\ndef staticmethod():\r\n    print(\'hello world\')\r\n    #print(numtest3)\r\n\r\n\r\nTest3Class = type(\'Test3\',(Test2Class,),{\'__init__\':__init__,\'instance\':instancemethod,\'class3\':classmethod,\'static\':staticmethod,\'numtest3\':200})\r\ntest3 = Test3Class(18)\r\nprint(test3)\r\nprint(test3.instance(\'xiaohua\'))\r\nprint(test3.numtest3)\r\nprint(test3.class3())\r\nprint(test3.static())\r\nprint(test3.num)\r\nprint(test3.numtest3)\r\n```\r\n运行结果如下：\r\n\r\n![](http://upload-images.jianshu.io/upload_images/4665210-57bf10df9ca59dc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n##__metaclass__\r\nclass中的变量```__metaclass__```可以来决定类是由谁来创建\r\n代码如下：\r\n\r\n\r\n```python\r\n#coding=utf-8\r\n\r\nclass UpperAttrMetaClass(type):\r\n    #__new__方法默认需要传cls参数、后面三个参数依次代表：类名，类的集成，类的属性。默认由系统传递\r\n    def __new__(cls,future_class_name,future_class_parents,future_class_attr):\r\n    # 取出future_class_attr中属性名以__开头的，并保存在attrs这个元组中\r\n    attrs = ((name,value) for name,value in future_class_attr.items() if not name.startswith(\'__\'))\r\n    # 将attrs元组再解开然后将其中name改为大写，改成字典保存到uppercase_attrs中\r\n    uppercase_attrs = dict((name.upper(),value) for name,value in attrs)\r\n\r\n    # 1.通过type来做类对象的创建\r\n    # return type(future_class_name,future_class_parents,uppercase_attrs)\r\n\r\n    # 2.通过复用type.__new__的方法来创建类对象\r\n    # return type.__new__(cls,future_class_name,future_class_parents,future_class_attr)\r\n\r\n    # 3.通过super方法创建类对象\r\n    return super(UpperAttrMetaClass,cls).__new__(cls,future_class_name,future_class_parents,future_class_attr)\r\n\r\n# python2用法，python3也能用\r\nclass Foo(object):\r\n    __metaclass__ = UpperAttrMetaClass\r\n    bar = \'bip\'\r\n\r\n# python3用法\r\n# class Foo(object,metaclass = UpperAttrMetaClass):\r\n# bar = \'bip\'\r\n\r\n# hasattr用来检测类中是否有某属性\r\nprint(hasattr(Foo,\'bar\'))\r\nprint(hasattr(Foo,\'BAR\'))\r\n```\r\n\r\n![](http://upload-images.jianshu.io/upload_images/4665210-0ae64e0e73f1375e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\nPython做了如下的操作：\r\n\r\n1. Foo中有__metaclass__这个属性吗？如果是，Python会通过__metaclass__创建一个名字为Foo的类(对象)\r\n2. 如果Python没有找到__metaclass__，它会继续在Bar（父类）中寻找__metaclass__属性，并尝试做和前面同样的操作。\r\n3. 如果Python在任何父类中都找不到__metaclass__，它就会在模块层次中去寻找__metaclass__，并尝试做同样的操作。\r\n4. 如果还是找不到__metaclass__,Python就会用内置的type来创建这个类对象。','<h2>类也是对象</h2>\n<p>在Python中一切都是对象，类也不例外。所以可以对类进行以下操作。\n1.可以当做参数传递\n2.可以添加属性\n3.可以赋给变量</p>\n<p>代码如下：</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"c1\"># 可以赋值</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"p\">())</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 可以当做参数传递</span>\n<span class=\"k\">def</span> <span class=\"nf\">printClass</span><span class=\"p\">(</span><span class=\"n\">patern</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">patern</span><span class=\"p\">)</span>\n    <span class=\"n\">printClass</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># 可以添加属性</span>\n\n<span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Python&#39;</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>运行结果如下：</p>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-dfa032b97bab890b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<h2>type</h2>\n<p>type其实就是元类，type的作用有两个，第一是查看对象的类型（也可以理解为这个对象是由什么创建创建出来的），第二是可以创建类\n代码如下：</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"p\">)))</span>\n</pre></div>\n\n\n<p>运行结果如下：</p>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-4271ded1e1d851c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<p>所以我们可以知道所有的类都是由type创建出来的，如果print(type(type))，最终显示的还是type（这里应该是采用了一个递归的方式）</p>\n<h2>使用type创建类</h2>\n<p>代码如下：</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"n\">Test1Class</span> <span class=\"o\">=</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"s1\">&#39;Test1&#39;</span><span class=\"p\">,(),{})</span>\n<span class=\"n\">test1</span> <span class=\"o\">=</span> <span class=\"n\">Test1Class</span><span class=\"p\">()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">test1</span><span class=\"p\">)</span>\n\n<span class=\"n\">Test2Class</span> <span class=\"o\">=</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"s1\">&#39;Test2&#39;</span><span class=\"p\">,(</span><span class=\"n\">Test1Class</span><span class=\"p\">,),{</span><span class=\"s1\">&#39;num&#39;</span><span class=\"p\">:</span><span class=\"mi\">100</span><span class=\"p\">})</span>\n<span class=\"n\">test2</span> <span class=\"o\">=</span> <span class=\"n\">Test2Class</span><span class=\"p\">()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">test2</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">test2</span><span class=\"o\">.</span><span class=\"n\">num</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"n\">age</span><span class=\"p\">):</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">instancemethod</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;实例方法&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">age</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@classmethod</span>\n<span class=\"k\">def</span> <span class=\"nf\">classmethod</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;类方法&#39;</span><span class=\"p\">)</span>\n    <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">numtest3</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>\n\n<span class=\"nd\">@staticmethod</span>\n<span class=\"k\">def</span> <span class=\"nf\">staticmethod</span><span class=\"p\">():</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello world&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\">#print(numtest3)</span>\n\n\n<span class=\"n\">Test3Class</span> <span class=\"o\">=</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"s1\">&#39;Test3&#39;</span><span class=\"p\">,(</span><span class=\"n\">Test2Class</span><span class=\"p\">,),{</span><span class=\"s1\">&#39;__init__&#39;</span><span class=\"p\">:</span><span class=\"fm\">__init__</span><span class=\"p\">,</span><span class=\"s1\">&#39;instance&#39;</span><span class=\"p\">:</span><span class=\"n\">instancemethod</span><span class=\"p\">,</span><span class=\"s1\">&#39;class3&#39;</span><span class=\"p\">:</span><span class=\"nb\">classmethod</span><span class=\"p\">,</span><span class=\"s1\">&#39;static&#39;</span><span class=\"p\">:</span><span class=\"nb\">staticmethod</span><span class=\"p\">,</span><span class=\"s1\">&#39;numtest3&#39;</span><span class=\"p\">:</span><span class=\"mi\">200</span><span class=\"p\">})</span>\n<span class=\"n\">test3</span> <span class=\"o\">=</span> <span class=\"n\">Test3Class</span><span class=\"p\">(</span><span class=\"mi\">18</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">test3</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">test3</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"s1\">&#39;xiaohua&#39;</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">test3</span><span class=\"o\">.</span><span class=\"n\">numtest3</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">test3</span><span class=\"o\">.</span><span class=\"n\">class3</span><span class=\"p\">())</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">test3</span><span class=\"o\">.</span><span class=\"n\">static</span><span class=\"p\">())</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">test3</span><span class=\"o\">.</span><span class=\"n\">num</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">test3</span><span class=\"o\">.</span><span class=\"n\">numtest3</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>运行结果如下：</p>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-57bf10df9ca59dc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<h2><strong>metaclass</strong></h2>\n<p>class中的变量<code>__metaclass__</code>可以来决定类是由谁来创建\n代码如下：</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UpperAttrMetaClass</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">):</span>\n    <span class=\"c1\">#__new__方法默认需要传cls参数、后面三个参数依次代表：类名，类的集成，类的属性。默认由系统传递</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span><span class=\"n\">future_class_name</span><span class=\"p\">,</span><span class=\"n\">future_class_parents</span><span class=\"p\">,</span><span class=\"n\">future_class_attr</span><span class=\"p\">):</span>\n    <span class=\"c1\"># 取出future_class_attr中属性名以__开头的，并保存在attrs这个元组中</span>\n    <span class=\"n\">attrs</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span><span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">future_class_attr</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;__&#39;</span><span class=\"p\">))</span>\n    <span class=\"c1\"># 将attrs元组再解开然后将其中name改为大写，改成字典保存到uppercase_attrs中</span>\n    <span class=\"n\">uppercase_attrs</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">((</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">(),</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span><span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">attrs</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 1.通过type来做类对象的创建</span>\n    <span class=\"c1\"># return type(future_class_name,future_class_parents,uppercase_attrs)</span>\n\n    <span class=\"c1\"># 2.通过复用type.__new__的方法来创建类对象</span>\n    <span class=\"c1\"># return type.__new__(cls,future_class_name,future_class_parents,future_class_attr)</span>\n\n    <span class=\"c1\"># 3.通过super方法创建类对象</span>\n    <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">UpperAttrMetaClass</span><span class=\"p\">,</span><span class=\"bp\">cls</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span><span class=\"n\">future_class_name</span><span class=\"p\">,</span><span class=\"n\">future_class_parents</span><span class=\"p\">,</span><span class=\"n\">future_class_attr</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># python2用法，python3也能用</span>\n<span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"vm\">__metaclass__</span> <span class=\"o\">=</span> <span class=\"n\">UpperAttrMetaClass</span>\n    <span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bip&#39;</span>\n\n<span class=\"c1\"># python3用法</span>\n<span class=\"c1\"># class Foo(object,metaclass = UpperAttrMetaClass):</span>\n<span class=\"c1\"># bar = &#39;bip&#39;</span>\n\n<span class=\"c1\"># hasattr用来检测类中是否有某属性</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">,</span><span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">,</span><span class=\"s1\">&#39;BAR&#39;</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-0ae64e0e73f1375e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<p>Python做了如下的操作：</p>\n<ol>\n<li>Foo中有__metaclass__这个属性吗？如果是，Python会通过__metaclass__创建一个名字为Foo的类(对象)</li>\n<li>如果Python没有找到__metaclass__，它会继续在Bar（父类）中寻找__metaclass__属性，并尝试做和前面同样的操作。</li>\n<li>如果Python在任何父类中都找不到__metaclass__，它就会在模块层次中去寻找__metaclass__，并尝试做同样的操作。</li>\n<li>如果还是找不到__metaclass__,Python就会用内置的type来创建这个类对象。</li>\n</ol>',1,0,1),(18,'Python-TCP服务器','FangHao','2017-04-30 10:53:48',0,'##TCP单进程服务器\n\n\n```python\n#coding=utf-8\nfrom socket import *\nimport time\n\ntcpSocket = socket(AF_INET,SOCK_STREAM)\n\n#重复使用绑定信息,不必等待2MSL时间\ntcpSocket.setsockopt(SOL_SOCKET,SO_REUSEADDR,1)\n\naddress = (\'\',7788)\ntcpSocket.bind(address)\n\ntcpSocket.listen(5)\n\nwhile True:\ntime.sleep(0.01)\nprint(\'开启等待\')\nnewData,newAddr = tcpSocket.accept()\nprint(\'%s客户端已经连接，准备处理数据\'%newAddr[0])\ntry:\nwhile True:\nrecvData = newData.recv(1024)\nif len(recvData) > 0:\nprint(recvData)\nelse:\nprint(\'%s客户端已经关闭\'%newAddr[0])\nbreak\nfinally:\nnewData.close()\n\ntcpSocket.close()\n```\n此类型服务器虽然能满足多个客户端请求，但是在同一时间内只能处理一个客户端的任务。无法做到同时处理多个客户端请求的任务。\n## TCP多进程服务器\n\n\n```python\n#coding=utf-8\nfrom socket import *\nfrom multiprocessing import Process\nimport time\n\n\ndef main():\ntcpSocket = socket(AF_INET,SOCK_STREAM)\n#重复使用绑定信息,不必等待2MSL时间\ntcpSocket.setsockopt(SOL_SOCKET,SO_REUSEADDR,1)\naddress = (\'\',7788)\ntcpSocket.bind(address)\ntcpSocket.listen(5)\ntry:\nwhile True:\ntime.sleep(0.01)\nprint(\'开启等待\')\nnewData,newAddr = tcpSocket.accept()\nprint(\'%s客户端已经连接，准备处理数据\'%newAddr[0])\n\np = Process(target = recv ,args = (newData,newAddr))\np.start()\n\nnewData.close()\nfinally:\ntcpSocket.close()\n\ndef recv(newData,newAddr):\nwhile True:\nrecvData = newData.recv(1024)\nif len(recvData) > 0:\nprint(recvData)\nelse:\nprint(\'%s客户端已经关闭\'%newAddr[0])\nbreak\nnewData.close()\n\n#tcpSocket.close()\nif __name__ == \'__main__\':\nmain()\n```\n此服务器通过创建多进程，可以解决多个客户端同时请求的问题，但是由于创建进程需要消耗大量资源，所以并不能很好的应付大用户量的请求。\n## TCP多线程服务器\n\n\n```python\n#coding=utf-8\nfrom socket import *\nfrom threading import Thread\nimport time\n\n\ndef main():\ntcpSocket = socket(AF_INET,SOCK_STREAM)\n#重复使用绑定信息,不必等待2MSL时间\ntcpSocket.setsockopt(SOL_SOCKET,SO_REUSEADDR,1)\naddress = (\'\',7788)\ntcpSocket.bind(address)\ntcpSocket.listen(5)\n\ntry:\nwhile True:\ntime.sleep(0.01)\nprint(\'开启等待\')\nnewData,newAddr = tcpSocket.accept()\nprint(\'%s客户端已经连接，准备处理数据\'%newAddr[0])\n\np = Thread(target = recv ,args = (newData,newAddr))\np.start()\nfinally:\ntcpSocket.close()\n\ndef recv(newData,newAddr):\nwhile True:\nrecvData = newData.recv(1024)\nif len(recvData) > 0:\nprint(recvData)\nelse:\nprint(\'%s客户端已经关闭\'%newAddr[0])\nbreak\nnewData.close()\n\n#tcpSocket.close()\nif __name__ == \'__main__\':\nmain()\n```\n\n此服务器与多进程服务器类似，线程在节省资源方面比线程更具优势。但是由于GIL的问题所以没法做到CPU的高效利用，CPU在同一时间段内只能执行一个线程。\n## TCP单进程非阻塞服务器\n\n\n```python\n#coding=utf-8\nfrom socket import *\nimport time\n\ng_clientinfoList = []\n\ndef main():\ntcpSocket = socket(AF_INET,SOCK_STREAM)\ntcpSocket.setsockopt(SOL_SOCKET,SO_REUSEADDR,1)\naddress = (\'\',7788)\ntcpSocket.bind(address)\ntcpSocket.listen(5)\n#设置socket为不阻塞\ntcpSocket.setblocking(False)\n\nwhile True:\ntry:\nclientInfo = tcpSocket.accept()\nexcept Exception as result:\npass\nelse:\n#设置clientInfo[0]即监听socket的第一个元素-新socket为不阻塞\nclientInfo[0].setblocking(False)\ng_clientinfoList.append(clientInfo)\nprint(\'%s连接到服务器\'%str(clientInfo[1]))\n#定义一个需要删除的socket对象的列表，来暂时存储需要删除的socket\nneedDelInfoList = []\n\nfor clientSocket,clientAddr in g_clientinfoList:\ntry:\nnewData = clientSocket.recv(1024)\nexcept Exception as result:\npass\nelse:\nif newData:\nprint(\'%s：%s\'%(str(clientAddr),newData))\nelse:\nclientSocket.close()\nneedDelInfoList.append((clientSocket,clientAddr))\nprint(\'%s已经离开服务器\'%str(clientAddr))\n#避免在上面for循环中删除连续的socket的误删的情况\nfor needDelInfo in needDelInfoList:\ng_clientinfoList.remove(needDelInfo)\n\nif __name__ == \'__main__\':\nmain()\n```\n此服务器中通过设置socket的setblocking为False。为不阻塞（默认创建出来的socket是阻塞的）。当socket没有accept到，即客户端无connect请求的时候，会产生一个异常，这里通过try来避免这个异常。通过g_clientinfoList这个全局变量list，将客户端每次connect的clientInfo的socket append加进去。在下面for循环的过程中再try的方式处理异常。最终完成处理多个客户端请求的任务。\n\n## TCP单进程select服务器\n\n\n```python\n#coding=utf-8\nfrom socket import *\nimport select,sys\n\ntcpSocket = socket(AF_INET,SOCK_STREAM)\ntcpSocket.setsockopt(SOL_SOCKET,SO_REUSEADDR,1)\naddres = (\'\',7788)\ntcpSocket.bind(addres)\ntcpSocket.listen(5)\n\ninputs = [tcpSocket,sys.stdin]\nruning = True\n\nwhile True:\n\'\'\'当select遍历inputs中的对象，如果出现了可读的情况（select中参数检测的以此是可读、可写、异常）时，\n会将那些可读的对象放到readabled的List中，例如：客户端新建一个链接，那个inputs中的tcpSocket变为可读\n的对象，就会添加到readabled中。并且等待到资源可用的时候，才进行唤醒\'\'\'\nreadabled,writeabled,exceptional = select.select(inputs,[],[])\n\nfor socket in readabled:\nif socket == tcpSocket:\nconn,addr = tcpSocket.accept()\n#如果是一个客户端connect创建，服务器的会有一个监听套接字可用。进而把监听套接字中的conn加入列表中，以便下次循环。\ninputs.append(conn)\nprint(\'%s已经连入系统\'%str(addr))\nelif socket == sys.stdin:\n#加入随便一个变量保证退出时不在命令行中执行\ncmd = sys.stdin.readline()\nruning = False\nbreak\nelse:\ndata = socket.recv(1024)\nif data:\nprint(data)\nelse:\ninputs.remove(socket)\nsocket.close()\nif not runing:\nbreak\n\ntcpSocket.close()\n\n```\n此服务器思路与非阻塞类似，不过非阻塞服务器通过自己创建列表来管理的方式，而select则是通过让系统来遍历查找可用的资源。系统级的select要比应用级的list遍历快很多且方便管理。\n\nselect的一个缺点在于单个进程能够监视的文件描述符的数量存在最大限制，在Linux上一般为1024，可以通过修改宏定义甚至重新编译内核的方式提升这一限制，但是这样也会造成效率的降低。\n\n一般来说这个数目和系统内存关系很大，具体数目可以cat /proc/sys/fs/file-max察看。32位机默认是1024个。64位机默认是2048.\n\n对socket进行扫描时是依次扫描的，即采用**轮询**的方法，效率较低。\n\n## TCP单进程epoll服务器\n\n\n```python\nimport socket\nimport select\n\n# 创建套接字\ns = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n\n# 设置可以重复使用绑定的信息\ns.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)\n\n# 绑定本机信息\ns.bind((\"\",7788))\n\n# 变为被动\ns.listen(10)\n\n# 创建一个epoll对象\nepoll=select.epoll()\n\n# 测试，用来打印套接字对应的文件描述符\n# print s.fileno()\n# print select.EPOLLIN|select.EPOLLET\n\n# 注册事件到epoll中\n# epoll.register(fd[, eventmask])\n# 注意，如果fd已经注册过，则会发生异常\n# 将创建的套接字添加到epoll的事件监听中\nepoll.register(s.fileno(),select.EPOLLIN|select.EPOLLET)\n\n\nconnections = {}\naddresses = {}\n\n# 循环等待客户端的到来或者对方发送数据\nwhile True:\n\n# epoll 进行 fd 扫描的地方 -- 未指定超时时间则为阻塞等待\nepoll_list=epoll.poll()\n\n# 对事件进行判断\nfor fd,events in epoll_list:\n\n# print fd\n# print events\n\n# 如果是socket创建的套接字被激活\nif fd == s.fileno():\nconn,addr=s.accept()\n\nprint(\'有新的客户端到来%s\'%str(addr))\n\n# 将 conn 和 addr 信息分别保存起来\nconnections[conn.fileno()] = conn\naddresses[conn.fileno()] = addr\n\n# 向 epoll 中注册 连接 socket 的 可读 事件\nepoll.register(conn.fileno(), select.EPOLLIN | select.EPOLLET)\n\nelif events == select.EPOLLIN:\n# 从激活 fd 上接收\nrecvData = connections[fd].recv(1024)\n\nif len(recvData)>0:\nprint(\'recv:%s\'%recvData)\nelse:\n# 从 epoll 中移除该 连接 fd\nepoll.unregister(fd)\n\n# server 侧主动关闭该 连接 fd\nconnections[fd].close()\n\nprint(\"%s---offline---\"%str(addresses[fd]))\n```','<h2>TCP单进程服务器</h2>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">socket</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"n\">tcpSocket</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#重复使用绑定信息,不必等待2MSL时间</span>\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">setsockopt</span><span class=\"p\">(</span><span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span><span class=\"n\">SO_REUSEADDR</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span><span class=\"mi\">7788</span><span class=\"p\">)</span>\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"p\">)</span>\n\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;开启等待&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">newData</span><span class=\"p\">,</span><span class=\"n\">newAddr</span> <span class=\"o\">=</span> <span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">accept</span><span class=\"p\">()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">客户端已经连接，准备处理数据&#39;</span><span class=\"o\">%</span><span class=\"n\">newAddr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n<span class=\"n\">recvData</span> <span class=\"o\">=</span> <span class=\"n\">newData</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">recvData</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">recvData</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">客户端已经关闭&#39;</span><span class=\"o\">%</span><span class=\"n\">newAddr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"k\">break</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n<span class=\"n\">newData</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>此类型服务器虽然能满足多个客户端请求，但是在同一时间内只能处理一个客户端的任务。无法做到同时处理多个客户端请求的任务。</p>\n<h2>TCP多进程服务器</h2>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">socket</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">multiprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">Process</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n<span class=\"n\">tcpSocket</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">)</span>\n<span class=\"c1\">#重复使用绑定信息,不必等待2MSL时间</span>\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">setsockopt</span><span class=\"p\">(</span><span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span><span class=\"n\">SO_REUSEADDR</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span><span class=\"mi\">7788</span><span class=\"p\">)</span>\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"p\">)</span>\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;开启等待&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">newData</span><span class=\"p\">,</span><span class=\"n\">newAddr</span> <span class=\"o\">=</span> <span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">accept</span><span class=\"p\">()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">客户端已经连接，准备处理数据&#39;</span><span class=\"o\">%</span><span class=\"n\">newAddr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Process</span><span class=\"p\">(</span><span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">recv</span> <span class=\"p\">,</span><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">newData</span><span class=\"p\">,</span><span class=\"n\">newAddr</span><span class=\"p\">))</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"n\">newData</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">recv</span><span class=\"p\">(</span><span class=\"n\">newData</span><span class=\"p\">,</span><span class=\"n\">newAddr</span><span class=\"p\">):</span>\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n<span class=\"n\">recvData</span> <span class=\"o\">=</span> <span class=\"n\">newData</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">recvData</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">recvData</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">客户端已经关闭&#39;</span><span class=\"o\">%</span><span class=\"n\">newAddr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"k\">break</span>\n<span class=\"n\">newData</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#tcpSocket.close()</span>\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n<span class=\"n\">main</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>此服务器通过创建多进程，可以解决多个客户端同时请求的问题，但是由于创建进程需要消耗大量资源，所以并不能很好的应付大用户量的请求。</p>\n<h2>TCP多线程服务器</h2>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">socket</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">threading</span> <span class=\"kn\">import</span> <span class=\"n\">Thread</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n<span class=\"n\">tcpSocket</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">)</span>\n<span class=\"c1\">#重复使用绑定信息,不必等待2MSL时间</span>\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">setsockopt</span><span class=\"p\">(</span><span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span><span class=\"n\">SO_REUSEADDR</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span><span class=\"mi\">7788</span><span class=\"p\">)</span>\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"p\">)</span>\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;开启等待&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">newData</span><span class=\"p\">,</span><span class=\"n\">newAddr</span> <span class=\"o\">=</span> <span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">accept</span><span class=\"p\">()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">客户端已经连接，准备处理数据&#39;</span><span class=\"o\">%</span><span class=\"n\">newAddr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">recv</span> <span class=\"p\">,</span><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">newData</span><span class=\"p\">,</span><span class=\"n\">newAddr</span><span class=\"p\">))</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">recv</span><span class=\"p\">(</span><span class=\"n\">newData</span><span class=\"p\">,</span><span class=\"n\">newAddr</span><span class=\"p\">):</span>\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n<span class=\"n\">recvData</span> <span class=\"o\">=</span> <span class=\"n\">newData</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">recvData</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">recvData</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">客户端已经关闭&#39;</span><span class=\"o\">%</span><span class=\"n\">newAddr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"k\">break</span>\n<span class=\"n\">newData</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#tcpSocket.close()</span>\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n<span class=\"n\">main</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>此服务器与多进程服务器类似，线程在节省资源方面比线程更具优势。但是由于GIL的问题所以没法做到CPU的高效利用，CPU在同一时间段内只能执行一个线程。</p>\n<h2>TCP单进程非阻塞服务器</h2>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">socket</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"n\">g_clientinfoList</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n<span class=\"n\">tcpSocket</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">)</span>\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">setsockopt</span><span class=\"p\">(</span><span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span><span class=\"n\">SO_REUSEADDR</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span><span class=\"mi\">7788</span><span class=\"p\">)</span>\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"p\">)</span>\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"c1\">#设置socket为不阻塞</span>\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">setblocking</span><span class=\"p\">(</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"n\">clientInfo</span> <span class=\"o\">=</span> <span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">accept</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n<span class=\"k\">pass</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"c1\">#设置clientInfo[0]即监听socket的第一个元素-新socket为不阻塞</span>\n<span class=\"n\">clientInfo</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">setblocking</span><span class=\"p\">(</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n<span class=\"n\">g_clientinfoList</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">clientInfo</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">连接到服务器&#39;</span><span class=\"o\">%</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">clientInfo</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n<span class=\"c1\">#定义一个需要删除的socket对象的列表，来暂时存储需要删除的socket</span>\n<span class=\"n\">needDelInfoList</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">clientSocket</span><span class=\"p\">,</span><span class=\"n\">clientAddr</span> <span class=\"ow\">in</span> <span class=\"n\">g_clientinfoList</span><span class=\"p\">:</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"n\">newData</span> <span class=\"o\">=</span> <span class=\"n\">clientSocket</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n<span class=\"k\">pass</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"k\">if</span> <span class=\"n\">newData</span><span class=\"p\">:</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">：</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span><span class=\"o\">%</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">clientAddr</span><span class=\"p\">),</span><span class=\"n\">newData</span><span class=\"p\">))</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"n\">clientSocket</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"n\">needDelInfoList</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">clientSocket</span><span class=\"p\">,</span><span class=\"n\">clientAddr</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">已经离开服务器&#39;</span><span class=\"o\">%</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">clientAddr</span><span class=\"p\">))</span>\n<span class=\"c1\">#避免在上面for循环中删除连续的socket的误删的情况</span>\n<span class=\"k\">for</span> <span class=\"n\">needDelInfo</span> <span class=\"ow\">in</span> <span class=\"n\">needDelInfoList</span><span class=\"p\">:</span>\n<span class=\"n\">g_clientinfoList</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">needDelInfo</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n<span class=\"n\">main</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>此服务器中通过设置socket的setblocking为False。为不阻塞（默认创建出来的socket是阻塞的）。当socket没有accept到，即客户端无connect请求的时候，会产生一个异常，这里通过try来避免这个异常。通过g_clientinfoList这个全局变量list，将客户端每次connect的clientInfo的socket append加进去。在下面for循环的过程中再try的方式处理异常。最终完成处理多个客户端请求的任务。</p>\n<h2>TCP单进程select服务器</h2>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">socket</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">select</span><span class=\"o\">,</span><span class=\"nn\">sys</span>\n\n<span class=\"n\">tcpSocket</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">)</span>\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">setsockopt</span><span class=\"p\">(</span><span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span><span class=\"n\">SO_REUSEADDR</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">addres</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span><span class=\"mi\">7788</span><span class=\"p\">)</span>\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">addres</span><span class=\"p\">)</span>\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"n\">inputs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">tcpSocket</span><span class=\"p\">,</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdin</span><span class=\"p\">]</span>\n<span class=\"n\">runing</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n<span class=\"sd\">&#39;&#39;&#39;当select遍历inputs中的对象，如果出现了可读的情况（select中参数检测的以此是可读、可写、异常）时，</span>\n<span class=\"sd\">会将那些可读的对象放到readabled的List中，例如：客户端新建一个链接，那个inputs中的tcpSocket变为可读</span>\n<span class=\"sd\">的对象，就会添加到readabled中。并且等待到资源可用的时候，才进行唤醒&#39;&#39;&#39;</span>\n<span class=\"n\">readabled</span><span class=\"p\">,</span><span class=\"n\">writeabled</span><span class=\"p\">,</span><span class=\"n\">exceptional</span> <span class=\"o\">=</span> <span class=\"n\">select</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"p\">,[],[])</span>\n\n<span class=\"k\">for</span> <span class=\"n\">socket</span> <span class=\"ow\">in</span> <span class=\"n\">readabled</span><span class=\"p\">:</span>\n<span class=\"k\">if</span> <span class=\"n\">socket</span> <span class=\"o\">==</span> <span class=\"n\">tcpSocket</span><span class=\"p\">:</span>\n<span class=\"n\">conn</span><span class=\"p\">,</span><span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">accept</span><span class=\"p\">()</span>\n<span class=\"c1\">#如果是一个客户端connect创建，服务器的会有一个监听套接字可用。进而把监听套接字中的conn加入列表中，以便下次循环。</span>\n<span class=\"n\">inputs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">已经连入系统&#39;</span><span class=\"o\">%</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"p\">))</span>\n<span class=\"k\">elif</span> <span class=\"n\">socket</span> <span class=\"o\">==</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdin</span><span class=\"p\">:</span>\n<span class=\"c1\">#加入随便一个变量保证退出时不在命令行中执行</span>\n<span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdin</span><span class=\"o\">.</span><span class=\"n\">readline</span><span class=\"p\">()</span>\n<span class=\"n\">runing</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n<span class=\"k\">break</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"n\">inputs</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">socket</span><span class=\"p\">)</span>\n<span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">runing</span><span class=\"p\">:</span>\n<span class=\"k\">break</span>\n\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>此服务器思路与非阻塞类似，不过非阻塞服务器通过自己创建列表来管理的方式，而select则是通过让系统来遍历查找可用的资源。系统级的select要比应用级的list遍历快很多且方便管理。</p>\n<p>select的一个缺点在于单个进程能够监视的文件描述符的数量存在最大限制，在Linux上一般为1024，可以通过修改宏定义甚至重新编译内核的方式提升这一限制，但是这样也会造成效率的降低。</p>\n<p>一般来说这个数目和系统内存关系很大，具体数目可以cat /proc/sys/fs/file-max察看。32位机默认是1024个。64位机默认是2048.</p>\n<p>对socket进行扫描时是依次扫描的，即采用<strong>轮询</strong>的方法，效率较低。</p>\n<h2>TCP单进程epoll服务器</h2>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">socket</span>\n<span class=\"kn\">import</span> <span class=\"nn\">select</span>\n\n<span class=\"c1\"># 创建套接字</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 设置可以重复使用绑定的信息</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">setsockopt</span><span class=\"p\">(</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">SO_REUSEADDR</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 绑定本机信息</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">((</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span><span class=\"mi\">7788</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># 变为被动</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 创建一个epoll对象</span>\n<span class=\"n\">epoll</span><span class=\"o\">=</span><span class=\"n\">select</span><span class=\"o\">.</span><span class=\"n\">epoll</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># 测试，用来打印套接字对应的文件描述符</span>\n<span class=\"c1\"># print s.fileno()</span>\n<span class=\"c1\"># print select.EPOLLIN|select.EPOLLET</span>\n\n<span class=\"c1\"># 注册事件到epoll中</span>\n<span class=\"c1\"># epoll.register(fd[, eventmask])</span>\n<span class=\"c1\"># 注意，如果fd已经注册过，则会发生异常</span>\n<span class=\"c1\"># 将创建的套接字添加到epoll的事件监听中</span>\n<span class=\"n\">epoll</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">fileno</span><span class=\"p\">(),</span><span class=\"n\">select</span><span class=\"o\">.</span><span class=\"n\">EPOLLIN</span><span class=\"o\">|</span><span class=\"n\">select</span><span class=\"o\">.</span><span class=\"n\">EPOLLET</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">connections</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"n\">addresses</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n<span class=\"c1\"># 循环等待客户端的到来或者对方发送数据</span>\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n\n<span class=\"c1\"># epoll 进行 fd 扫描的地方 -- 未指定超时时间则为阻塞等待</span>\n<span class=\"n\">epoll_list</span><span class=\"o\">=</span><span class=\"n\">epoll</span><span class=\"o\">.</span><span class=\"n\">poll</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># 对事件进行判断</span>\n<span class=\"k\">for</span> <span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"n\">events</span> <span class=\"ow\">in</span> <span class=\"n\">epoll_list</span><span class=\"p\">:</span>\n\n<span class=\"c1\"># print fd</span>\n<span class=\"c1\"># print events</span>\n\n<span class=\"c1\"># 如果是socket创建的套接字被激活</span>\n<span class=\"k\">if</span> <span class=\"n\">fd</span> <span class=\"o\">==</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">fileno</span><span class=\"p\">():</span>\n<span class=\"n\">conn</span><span class=\"p\">,</span><span class=\"n\">addr</span><span class=\"o\">=</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">accept</span><span class=\"p\">()</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;有新的客户端到来</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span><span class=\"o\">%</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># 将 conn 和 addr 信息分别保存起来</span>\n<span class=\"n\">connections</span><span class=\"p\">[</span><span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">fileno</span><span class=\"p\">()]</span> <span class=\"o\">=</span> <span class=\"n\">conn</span>\n<span class=\"n\">addresses</span><span class=\"p\">[</span><span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">fileno</span><span class=\"p\">()]</span> <span class=\"o\">=</span> <span class=\"n\">addr</span>\n\n<span class=\"c1\"># 向 epoll 中注册 连接 socket 的 可读 事件</span>\n<span class=\"n\">epoll</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">fileno</span><span class=\"p\">(),</span> <span class=\"n\">select</span><span class=\"o\">.</span><span class=\"n\">EPOLLIN</span> <span class=\"o\">|</span> <span class=\"n\">select</span><span class=\"o\">.</span><span class=\"n\">EPOLLET</span><span class=\"p\">)</span>\n\n<span class=\"k\">elif</span> <span class=\"n\">events</span> <span class=\"o\">==</span> <span class=\"n\">select</span><span class=\"o\">.</span><span class=\"n\">EPOLLIN</span><span class=\"p\">:</span>\n<span class=\"c1\"># 从激活 fd 上接收</span>\n<span class=\"n\">recvData</span> <span class=\"o\">=</span> <span class=\"n\">connections</span><span class=\"p\">[</span><span class=\"n\">fd</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">recvData</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;recv:</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span><span class=\"o\">%</span><span class=\"n\">recvData</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"c1\"># 从 epoll 中移除该 连接 fd</span>\n<span class=\"n\">epoll</span><span class=\"o\">.</span><span class=\"n\">unregister</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># server 侧主动关闭该 连接 fd</span>\n<span class=\"n\">connections</span><span class=\"p\">[</span><span class=\"n\">fd</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">---offline---&quot;</span><span class=\"o\">%</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">addresses</span><span class=\"p\">[</span><span class=\"n\">fd</span><span class=\"p\">]))</span>\n</pre></div>',1,0,1),(19,'Python多文件拷贝（进程池）','FangHao','2017-04-30 10:54:23',0,'```python\n#coding=utf-8\nfrom multiprocessing import Pool,Queue\nimport os,time\n\nfilename = os.listdir(\"./test1\")\n#创建Queue队列\nqueue = Queue(len(filename))\n\n\ndef copyFile(i):\n#实现文件复制\noldFileName = \"./test1/\" + i\nnewFileName = \"./test2/\" + i\noldfile = open(oldFileName,\'r\')\nnewfile = open(newFileName,\'w\')\nfor lineContent in oldfile.readlines():\nnewfile.write(lineContent)\n\noldfile.close()\nnewfile.close()\n\nif __name__ == \'__main__\':\n\npool = Pool(4)\n\nfor i in filename:\npool.apply_async(copyFile,(i,))\n#队列中将copy完成的文件放入队列中并打印进度\nqueue.put(i)\nprice = str(int((queue.qsize()/len(filename))*100))\nprint(\'\\r\'+\' \'*60,end=\'\')\nprint(\'\\r\'+price+\'%\'+\'=======>%s\'%i,end=\'\')\ntime.sleep(0.07)\nprint(\'\')\n\npool.close()\npool.join()\n```','<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">multiprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">Pool</span><span class=\"p\">,</span><span class=\"n\">Queue</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span><span class=\"o\">,</span><span class=\"nn\">time</span>\n\n<span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">listdir</span><span class=\"p\">(</span><span class=\"s2\">&quot;./test1&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\">#创建Queue队列</span>\n<span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">Queue</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">copyFile</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n<span class=\"c1\">#实现文件复制</span>\n<span class=\"n\">oldFileName</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;./test1/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">i</span>\n<span class=\"n\">newFileName</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;./test2/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">i</span>\n<span class=\"n\">oldfile</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">oldFileName</span><span class=\"p\">,</span><span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">newfile</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">newFileName</span><span class=\"p\">,</span><span class=\"s1\">&#39;w&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">lineContent</span> <span class=\"ow\">in</span> <span class=\"n\">oldfile</span><span class=\"o\">.</span><span class=\"n\">readlines</span><span class=\"p\">():</span>\n<span class=\"n\">newfile</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">lineContent</span><span class=\"p\">)</span>\n\n<span class=\"n\">oldfile</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"n\">newfile</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n\n<span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"n\">Pool</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">filename</span><span class=\"p\">:</span>\n<span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">apply_async</span><span class=\"p\">(</span><span class=\"n\">copyFile</span><span class=\"p\">,(</span><span class=\"n\">i</span><span class=\"p\">,))</span>\n<span class=\"c1\">#队列中将copy完成的文件放入队列中并打印进度</span>\n<span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">((</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">qsize</span><span class=\"p\">()</span><span class=\"o\">/</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">))</span><span class=\"o\">*</span><span class=\"mi\">100</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\r</span><span class=\"s1\">&#39;</span><span class=\"o\">+</span><span class=\"s1\">&#39; &#39;</span><span class=\"o\">*</span><span class=\"mi\">60</span><span class=\"p\">,</span><span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\r</span><span class=\"s1\">&#39;</span><span class=\"o\">+</span><span class=\"n\">price</span><span class=\"o\">+</span><span class=\"s1\">&#39;%&#39;</span><span class=\"o\">+</span><span class=\"s1\">&#39;=======&gt;</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span><span class=\"o\">%</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.07</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>\n</pre></div>',1,0,1),(20,'Python-TFTP项目搭建','FangHao','2017-04-30 10:54:42',0,'#TFTP#\n此项目搭建主要使用的技术是Python的sockt（UDP协议）+TFTP协议\n\n### TFTP介绍\n\nTFTP服务器默认监听69号端口\n当客户端发送“下载”请求（即读请求）时，需要向服务器的69端口发送服务器若批准此请求,则使使用一个个新的、临时的端口进口数据传输。\n为了标记数据已经发送完毕，所以规定，当客户端接收到的数据口于516（2字节操作码+2个字节的序号+512字节数据）时，就意味着服务器发送完毕了\n\nTFTP数据包的格式如下:\n\n![](http://upload-images.jianshu.io/upload_images/4665210-b89627eca8a2afec.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n操作码 | 功能\n- | -\n1 | 读请求，即下载\n2 | 写请求，即上传\n3 | 表示数据包，即DATA\n4 | 确认码，即ACK\n5 | 错误\n\n其中下载代码如下：\n\n\n```python\n#coding=utf-8\nfrom socket import *\nimport struct,sys,time\n\n#组包\nsendcontent = struct.pack(\"!H%dsb5sb\"%len(sys.argv[1]),1,sys.argv[1],0,\"octet\",0)\n\n#创建socket\ntftpSocket = socket(AF_INET, SOCK_DGRAM)\n\n#发送　下载文件请求\ntftpSocket.sendto(sendcontent,(\"192.168.17.26\", 69))\n\ndownFile = open(sys.argv[1],\'w\')\npackNum = 1\n#接收数据\nwhile True:\nrecvData = tftpSocket.recvfrom(516)\n#解析数据\nresult = struct.unpack(\"!HH\",recvData[0][:4])\n#判断服务器返回是否是错误\nif result[0] == 5:\nprint(\'没有这个文件\')\nbreak\n#处理返回数据并保存\nelif result[0] == 3:\n#判断服务器丢包情况，防止数据重复保存\nif packNum == result[1]:\ndownFile.write(recvData[0][4:])\nip = recvData[1]\nsendback = struct.pack(\"!HH\",4,result[1])\ntftpSocket.sendto(sendback,ip)\npackNum += 1\nprint \'\\r第%s部分拷贝成功\'%result[1],\nif len(recvData[0]) < 516:\nbreak\n\ndownFile.close()\n```\n\n上传代码如下：\n\n\n\n```python\n#coding=utf-8\nfrom socket import *\nimport struct,sys,time\n\nip = \"192.168.17.26\"\n\n#组包\nsendcontent = struct.pack(\"!H%dsb5sb\"%len(sys.argv[1]),2,sys.argv[1],0,\"octet\",0)\n\n#创建socket\ntftpSocket = socket(AF_INET, SOCK_DGRAM)\n\n#发送　下载文件请求\ntftpSocket.sendto(sendcontent,(ip, 69))\n\ni = 0\npackNum = 0\nwhile True:\nrecvData = tftpSocket.recvfrom(1024)\nresult = struct.unpack(\"!HH\",recvData[0][:4])\ntry:\n#读取待上传文件\nupFile = open(sys.argv[1],\'r\')\nupFile.seek(i*512,0)\nconent = upFile.read(512)\ni += 1\nupFile.close()\n#判断是否有发送失败的情况\nif packNum == result[1]:\n#发送上传数据包\nupcontent = struct.pack(\"!HH%ss\"%len(conent),3,result[1]+1,conent)\ntftpSocket.sendto(upcontent,(ip, recvData[1][1]))\npackNum += 1\nif len(conent) < 512:\nbreak\nexcept IOError:\nprint(\'本地没有这个文件\')\nbreak\n```','<h1>TFTP</h1>\n<p>此项目搭建主要使用的技术是Python的sockt（UDP协议）+TFTP协议</p>\n<h3>TFTP介绍</h3>\n<p>TFTP服务器默认监听69号端口\n当客户端发送“下载”请求（即读请求）时，需要向服务器的69端口发送服务器若批准此请求,则使使用一个个新的、临时的端口进口数据传输。\n为了标记数据已经发送完毕，所以规定，当客户端接收到的数据口于516（2字节操作码+2个字节的序号+512字节数据）时，就意味着服务器发送完毕了</p>\n<p>TFTP数据包的格式如下:</p>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-b89627eca8a2afec.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<table>\n<thead>\n<tr>\n<th>操作码</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>读请求，即下载</td>\n</tr>\n<tr>\n<td>2</td>\n<td>写请求，即上传</td>\n</tr>\n<tr>\n<td>3</td>\n<td>表示数据包，即DATA</td>\n</tr>\n<tr>\n<td>4</td>\n<td>确认码，即ACK</td>\n</tr>\n<tr>\n<td>5</td>\n<td>错误</td>\n</tr>\n</tbody>\n</table>\n<p>其中下载代码如下：</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">socket</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">struct</span><span class=\"o\">,</span><span class=\"nn\">sys</span><span class=\"o\">,</span><span class=\"nn\">time</span>\n\n<span class=\"c1\">#组包</span>\n<span class=\"n\">sendcontent</span> <span class=\"o\">=</span> <span class=\"n\">struct</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"p\">(</span><span class=\"s2\">&quot;!H</span><span class=\"si\">%d</span><span class=\"s2\">sb5sb&quot;</span><span class=\"o\">%</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]),</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"s2\">&quot;octet&quot;</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#创建socket</span>\n<span class=\"n\">tftpSocket</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">SOCK_DGRAM</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#发送　下载文件请求</span>\n<span class=\"n\">tftpSocket</span><span class=\"o\">.</span><span class=\"n\">sendto</span><span class=\"p\">(</span><span class=\"n\">sendcontent</span><span class=\"p\">,(</span><span class=\"s2\">&quot;192.168.17.26&quot;</span><span class=\"p\">,</span> <span class=\"mi\">69</span><span class=\"p\">))</span>\n\n<span class=\"n\">downFile</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"s1\">&#39;w&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">packNum</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"c1\">#接收数据</span>\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n<span class=\"n\">recvData</span> <span class=\"o\">=</span> <span class=\"n\">tftpSocket</span><span class=\"o\">.</span><span class=\"n\">recvfrom</span><span class=\"p\">(</span><span class=\"mi\">516</span><span class=\"p\">)</span>\n<span class=\"c1\">#解析数据</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">struct</span><span class=\"o\">.</span><span class=\"n\">unpack</span><span class=\"p\">(</span><span class=\"s2\">&quot;!HH&quot;</span><span class=\"p\">,</span><span class=\"n\">recvData</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][:</span><span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"c1\">#判断服务器返回是否是错误</span>\n<span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">5</span><span class=\"p\">:</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;没有这个文件&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">break</span>\n<span class=\"c1\">#处理返回数据并保存</span>\n<span class=\"k\">elif</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n<span class=\"c1\">#判断服务器丢包情况，防止数据重复保存</span>\n<span class=\"k\">if</span> <span class=\"n\">packNum</span> <span class=\"o\">==</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n<span class=\"n\">downFile</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">recvData</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">4</span><span class=\"p\">:])</span>\n<span class=\"n\">ip</span> <span class=\"o\">=</span> <span class=\"n\">recvData</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">sendback</span> <span class=\"o\">=</span> <span class=\"n\">struct</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"p\">(</span><span class=\"s2\">&quot;!HH&quot;</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">tftpSocket</span><span class=\"o\">.</span><span class=\"n\">sendto</span><span class=\"p\">(</span><span class=\"n\">sendback</span><span class=\"p\">,</span><span class=\"n\">ip</span><span class=\"p\">)</span>\n<span class=\"n\">packNum</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n<span class=\"k\">print</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\r</span><span class=\"s1\">第</span><span class=\"si\">%s</span><span class=\"s1\">部分拷贝成功&#39;</span><span class=\"o\">%</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n<span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">recvData</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">&lt;</span> <span class=\"mi\">516</span><span class=\"p\">:</span>\n<span class=\"k\">break</span>\n\n<span class=\"n\">downFile</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>上传代码如下：</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">socket</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">struct</span><span class=\"o\">,</span><span class=\"nn\">sys</span><span class=\"o\">,</span><span class=\"nn\">time</span>\n\n<span class=\"n\">ip</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;192.168.17.26&quot;</span>\n\n<span class=\"c1\">#组包</span>\n<span class=\"n\">sendcontent</span> <span class=\"o\">=</span> <span class=\"n\">struct</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"p\">(</span><span class=\"s2\">&quot;!H</span><span class=\"si\">%d</span><span class=\"s2\">sb5sb&quot;</span><span class=\"o\">%</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]),</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"s2\">&quot;octet&quot;</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#创建socket</span>\n<span class=\"n\">tftpSocket</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">SOCK_DGRAM</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#发送　下载文件请求</span>\n<span class=\"n\">tftpSocket</span><span class=\"o\">.</span><span class=\"n\">sendto</span><span class=\"p\">(</span><span class=\"n\">sendcontent</span><span class=\"p\">,(</span><span class=\"n\">ip</span><span class=\"p\">,</span> <span class=\"mi\">69</span><span class=\"p\">))</span>\n\n<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">packNum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n<span class=\"n\">recvData</span> <span class=\"o\">=</span> <span class=\"n\">tftpSocket</span><span class=\"o\">.</span><span class=\"n\">recvfrom</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">struct</span><span class=\"o\">.</span><span class=\"n\">unpack</span><span class=\"p\">(</span><span class=\"s2\">&quot;!HH&quot;</span><span class=\"p\">,</span><span class=\"n\">recvData</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][:</span><span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"c1\">#读取待上传文件</span>\n<span class=\"n\">upFile</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">upFile</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"mi\">512</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">conent</span> <span class=\"o\">=</span> <span class=\"n\">upFile</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">)</span>\n<span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n<span class=\"n\">upFile</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"c1\">#判断是否有发送失败的情况</span>\n<span class=\"k\">if</span> <span class=\"n\">packNum</span> <span class=\"o\">==</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n<span class=\"c1\">#发送上传数据包</span>\n<span class=\"n\">upcontent</span> <span class=\"o\">=</span> <span class=\"n\">struct</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"p\">(</span><span class=\"s2\">&quot;!HH</span><span class=\"si\">%s</span><span class=\"s2\">s&quot;</span><span class=\"o\">%</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">conent</span><span class=\"p\">),</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">conent</span><span class=\"p\">)</span>\n<span class=\"n\">tftpSocket</span><span class=\"o\">.</span><span class=\"n\">sendto</span><span class=\"p\">(</span><span class=\"n\">upcontent</span><span class=\"p\">,(</span><span class=\"n\">ip</span><span class=\"p\">,</span> <span class=\"n\">recvData</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n<span class=\"n\">packNum</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n<span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">conent</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">512</span><span class=\"p\">:</span>\n<span class=\"k\">break</span>\n<span class=\"k\">except</span> <span class=\"ne\">IOError</span><span class=\"p\">:</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;本地没有这个文件&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">break</span>\n</pre></div>',1,0,1),(21,'Python网络','FangHao','2017-04-30 10:55:05',0,'#TCP/IP协议#\nTCP/IP协议是一个协议族，其中包括像UDP、IP、TCP这样的协议，我们在这里统称为TCP/IP协议。\n\nTCP/IP的网络协议主要分为4层\n\n1）链路层：以太网\n\n2）网络层：IP\n\n3）传输层：TCP、UDP\n\n4）应用层：（HTTP、FTP）属于由TCP发展出来的，（NTP、TFTP）属于由UDP发展出来的\n\n\n#Socket#\n即套接字，每个TCP、UDP数据段中都包含源端口和目标端口字段。有时，我们把一个IP地址和一个端口号合称为一个套接字（Socket），而一个套接字对（Socket pair）可以唯一地确定互连网络中每个TCP连接的双方（客户IP地址、客户端口号、服务器IP地址、服务器端口号）\n\n\n#UDP#\nUDP是一种不可靠的、无连接的数据报服务。它主要的特点就是快，像写信一样，提前不需要建立链接，直接通过socket建立后sendto（msg，address）即可。主要应用有视频会议、聊天软件之类。注重效率，但是可能会存在丢包的现象。\n\n#TCP#\nTCP是一种可靠的、面向连接的字节流服务。源主机在传送数据前需要先和目标主机建立连接。然后，在此连接上，被编号的数据段按序收发。同时，要求对每个数据段进行确认，保证了可靠性。如果在指定的时间内没有收到目标主机对所发数据段的确认，源主机将再次发送该数据段。目前网络上重要的交易都是用TCP完成的。比如线上金钱交易等。\n\n\n![](http://upload-images.jianshu.io/upload_images/4665210-fd2952d5b578c80a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](http://upload-images.jianshu.io/upload_images/4665210-2fe8e522b9621558.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](http://upload-images.jianshu.io/upload_images/4665210-3c346599cb34788a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](http://upload-images.jianshu.io/upload_images/4665210-1d638d844bd00dec.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)','<h1>TCP/IP协议</h1>\n<p>TCP/IP协议是一个协议族，其中包括像UDP、IP、TCP这样的协议，我们在这里统称为TCP/IP协议。</p>\n<p>TCP/IP的网络协议主要分为4层</p>\n<p>1）链路层：以太网</p>\n<p>2）网络层：IP</p>\n<p>3）传输层：TCP、UDP</p>\n<p>4）应用层：（HTTP、FTP）属于由TCP发展出来的，（NTP、TFTP）属于由UDP发展出来的</p>\n<h1>Socket</h1>\n<p>即套接字，每个TCP、UDP数据段中都包含源端口和目标端口字段。有时，我们把一个IP地址和一个端口号合称为一个套接字（Socket），而一个套接字对（Socket pair）可以唯一地确定互连网络中每个TCP连接的双方（客户IP地址、客户端口号、服务器IP地址、服务器端口号）</p>\n<h1>UDP</h1>\n<p>UDP是一种不可靠的、无连接的数据报服务。它主要的特点就是快，像写信一样，提前不需要建立链接，直接通过socket建立后sendto（msg，address）即可。主要应用有视频会议、聊天软件之类。注重效率，但是可能会存在丢包的现象。</p>\n<h1>TCP</h1>\n<p>TCP是一种可靠的、面向连接的字节流服务。源主机在传送数据前需要先和目标主机建立连接。然后，在此连接上，被编号的数据段按序收发。同时，要求对每个数据段进行确认，保证了可靠性。如果在指定的时间内没有收到目标主机对所发数据段的确认，源主机将再次发送该数据段。目前网络上重要的交易都是用TCP完成的。比如线上金钱交易等。</p>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-fd2952d5b578c80a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-2fe8e522b9621558.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-3c346599cb34788a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-1d638d844bd00dec.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>',1,0,1),(22,'Python的同步','FangHao','2017-04-30 10:55:25',0,'#线程中的同步#\n关于同步异步的介绍，在异步那篇文章里我有自己认识的一个大体介绍，现在在这里主要说的是对于多个线程如何做到同步，即控制线程执行的先后顺序。\n### threading.Condition\n在threading模块中Condition()，它起到的作用呢类似于判断条件。\n示例代码如下：\n\n\n```python\n#coding=utf-8\nimport threading\nimport time\n\nclass A(threading.Thread):\ndef run(self):\nwhile True:\nif con.acquire():\nprint(\'--------A-1----\')\ncon.wait()\nprint(\'--------A-2----\')\ncon.release()\ntime.sleep(1)\n\nclass B(threading.Thread):\ndef run(self):\nwhile True:\nif con.acquire():\nprint(\'hello world\')\ncon.notify()\ncon.release()\ntime.sleep(1)\n\ncon = threading.Condition()\n\nif __name__ == \'__main__\':\na = A()\na.start()\nb = B()\nb.start()\n```\n其中threading.Condition()创建的对象con，具有acquire()、wait()、notify()\n、release()方法。类似的我们好像在threading的Lock中用到过，其实在这里，我觉得Condition()就是一个高级的Lock()。我们在这里读一下代码，首先在执行a、b两个线程的时候，由操作系统来决定执行哪个线程（操作系统对于线程的执行顺序有自己的一套算法，如时间片轮转之类的算法），假设先执行a，con.acquire()即上了一把锁，b就无法进行执行，当a执行到con.wait()的时候会卡住，这时候b会忽略之前的那把锁，然后继续执行b的内容，直到执行到con.notify()的时会告诉所有con对象中的wait()的**随即一个**,可以继续往下执行了，这样在wait的地方就可以继续往下执行了。另外Condition()种还有一个notifyALL()方法，即通知所有con对象中的wait()\n\n#消费者与生产者的两种解决思路#\n### 1）条件判断\n根据上文中的条件判断方法，我们可以实现消费者与生产者这种模式的代码\n\n\n```python\n#coding=utf-8\nimport threading\nimport time\n\nclass Producer(threading.Thread):\ndef run(self):\nglobal count\nwhile True:\nif con.acquire():\nif count > 1000:\ncon.wait()\nelse:\ncount += 100\nprint(\'生产者生产了100个产品，现在还剩%d个产品\'%count)\ncon.notify()\ncon.release()\ntime.sleep(0.5)\n\nclass Consumer(threading.Thread):\ndef run(self):\nglobal count\nwhile True:\nif con.acquire():\nif count < 100:\ncon.wait()\nelse:\ncount -= 3\nprint(\'消费者消费了3个产品，现在还剩%d个产品\'%count)\ncon.notify()\ncon.release()\ntime.sleep(0.1)\n\nif __name__ == \'__main__\':\n\ncount = 500\ncon = threading.Condition()\n\n# for i in range(5):\n# p = Producer()\n# p.start()\n\n# for i in range(3):\n# c = Consumer()\n# c.start()\np = Producer()\np.start()\nc = Consumer()\nc.start()\n```\n### 2）队列\n除了之前学过的multiprocessing中的Queue、multiprocessing中的Manager().Queue()来处理Pool中的Queue。接下来介绍的这种事在Queue模块中的Queue(),它用来解决的是线程间同步的问题，而且他更能够能好的记录执行内容的记录（他也有put、get方法，而且这两种方法在使用的时候，**是也有阻塞功能的**）。\n\n示例代码如下：\n\n\n```python\n#coding=utf-8\nimport threading,time\nfrom Queue import Queue\n\nclass Producer(threading.Thread):\ndef run(self):\nglobal queue\ncount = 0\nwhile True:\nif queue.qsize() < 1000:\nfor i in range(100):\ncount += 1\nmsg = \'生成产品\'+str(count)\nqueue.put(msg)\nprint(msg)\ntime.sleep(1)\n\nclass Consumer(threading.Thread):\ndef run(self):\nglobal queue\nwhile True:\nif queue.qsize() > 100:\nfor i in range(3):\nmsg = self.name + \'消费了 \'+queue.get()\nprint(msg)\ntime.sleep(1)\n\nif __name__ == \'__main__\':\nqueue = Queue()\n\nfor i in range(500):\nqueue.put(\'初始产品\'+str(i))\n\nfor i in range(2):\np = Producer()\np.start()\nfor i in range(5):\nc = Consumer()\nc.start()\n```','<h1>线程中的同步</h1>\n<p>关于同步异步的介绍，在异步那篇文章里我有自己认识的一个大体介绍，现在在这里主要说的是对于多个线程如何做到同步，即控制线程执行的先后顺序。</p>\n<h3>threading.Condition</h3>\n<p>在threading模块中Condition()，它起到的作用呢类似于判断条件。\n示例代码如下：</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">(</span><span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">):</span>\n<span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n<span class=\"k\">if</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">acquire</span><span class=\"p\">():</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;--------A-1----&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;--------A-2----&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">release</span><span class=\"p\">()</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">(</span><span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">):</span>\n<span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n<span class=\"k\">if</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">acquire</span><span class=\"p\">():</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello world&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">notify</span><span class=\"p\">()</span>\n<span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">release</span><span class=\"p\">()</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Condition</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">()</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"p\">()</span>\n<span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>其中threading.Condition()创建的对象con，具有acquire()、wait()、notify()\n、release()方法。类似的我们好像在threading的Lock中用到过，其实在这里，我觉得Condition()就是一个高级的Lock()。我们在这里读一下代码，首先在执行a、b两个线程的时候，由操作系统来决定执行哪个线程（操作系统对于线程的执行顺序有自己的一套算法，如时间片轮转之类的算法），假设先执行a，con.acquire()即上了一把锁，b就无法进行执行，当a执行到con.wait()的时候会卡住，这时候b会忽略之前的那把锁，然后继续执行b的内容，直到执行到con.notify()的时会告诉所有con对象中的wait()的<strong>随即一个</strong>,可以继续往下执行了，这样在wait的地方就可以继续往下执行了。另外Condition()种还有一个notifyALL()方法，即通知所有con对象中的wait()</p>\n<h1>消费者与生产者的两种解决思路</h1>\n<h3>1）条件判断</h3>\n<p>根据上文中的条件判断方法，我们可以实现消费者与生产者这种模式的代码</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Producer</span><span class=\"p\">(</span><span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">):</span>\n<span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"k\">global</span> <span class=\"n\">count</span>\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n<span class=\"k\">if</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">acquire</span><span class=\"p\">():</span>\n<span class=\"k\">if</span> <span class=\"n\">count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1000</span><span class=\"p\">:</span>\n<span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">()</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">100</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;生产者生产了100个产品，现在还剩</span><span class=\"si\">%d</span><span class=\"s1\">个产品&#39;</span><span class=\"o\">%</span><span class=\"n\">count</span><span class=\"p\">)</span>\n<span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">notify</span><span class=\"p\">()</span>\n<span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">release</span><span class=\"p\">()</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Consumer</span><span class=\"p\">(</span><span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">):</span>\n<span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"k\">global</span> <span class=\"n\">count</span>\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n<span class=\"k\">if</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">acquire</span><span class=\"p\">():</span>\n<span class=\"k\">if</span> <span class=\"n\">count</span> <span class=\"o\">&lt;</span> <span class=\"mi\">100</span><span class=\"p\">:</span>\n<span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">()</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"n\">count</span> <span class=\"o\">-=</span> <span class=\"mi\">3</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;消费者消费了3个产品，现在还剩</span><span class=\"si\">%d</span><span class=\"s1\">个产品&#39;</span><span class=\"o\">%</span><span class=\"n\">count</span><span class=\"p\">)</span>\n<span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">notify</span><span class=\"p\">()</span>\n<span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">release</span><span class=\"p\">()</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n\n<span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">500</span>\n<span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Condition</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># for i in range(5):</span>\n<span class=\"c1\"># p = Producer()</span>\n<span class=\"c1\"># p.start()</span>\n\n<span class=\"c1\"># for i in range(3):</span>\n<span class=\"c1\"># c = Consumer()</span>\n<span class=\"c1\"># c.start()</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Producer</span><span class=\"p\">()</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Consumer</span><span class=\"p\">()</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<h3>2）队列</h3>\n<p>除了之前学过的multiprocessing中的Queue、multiprocessing中的Manager().Queue()来处理Pool中的Queue。接下来介绍的这种事在Queue模块中的Queue(),它用来解决的是线程间同步的问题，而且他更能够能好的记录执行内容的记录（他也有put、get方法，而且这两种方法在使用的时候，<strong>是也有阻塞功能的</strong>）。</p>\n<p>示例代码如下：</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span><span class=\"o\">,</span><span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">Queue</span> <span class=\"kn\">import</span> <span class=\"n\">Queue</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Producer</span><span class=\"p\">(</span><span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">):</span>\n<span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"k\">global</span> <span class=\"n\">queue</span>\n<span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n<span class=\"k\">if</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">qsize</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1000</span><span class=\"p\">:</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">):</span>\n<span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n<span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;生成产品&#39;</span><span class=\"o\">+</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">)</span>\n<span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Consumer</span><span class=\"p\">(</span><span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">):</span>\n<span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"k\">global</span> <span class=\"n\">queue</span>\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n<span class=\"k\">if</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">qsize</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">100</span><span class=\"p\">:</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n<span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;消费了 &#39;</span><span class=\"o\">+</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n<span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">Queue</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">):</span>\n<span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">&#39;初始产品&#39;</span><span class=\"o\">+</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Producer</span><span class=\"p\">()</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Consumer</span><span class=\"p\">()</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</pre></div>',1,0,1),(23,'Python的GIL','FangHao','2017-04-30 10:55:38',0,'#Python的GIL是什么#\nGIL即全局解释器锁（Global Interpreter Lock）\n\n首先我认为，Python本身语言不存在对于线程的缺陷，但是由于Python代码不像C语言一样经过编译后直接可以操作CPU，需要经过一层解释器解释后才能让CPU认识使用。 由C语言编写的Cpython解释器，对于代码中存在多个线程的程序时有限制，及解释器只会在同一段时间处理一个线程的工作，也就是说交给CPU的任务也就是一个线程的工作。这个问题是由于当时在设计Python的时候由于CPU还都是单核，并没有现在多核的CPU，所以为了提高线程的执行效率和CPU的使用率，就会采用解释器一段时间只能执行一个线程的结果。当然并不是Python作者不去解决这个问题，而且修改GIL会带来数据安全之类的问题：)\n\n具体实验如下：\n###1）在双核CPU、主线程死循环的情况下\n```python\n#coding=utf-8\nwhile True:\npass\n```\n\n![](http://upload-images.jianshu.io/upload_images/4665210-3ba944db7cd4adb0.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n一个CPU是满负荷运载的\n### 2）在双核CPU、主线程和子线程是死循环的情况下\n\n\n```python\n#coding=utf-8\nfrom threading import Thread\n\ndef test():\nwhile True:\npass\n\nt1 = Thread(target = test)\nt1.start()\n\ntest()\n```\n\n\n我们预想一下，此种情况由于有两个死循环线程，所以应该是两个CPU都满负载运载\n\n实际运行结果是\n\n![](http://upload-images.jianshu.io/upload_images/4665210-e664c1d4f5f76625.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n即两个CPU的运行效率基本在50%，所以我们可以理解为，两个线程任务都不是满负载运作。这就是Python的GIL限制\n#解决方案#\n1）首先GIL出现在的是Cpython解释器中的，而Jpython解释器中并没有，所以说换解释器也可以作为一种解决方案。但是这种方案有点太low，说不定对项目还有其他的影响。\n\n2）使用进程的方式来解决。首先Python的GIL问题是存在在线程中的，对于进程并没有这种限制，我们可以做以下实验\n\n\n```python\n#coding=utf-8\nfrom multiprocessing import Process\n\ndef test():\nwhile True:\npass\n\np1 = Process(target = test)\np1.start()\n\ntest()\n```\n两个死循环进程的运行结果是：\n\n![](http://upload-images.jianshu.io/upload_images/4665210-418e5eac076e8b36.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n所以说采用进程也是一种解决方案\n\n3）但是过多的进程，其实吃的资源也非常多，个人认为最佳的解决方案是将多线程执行的部分，换用C语言重写，编译完成后Python直接引入，所以说线程的工作不需要解释器来工作，就可以极大地提高性能（当然目前我不会写C代码）','<h1>Python的GIL是什么</h1>\n<p>GIL即全局解释器锁（Global Interpreter Lock）</p>\n<p>首先我认为，Python本身语言不存在对于线程的缺陷，但是由于Python代码不像C语言一样经过编译后直接可以操作CPU，需要经过一层解释器解释后才能让CPU认识使用。 由C语言编写的Cpython解释器，对于代码中存在多个线程的程序时有限制，及解释器只会在同一段时间处理一个线程的工作，也就是说交给CPU的任务也就是一个线程的工作。这个问题是由于当时在设计Python的时候由于CPU还都是单核，并没有现在多核的CPU，所以为了提高线程的执行效率和CPU的使用率，就会采用解释器一段时间只能执行一个线程的结果。当然并不是Python作者不去解决这个问题，而且修改GIL会带来数据安全之类的问题：)</p>\n<p>具体实验如下：</p>\n<h3>1）在双核CPU、主线程死循环的情况下</h3>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n<span class=\"k\">pass</span>\n</pre></div>\n\n\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-3ba944db7cd4adb0.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<p>一个CPU是满负荷运载的</p>\n<h3>2）在双核CPU、主线程和子线程是死循环的情况下</h3>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">threading</span> <span class=\"kn\">import</span> <span class=\"n\">Thread</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">():</span>\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n<span class=\"k\">pass</span>\n\n<span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">test</span><span class=\"p\">)</span>\n<span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"n\">test</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>我们预想一下，此种情况由于有两个死循环线程，所以应该是两个CPU都满负载运载</p>\n<p>实际运行结果是</p>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-e664c1d4f5f76625.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<p>即两个CPU的运行效率基本在50%，所以我们可以理解为，两个线程任务都不是满负载运作。这就是Python的GIL限制</p>\n<h1>解决方案</h1>\n<p>1）首先GIL出现在的是Cpython解释器中的，而Jpython解释器中并没有，所以说换解释器也可以作为一种解决方案。但是这种方案有点太low，说不定对项目还有其他的影响。</p>\n<p>2）使用进程的方式来解决。首先Python的GIL问题是存在在线程中的，对于进程并没有这种限制，我们可以做以下实验</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">multiprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">Process</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">():</span>\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n<span class=\"k\">pass</span>\n\n<span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">Process</span><span class=\"p\">(</span><span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">test</span><span class=\"p\">)</span>\n<span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"n\">test</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>两个死循环进程的运行结果是：</p>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-418e5eac076e8b36.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<p>所以说采用进程也是一种解决方案</p>\n<p>3）但是过多的进程，其实吃的资源也非常多，个人认为最佳的解决方案是将多线程执行的部分，换用C语言重写，编译完成后Python直接引入，所以说线程的工作不需要解释器来工作，就可以极大地提高性能（当然目前我不会写C代码）</p>',1,0,1),(24,'Python异步','FangHao','2017-04-30 10:55:58',0,'#multiprocessing中Pool实现异步#\n关于异步与同步可以做一个例子来解释一下。\n\n拿爬虫为例，目前需要爬取京东、淘宝网站。同步的方法是，首先我要爬取京东网站，发送请求后等待京东网站返回它的数据，然后再爬取淘宝，再等待它返回的数据。同步是有一定顺序性的。\n\n异步的方式是，首先我同时向京东和淘宝两个网站发送请求，此时谁先返回数据先处理谁。由于存在了不确定性，所以这种方式可以理解为是异步的一种行为。\n\n使用multiprocessing中Pool来实现异步，使用的是Pool中callback的功能。\n实现代码如下:\n\n\n```python\n#coding=utf-8\nfrom multiprocessing import Pool\nimport os,time\n\ndef test():\nprint(\'test进程pid=%s,ppid=%s\'%(os.getpid(),os.getppid()))\nreturn \'hello world\'\ntime.sleep(1)\n\ndef test2(args):\nprint(\'test2进程pid=%s,ppid=%s\'%(os.getpid(),os.getppid()))\nprint(args)\ntime.sleep(1)\nif __name__ == \'__main__\':\npool = Pool()\npool.apply_async(func = test,callback = test2)\n\n# pool.close()\n# pool.join()\n\nwhile True:\nprint(\'主进程pid=%s,ppid=%s\'%(os.getpid(),os.getppid()))\ntime.sleep(1)\n```\n运行结果如下：\n\n\n![](http://upload-images.jianshu.io/upload_images/4665210-ca2072477cb53a3d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n从这里我们可以发现，当callback = test2的时候，其实是通过主进程完成的。其中test()中的返回值被test2()作为参数调用，如果test()没有返回值的话，那么test2()需要将self传入，例如test2(self)','<h1>multiprocessing中Pool实现异步</h1>\n<p>关于异步与同步可以做一个例子来解释一下。</p>\n<p>拿爬虫为例，目前需要爬取京东、淘宝网站。同步的方法是，首先我要爬取京东网站，发送请求后等待京东网站返回它的数据，然后再爬取淘宝，再等待它返回的数据。同步是有一定顺序性的。</p>\n<p>异步的方式是，首先我同时向京东和淘宝两个网站发送请求，此时谁先返回数据先处理谁。由于存在了不确定性，所以这种方式可以理解为是异步的一种行为。</p>\n<p>使用multiprocessing中Pool来实现异步，使用的是Pool中callback的功能。\n实现代码如下:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">multiprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">Pool</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span><span class=\"o\">,</span><span class=\"nn\">time</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">():</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;test进程pid=</span><span class=\"si\">%s</span><span class=\"s1\">,ppid=</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span><span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">(),</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getppid</span><span class=\"p\">()))</span>\n<span class=\"k\">return</span> <span class=\"s1\">&#39;hello world&#39;</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test2</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">):</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;test2进程pid=</span><span class=\"si\">%s</span><span class=\"s1\">,ppid=</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span><span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">(),</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getppid</span><span class=\"p\">()))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n<span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"n\">Pool</span><span class=\"p\">()</span>\n<span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">apply_async</span><span class=\"p\">(</span><span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">test</span><span class=\"p\">,</span><span class=\"n\">callback</span> <span class=\"o\">=</span> <span class=\"n\">test2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># pool.close()</span>\n<span class=\"c1\"># pool.join()</span>\n\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;主进程pid=</span><span class=\"si\">%s</span><span class=\"s1\">,ppid=</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span><span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">(),</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getppid</span><span class=\"p\">()))</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>运行结果如下：</p>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-ca2072477cb53a3d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<p>从这里我们可以发现，当callback = test2的时候，其实是通过主进程完成的。其中test()中的返回值被test2()作为参数调用，如果test()没有返回值的话，那么test2()需要将self传入，例如test2(self)</p>',1,0,1),(25,'Python多线程','FangHao','2017-04-30 10:56:16',0,'#threading与Lock#\r\nPython中实现多线程的方式有Thread和threading，其中Thread过于底层，threading是将Thread封装之后的，所以使用起来更加方便。\r\n\r\n在Python的线程中，全局变量可以被进程中的线程访问和修改，这样就会造成一种数据不安全的状态，解决的方法有1）使用while True+if判断来实现控制其他线程的执行，但是此种方式过于消耗资源。在这里使用互斥锁的方式来解决这个问题\r\n\r\n代码如下：\r\n\r\n\r\n```python\r\n#coding=utf-8\r\nfrom threading import Thread,Lock\r\nimport time,os\r\n\r\ng_num = 0\r\n\r\ndef work1():\r\n    global g_num\r\n    for i in range(1000000):\r\n        #metux.acquire()\r\n        g_num += 1\r\n        #metux.release()\r\n    print(\'work1\',g_num)\r\n\r\ndef work2():\r\n    global g_num\r\n    for i in range(1000000):\r\n        #metux.acquire()\r\n        g_num += 1\r\n        #metux.release()\r\n    print(\'work2\',g_num)\r\n\r\nif __name__ == \'__main__\':\r\n    #metux = Lock()\r\n    t1 = Thread(target = work1)\r\n    t2 = Thread(target = work2)\r\n    t1.start()\r\n    t2.start()\r\n    t1.join()\r\n    t2.join()\r\n    print(g_num)\r\n```\r\n此段代码中注释了metux对象的部分，这样的代码执行结果会是：\r\n\r\n![](http://upload-images.jianshu.io/upload_images/4665210-d603749d1b58f4a2.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n\r\n因为多个线程中g_num += 1在执行的时候，由于CPU切换进程的机制会导致有一些进程此步骤没有执行完毕，但是保留了当时执行的数据状态，所以会造成部分数据没有得到正确的加合运算。\r\n\r\n针对这种情况的解决方式一种是使用互斥锁，即将上述代码中注释的部分解除掉，执行结果如下：\r\n\r\n\r\n![](http://upload-images.jianshu.io/upload_images/4665210-8d542d950a7e7b29.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n\r\n其中metux = Lock()初始化一个对象，metux.acquire()来进行上锁，metux.release()来进行解锁。当代码某处使用了一个锁之后，代码在执行别处时如果再遇到这个锁的时候，就会卡顿在锁的地方不会再往下执行\r\n\r\n#threading与thread.local()方法#\r\n\r\n使用互斥锁，虽然保护了数据安全，但是从另一方面就是将多个进程改成了单一一个进程在运行。这样并不能很好的提高多线程的效率。\r\n\r\n在这里Python的threading中有一个ThreadLocal方法，可以创建一个全局变量，但是多个线程只能修改自己对于此全局变量的那一个部分，做到了数据保护和线程运行\r\n\r\n代码示例如下：\r\n\r\n```python\r\n#coding=utf-8\r\nimport threading\r\n\r\n# 创建全局ThreadLocal对象:\r\nlocal_school = threading.local()\r\n\r\ndef process_student():\r\n    # 获取当前线程关联的student:\r\n    std = local_school.student\r\n    print(\'Hello, %s (in %s)\' % (std, threading.current_thread().name))\r\n\r\ndef process_thread(name):\r\n    # 绑定ThreadLocal的student:\r\n    local_school.student = name\r\n    process_student()\r\n\r\nt1 = threading.Thread(target= process_thread, args=(\'dongGe\',), name=\'Thread-A\')\r\nt2 = threading.Thread(target= process_thread, args=(\'老王\',), name=\'Thread-B\')\r\nt1.start()\r\nt2.start()\r\nt1.join()\r\nt2.join()\r\n```\r\n\r\n运行结果如下:\r\n\r\n\r\n![](http://upload-images.jianshu.io/upload_images/4665210-0a49f7df1696386a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n\r\n#Ubuntu中查看线程的方式#\r\n1) ps -T -p PID\r\n\r\n2) top -H -p PID','<h1>threading与Lock</h1>\n<p>Python中实现多线程的方式有Thread和threading，其中Thread过于底层，threading是将Thread封装之后的，所以使用起来更加方便。</p>\n<p>在Python的线程中，全局变量可以被进程中的线程访问和修改，这样就会造成一种数据不安全的状态，解决的方法有1）使用while True+if判断来实现控制其他线程的执行，但是此种方式过于消耗资源。在这里使用互斥锁的方式来解决这个问题</p>\n<p>代码如下：</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">threading</span> <span class=\"kn\">import</span> <span class=\"n\">Thread</span><span class=\"p\">,</span><span class=\"n\">Lock</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span><span class=\"o\">,</span><span class=\"nn\">os</span>\n\n<span class=\"n\">g_num</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">work1</span><span class=\"p\">():</span>\n    <span class=\"k\">global</span> <span class=\"n\">g_num</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1000000</span><span class=\"p\">):</span>\n        <span class=\"c1\">#metux.acquire()</span>\n        <span class=\"n\">g_num</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"c1\">#metux.release()</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;work1&#39;</span><span class=\"p\">,</span><span class=\"n\">g_num</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">work2</span><span class=\"p\">():</span>\n    <span class=\"k\">global</span> <span class=\"n\">g_num</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1000000</span><span class=\"p\">):</span>\n        <span class=\"c1\">#metux.acquire()</span>\n        <span class=\"n\">g_num</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"c1\">#metux.release()</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;work2&#39;</span><span class=\"p\">,</span><span class=\"n\">g_num</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"c1\">#metux = Lock()</span>\n    <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">work1</span><span class=\"p\">)</span>\n    <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">work2</span><span class=\"p\">)</span>\n    <span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>\n    <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">g_num</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>此段代码中注释了metux对象的部分，这样的代码执行结果会是：</p>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-d603749d1b58f4a2.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<p>因为多个线程中g_num += 1在执行的时候，由于CPU切换进程的机制会导致有一些进程此步骤没有执行完毕，但是保留了当时执行的数据状态，所以会造成部分数据没有得到正确的加合运算。</p>\n<p>针对这种情况的解决方式一种是使用互斥锁，即将上述代码中注释的部分解除掉，执行结果如下：</p>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-8d542d950a7e7b29.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<p>其中metux = Lock()初始化一个对象，metux.acquire()来进行上锁，metux.release()来进行解锁。当代码某处使用了一个锁之后，代码在执行别处时如果再遇到这个锁的时候，就会卡顿在锁的地方不会再往下执行</p>\n<h1>threading与thread.local()方法</h1>\n<p>使用互斥锁，虽然保护了数据安全，但是从另一方面就是将多个进程改成了单一一个进程在运行。这样并不能很好的提高多线程的效率。</p>\n<p>在这里Python的threading中有一个ThreadLocal方法，可以创建一个全局变量，但是多个线程只能修改自己对于此全局变量的那一个部分，做到了数据保护和线程运行</p>\n<p>代码示例如下：</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n\n<span class=\"c1\"># 创建全局ThreadLocal对象:</span>\n<span class=\"n\">local_school</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">local</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">process_student</span><span class=\"p\">():</span>\n    <span class=\"c1\"># 获取当前线程关联的student:</span>\n    <span class=\"n\">std</span> <span class=\"o\">=</span> <span class=\"n\">local_school</span><span class=\"o\">.</span><span class=\"n\">student</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Hello, </span><span class=\"si\">%s</span><span class=\"s1\"> (in </span><span class=\"si\">%s</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"p\">,</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">current_thread</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">process_thread</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"c1\"># 绑定ThreadLocal的student:</span>\n    <span class=\"n\">local_school</span><span class=\"o\">.</span><span class=\"n\">student</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n    <span class=\"n\">process_student</span><span class=\"p\">()</span>\n\n<span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span> <span class=\"n\">process_thread</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;dongGe&#39;</span><span class=\"p\">,),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;Thread-A&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span> <span class=\"n\">process_thread</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;老王&#39;</span><span class=\"p\">,),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;Thread-B&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>\n<span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>运行结果如下:</p>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-0a49f7df1696386a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<h1>Ubuntu中查看线程的方式</h1>\n<p>1) ps -T -p PID</p>\n<p>2) top -H -p PID</p>',1,0,1),(26,'Python消息队列','FangHao','2017-04-30 10:56:30',0,'## multiprocessing中的Queue\n首先我们知道，在各个进程中，每个全局变量与局部变量是不能与其他进程的通讯的，所以说这里可以通过消息队列的方式完成进程间的通讯。\n代码见下例子\n\n\n```python\n#coding=utf-8\nfrom multiprocessing import Queue,Process\nimport time\n\ndef write(que):\nfor value in [\'A\',\'B\',\'C\',\'D\']:\nque.put(value)\nprint(\'%s已经被添加至que中\'%value)\ntime.sleep(1)\n\ndef read(que):\nfor i in range(que.qsize()):\nprint(que.get()+\'已被导出\')\ntime.sleep(1)\n\n\nif __name__ == \'__main__\':\nque = Queue()\np1 = Process(target = write,args = (que,))\np1.start()\np1.join()\np2 = Process(target = read,args = (que,))\np2.start()\np2.join()\nprint(\'所有数据导出完毕\')\n```\n执行结果如下：\n\n![](http://upload-images.jianshu.io/upload_images/4665210-74c53a0d573fdf05.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n当然这是在multiprocessing模块中使用Process的结果。\n#multiprocessing中的Manager().Queue()#\n如果考虑使用进程池Pool的话，我们必须使用multiprocessing模块中的Manager来创建消息队列\n\n代码如下：\n\n\n```python\n#coding=utf-8\nfrom multiprocessing import Pool,Manager\nimport time,os\n\ndef write(que):\nprint(\'启动write进程，pid=%s,ppid=%s\'%(os.getpid(),os.getppid()))\nfor i in [\'A\',\'B\',\'C\',\'D\']:\nque.put(i)\nprint(\'%s已经添加至que中\'%i)\ntime.sleep(1)\n\ndef read(que):\nprint(\'启动read进程，pid=%s,ppid=%s\'%(os.getpid(),os.getppid()))\nfor i in range(que.qsize()):\nprint(que.get()+\'已被移除\')\ntime.sleep(1)\n\n\nif __name__ == \'__main__\':\npo = Pool()\nque = Manager().Queue()\npo.apply(write,(que,))\npo.apply(read,(que,))\npo.close()\npo.join()\nprint(\'主进程%s结束\'%os.getpid())\n```\n\n执行结果如下：\n\n\n![](http://upload-images.jianshu.io/upload_images/4665210-5fb079d50ad855e7.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## Queue模块中的Queue()\n此部分介绍在Python同步文章中有介绍，详细看那里','<h2>multiprocessing中的Queue</h2>\n<p>首先我们知道，在各个进程中，每个全局变量与局部变量是不能与其他进程的通讯的，所以说这里可以通过消息队列的方式完成进程间的通讯。\n代码见下例子</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">multiprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">Queue</span><span class=\"p\">,</span><span class=\"n\">Process</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">que</span><span class=\"p\">):</span>\n<span class=\"k\">for</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;C&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;D&#39;</span><span class=\"p\">]:</span>\n<span class=\"n\">que</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">已经被添加至que中&#39;</span><span class=\"o\">%</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"n\">que</span><span class=\"p\">):</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">que</span><span class=\"o\">.</span><span class=\"n\">qsize</span><span class=\"p\">()):</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">que</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">+</span><span class=\"s1\">&#39;已被导出&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n<span class=\"n\">que</span> <span class=\"o\">=</span> <span class=\"n\">Queue</span><span class=\"p\">()</span>\n<span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">Process</span><span class=\"p\">(</span><span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">write</span><span class=\"p\">,</span><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">que</span><span class=\"p\">,))</span>\n<span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>\n<span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">Process</span><span class=\"p\">(</span><span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">read</span><span class=\"p\">,</span><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">que</span><span class=\"p\">,))</span>\n<span class=\"n\">p2</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">p2</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;所有数据导出完毕&#39;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>执行结果如下：</p>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-74c53a0d573fdf05.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<p>当然这是在multiprocessing模块中使用Process的结果。</p>\n<h1>multiprocessing中的Manager().Queue()</h1>\n<p>如果考虑使用进程池Pool的话，我们必须使用multiprocessing模块中的Manager来创建消息队列</p>\n<p>代码如下：</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">multiprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">Pool</span><span class=\"p\">,</span><span class=\"n\">Manager</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span><span class=\"o\">,</span><span class=\"nn\">os</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">que</span><span class=\"p\">):</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;启动write进程，pid=</span><span class=\"si\">%s</span><span class=\"s1\">,ppid=</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span><span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">(),</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getppid</span><span class=\"p\">()))</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;C&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;D&#39;</span><span class=\"p\">]:</span>\n<span class=\"n\">que</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">已经添加至que中&#39;</span><span class=\"o\">%</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"n\">que</span><span class=\"p\">):</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;启动read进程，pid=</span><span class=\"si\">%s</span><span class=\"s1\">,ppid=</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span><span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">(),</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getppid</span><span class=\"p\">()))</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">que</span><span class=\"o\">.</span><span class=\"n\">qsize</span><span class=\"p\">()):</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">que</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">+</span><span class=\"s1\">&#39;已被移除&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n<span class=\"n\">po</span> <span class=\"o\">=</span> <span class=\"n\">Pool</span><span class=\"p\">()</span>\n<span class=\"n\">que</span> <span class=\"o\">=</span> <span class=\"n\">Manager</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">()</span>\n<span class=\"n\">po</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">write</span><span class=\"p\">,(</span><span class=\"n\">que</span><span class=\"p\">,))</span>\n<span class=\"n\">po</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">read</span><span class=\"p\">,(</span><span class=\"n\">que</span><span class=\"p\">,))</span>\n<span class=\"n\">po</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"n\">po</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;主进程</span><span class=\"si\">%s</span><span class=\"s1\">结束&#39;</span><span class=\"o\">%</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">())</span>\n</pre></div>\n\n\n<p>执行结果如下：</p>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-5fb079d50ad855e7.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<h2>Queue模块中的Queue()</h2>\n<p>此部分介绍在Python同步文章中有介绍，详细看那里</p>',1,0,1),(27,'Python多进程','FangHao','2017-04-30 10:56:46',0,'## （1）fork\nfork是Linux、Mac、Unix中系统的一个底层接口（Windows没有），像C语言中可以直接使用fork来调用创建多进程。Python中在os模块中也存在fork的功能。\n具体实现代码如下：\n```python\n#coding=utf-8\nimport os\n\nnum = 100\np = os.fork()\n\nif p == 0:\nprint(\'子进程pid=%s,ppid=%s,p=%s\'%(os.getpid(),os.getppid(),p))\nprint(num)\nnum += 100\nprint(num)\nelif p > 0:\nprint(\'父进程pid=%s,ppid=%s,p=%s\'%(os.getpid(),os.getppid(),p))\nprint(num)\n\n```\n结果如下：\n\n![](http://upload-images.jianshu.io/upload_images/4665210-03ac1ef4b83b351c.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n从结果中可以看到子进程的ppid对应的就是父进程的pid。而且全局变量num在这里是无法作为修改的。\n通过fork中加入if判断也可以做到生成多个进程来控制。代码如下：\n\n\n```python\n#coding=utf-8\nimport os\n\np = os.fork()\n\nif p == 0:\nprint(\'子进程1,pid=%s,ppid=%s,p=%s\'%(os.getpid(),os.getppid(),p))\nelif p > 0:\nprint(\'父进程1,pid=%s,ppid=%s,p=%s\'%(os.getpid(),os.getppid(),p))\np2 = os.fork()\nif p2 == 0:\nprint(\'子进程2,pid=%s,ppid=%s,p2=%s\'%(os.getpid(),os.getppid(),p2))\nelif p2 > 0:\npass\n#print(\'父进程2,pid=%s,ppid=%s,p2=%s\'%(os.getpid(),os.getppid(),p2))\n```\n从这里可以看出使用fork这种非常底层的接口来完成进程的操作是比较复杂的。所以Python完成进程的操作一遍较多的使用multiprocessing\n##（2）multiprocessing\n代码如下：\n\n\n```python\n#coding=utf-8\nfrom multiprocessing import Process\nimport os\nfrom time import sleep\n\ndef run_prc(name,age,**kwargs):\nprint(\'子进程在运行中，name=%s,age=%s,pid=%s\'%(name,age,os.getpid()))\nprint(kwargs)\nsleep(0.5)\n\nif __name__ == \'__main__\':\nprint(\'父进程pid=%s\'%os.getpid())\np = Process(target = run_prc, args = (\'test\',18), kwargs = {\'m\':20})\nprint(\'子进程将要开始执行\')\np.start()\nsleep(1)\np.terminate()\np.join()\nprint(\'子进程结束\')\n```\n\n![](http://upload-images.jianshu.io/upload_images/4665210-a027f0ca242b559e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n通过使用multiprocessing中的Process可以更好的控制进程数，省去的是对于底层进程的管理，更好的控制程序的逻辑，而且multiprocessing是跨平台的，fork无法在Windows中使用\n\n## （3）进程池\n\n当使用fork时，会分出一个同时出现两个进程，这两个进程会保存当时程序进行到某一时刻点的数据状态。这样就会造成一个问题，假如用户请求的非常多，为了满足用户的请求，会使用Process创建多个进程，这样就会造成内存极大的占用，进程多了，也会造成CPU轮换进程速度的降低。从而出现性能瓶颈。所以这里采用了一个叫做进程池的方式来解决这个问题，进程池类似于人过河，假设有10个人要渡河，目前没法及时造出10艘船，可以先用现有的3艘船来轮番渡河。\n举例代码如下：\n\n\n```python\n#coding=utf-8\nfrom multiprocessing import Pool\nimport os,time\n\ndef work(i):\nt_start = time.time()\nprint(\'用户%s上传过河\'%i)\nt_stop = time.time()\nprint(\'耗时%0.9fs\'%(t_stop-t_start))\n\n\n#在进程池中初始化3个进程\npo = Pool(3)\n\nfor i in range(1,11):\n#分配10个任务\npo.apply_async(work,(i,))\n\nprint(\'进程开始\')\npo.close()#表示关闭，不再接受新的任务\npo.join()\nprint(\'进程结束\')\n```\n\n![](http://upload-images.jianshu.io/upload_images/4665210-098bf4dc80d7188b.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)','<h2>（1）fork</h2>\n<p>fork是Linux、Mac、Unix中系统的一个底层接口（Windows没有），像C语言中可以直接使用fork来调用创建多进程。Python中在os模块中也存在fork的功能。\n具体实现代码如下：</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">fork</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;子进程pid=</span><span class=\"si\">%s</span><span class=\"s1\">,ppid=</span><span class=\"si\">%s</span><span class=\"s1\">,p=</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span><span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">(),</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getppid</span><span class=\"p\">(),</span><span class=\"n\">p</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n<span class=\"n\">num</span> <span class=\"o\">+=</span> <span class=\"mi\">100</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">p</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;父进程pid=</span><span class=\"si\">%s</span><span class=\"s1\">,ppid=</span><span class=\"si\">%s</span><span class=\"s1\">,p=</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span><span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">(),</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getppid</span><span class=\"p\">(),</span><span class=\"n\">p</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>结果如下：</p>\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-03ac1ef4b83b351c.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<p>从结果中可以看到子进程的ppid对应的就是父进程的pid。而且全局变量num在这里是无法作为修改的。\n通过fork中加入if判断也可以做到生成多个进程来控制。代码如下：</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">fork</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;子进程1,pid=</span><span class=\"si\">%s</span><span class=\"s1\">,ppid=</span><span class=\"si\">%s</span><span class=\"s1\">,p=</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span><span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">(),</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getppid</span><span class=\"p\">(),</span><span class=\"n\">p</span><span class=\"p\">))</span>\n<span class=\"k\">elif</span> <span class=\"n\">p</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;父进程1,pid=</span><span class=\"si\">%s</span><span class=\"s1\">,ppid=</span><span class=\"si\">%s</span><span class=\"s1\">,p=</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span><span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">(),</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getppid</span><span class=\"p\">(),</span><span class=\"n\">p</span><span class=\"p\">))</span>\n<span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">fork</span><span class=\"p\">()</span>\n<span class=\"k\">if</span> <span class=\"n\">p2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;子进程2,pid=</span><span class=\"si\">%s</span><span class=\"s1\">,ppid=</span><span class=\"si\">%s</span><span class=\"s1\">,p2=</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span><span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">(),</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getppid</span><span class=\"p\">(),</span><span class=\"n\">p2</span><span class=\"p\">))</span>\n<span class=\"k\">elif</span> <span class=\"n\">p2</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"k\">pass</span>\n<span class=\"c1\">#print(&#39;父进程2,pid=%s,ppid=%s,p2=%s&#39;%(os.getpid(),os.getppid(),p2))</span>\n</pre></div>\n\n\n<p>从这里可以看出使用fork这种非常底层的接口来完成进程的操作是比较复杂的。所以Python完成进程的操作一遍较多的使用multiprocessing</p>\n<h2>（2）multiprocessing</h2>\n<p>代码如下：</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">multiprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">Process</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">run_prc</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"n\">age</span><span class=\"p\">,</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;子进程在运行中，name=</span><span class=\"si\">%s</span><span class=\"s1\">,age=</span><span class=\"si\">%s</span><span class=\"s1\">,pid=</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span><span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"n\">age</span><span class=\"p\">,</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">()))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;父进程pid=</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span><span class=\"o\">%</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">())</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Process</span><span class=\"p\">(</span><span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">run_prc</span><span class=\"p\">,</span> <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;test&#39;</span><span class=\"p\">,</span><span class=\"mi\">18</span><span class=\"p\">),</span> <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;m&#39;</span><span class=\"p\">:</span><span class=\"mi\">20</span><span class=\"p\">})</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;子进程将要开始执行&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">terminate</span><span class=\"p\">()</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;子进程结束&#39;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-a027f0ca242b559e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>\n<p>通过使用multiprocessing中的Process可以更好的控制进程数，省去的是对于底层进程的管理，更好的控制程序的逻辑，而且multiprocessing是跨平台的，fork无法在Windows中使用</p>\n<h2>（3）进程池</h2>\n<p>当使用fork时，会分出一个同时出现两个进程，这两个进程会保存当时程序进行到某一时刻点的数据状态。这样就会造成一个问题，假如用户请求的非常多，为了满足用户的请求，会使用Process创建多个进程，这样就会造成内存极大的占用，进程多了，也会造成CPU轮换进程速度的降低。从而出现性能瓶颈。所以这里采用了一个叫做进程池的方式来解决这个问题，进程池类似于人过河，假设有10个人要渡河，目前没法及时造出10艘船，可以先用现有的3艘船来轮番渡河。\n举例代码如下：</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">multiprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">Pool</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span><span class=\"o\">,</span><span class=\"nn\">time</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">work</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n<span class=\"n\">t_start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;用户</span><span class=\"si\">%s</span><span class=\"s1\">上传过河&#39;</span><span class=\"o\">%</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"n\">t_stop</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;耗时</span><span class=\"si\">%0.9f</span><span class=\"s1\">s&#39;</span><span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">t_stop</span><span class=\"o\">-</span><span class=\"n\">t_start</span><span class=\"p\">))</span>\n\n\n<span class=\"c1\">#在进程池中初始化3个进程</span>\n<span class=\"n\">po</span> <span class=\"o\">=</span> <span class=\"n\">Pool</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">):</span>\n<span class=\"c1\">#分配10个任务</span>\n<span class=\"n\">po</span><span class=\"o\">.</span><span class=\"n\">apply_async</span><span class=\"p\">(</span><span class=\"n\">work</span><span class=\"p\">,(</span><span class=\"n\">i</span><span class=\"p\">,))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;进程开始&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">po</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span><span class=\"c1\">#表示关闭，不再接受新的任务</span>\n<span class=\"n\">po</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;进程结束&#39;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p><img alt=\"\" src=\"http://upload-images.jianshu.io/upload_images/4665210-098bf4dc80d7188b.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" /></p>',1,0,1),(28,'Django常用小知识点','FangHao','2017-04-30 11:42:03',0,'## Django常用命令\r\n> 创建djngo项目\r\n\r\ndjango-admin startproject test1\r\n\r\n> 创建APP\r\n\r\npython manage.py startapp booktest\r\n\r\n> 启动项目\r\n\r\npython manage.py runserver ip:port\r\n\r\n> 生成迁移文件\r\n\r\npython manage.py makemigrations\r\n\r\n> 生成迁移\r\n\r\npython manage.py migrate\r\n\r\n> Django交互模式\r\n\r\npython manage.py shell\r\n\r\n> 创建管理员用户\r\n\r\npython manage.py createspueruser\r\n\r\n> 收集静态文件到指定路径\r\n\r\npython manage.py collectstatic\r\n\r\n## 常用setting文件配置\r\n\r\nDEBUG模式\r\n\r\n```python\r\n# 开发设置为True，生成改为False\r\nDEBUG = True\r\n\r\n# 生产改为ALLOWED_HOSTS = [\'*\']\r\nALLOWED_HOSTS = []\r\n```\r\n\r\n视图配置\r\n\r\n```python\r\nROOT_URLCONF = \'dailyfresh.urls\'\r\n```\r\n\r\n注册应用选项\r\n\r\n```python\r\nINSTALLED_APPS = (\r\n    \'django.contrib.admin\',\r\n    \'django.contrib.auth\',\r\n    \'django.contrib.contenttypes\',\r\n    \'django.contrib.sessions\',\r\n    \'django.contrib.messages\',\r\n    \'django.contrib.staticfiles\',\r\n    \'df_user\',\r\n    \'df_goods\',\r\n)\r\n```\r\n\r\n中间件\r\n\r\n```python\r\nMIDDLEWARE_CLASSES = (\r\n    \'django.contrib.sessions.middleware.SessionMiddleware\',\r\n    \'django.middleware.common.CommonMiddleware\',\r\n    \'django.middleware.csrf.CsrfViewMiddleware\',\r\n    \'django.contrib.auth.middleware.AuthenticationMiddleware\',\r\n    \'django.contrib.auth.middleware.SessionAuthenticationMiddleware\',\r\n    \'django.contrib.messages.middleware.MessageMiddleware\',\r\n    \'django.middleware.clickjacking.XFrameOptionsMiddleware\',\r\n    \'django.middleware.security.SecurityMiddleware\',\r\n)\r\n```\r\n\r\n模板文件地址\r\n\r\n```python\r\nTEMPLATES = [\r\n    {\r\n        \'BACKEND\': \'django.template.backends.django.DjangoTemplates\',\r\n        \'DIRS\': [os.path.join(BASE_DIR, \'templates\')],\r\n        \'APP_DIRS\': True,\r\n        \'OPTIONS\': {\r\n            \'context_processors\': [\r\n                \'django.template.context_processors.debug\',\r\n                \'django.template.context_processors.request\',\r\n                \'django.contrib.auth.context_processors.auth\',\r\n                \'django.contrib.messages.context_processors.messages\',\r\n            ],\r\n        },\r\n    },\r\n]\r\n```\r\n\r\n静态文件地址\r\n\r\n```python\r\nSTATIC_URL = \'/static/\'\r\nSTATICFILES_DIRS = [\r\n    os.path.join(BASE_DIR, \'static\'),\r\n]\r\n```\r\n\r\n数据库连接（MySQL）\r\n\r\n```python\r\nDATABASES = {\r\n    \'default\': {\r\n        \'ENGINE\': \'django.db.backends.mysql\',\r\n        \'NAME\': \'dailyfresh\',\r\n        \'USER\': \'root\',\r\n        \'PASSWORD\': \'mysql\',\r\n        \'HOST\': \'192.168.12.28\',\r\n        \'PORT\': \'3306\',\r\n    }\r\n}\r\n```\r\n\r\n语言与时区\r\n\r\n```python\r\nLANGUAGE_CODE = \'zh-Hans\'\r\n\r\nTIME_ZONE = \'Asia/Shanghai\'\r\n```\r\n\r\n\r\n## 模型\r\n- 模型类被定义在“应用/models.py”文件中，此例中为“booktest/models.py”文件\r\n\r\n- 模型类必须继承自Model类，位于包django.db.models中\r\n\r\n> 模型实例\r\n\r\n```python\r\nfrom django.db import models\r\n\r\n# Create your models here.\r\n\r\n\r\nclass TypeInfo(models.Model):\r\n    ttitle = models.CharField(max_length=20)\r\n    isDelete = models.BooleanField(default=False)\r\n\r\n    def __str__(self):\r\n        return self.ttitle.encode(\'utf-8\')\r\n\r\n\r\nclass GoodsInfoManager(models.Manager):\r\n    def get_queryset(self):\r\n        return super(GoodsInfoManager, self).get_queryset().filter(isDelete=False)\r\n\r\n\r\nclass GoodsInfo(models.Model):\r\n    gtitle = models.CharField(max_length=20)\r\n    gpic = models.ImageField(upload_to=\'goods\')\r\n    gprice = models.DecimalField(max_digits=5, decimal_places=2)\r\n    isDelete = models.BooleanField(default=False)\r\n    gunit = models.CharField(max_length=20, default=\'500g\')\r\n    gclick = models.IntegerField(default=0)\r\n    gjianjie = models.CharField(max_length=200)\r\n    gkucun = models.IntegerField()\r\n    gtype = models.ForeignKey(TypeInfo)\r\n\r\n    def __str__(self):\r\n        return self.gtitle.encode(\'utf-8\')\r\n\r\n    objects = GoodsInfoManager()\r\n```\r\n\r\n```python\r\nfrom django.db import models\r\n\r\n# Create your models here.\r\n\r\n\r\nclass CartInfo(models.Model):\r\n    user = models.ForeignKey(\'df_user.UserInfo\')\r\n    goods = models.ForeignKey(\'df_goods.GoodsInfo\')\r\n    count = models.IntegerField()\r\n```\r\n> 查询\r\n\r\n```python\r\nlist = BookInfo.books.filter(id=1)\r\nlist = BookInfo.books.filter(btitle__contains=\'传\')\r\nlist = BookInfo.books.filter(btitle__startswith=\'部\')\r\nlist = BookInfo.books.filter(btitle__endswith=\'部\')\r\nlist = BookInfo.books.filter(btitle__isnull=False)\r\nlist = BookInfo.books.filter(btitle__in=[1,3,5])\r\nlist = BookInfo.books.filter(btitle__gt=3)\r\nlist = BookInfo.books.exclude(id=3)\r\nlist = BookInfo.books.filter(bpud_date__year=1980)\r\nlist = BookInfo.books.filter(heroinfo__hcontent__contains=\'八\')\r\nlist = HeroInfo.objects.filter(hbook__btitle=\'天龙八部\')\r\n# F对象\r\nlist = BookInfo.books.filter(bread__gte=F(\'bcommet\'))\r\n# Q对象\r\nlist=BookInfo.books.filter(bread__gt=20,id__lt=3)\r\nlist=BookInfo.books.filter(bread__gt=20).filter(id__lt=3)\r\nlist = BookInfo.books.filter(~Q(pk=3))\r\n```\r\n```python\r\n# 关联查询\r\nbook=BookInfo.books.get(pk=1)\r\nbook.heroinfo_set.all()\r\n```\r\n\r\n## 视图\r\n\r\n> URLconf示例(daliyfresh/urls.py)\r\n\r\n```python\r\nfrom django.conf.urls import include, url\r\nfrom django.contrib import admin\r\nfrom df_goods import search_views\r\n\r\nurlpatterns = [\r\n    url(r\'^admin/\', include(admin.site.urls)),\r\n    url(r\'^user/\', include(\'df_user.urls\', namespace=\'user\')),\r\n    url(r\'^cart/\', include(\'df_cart.urls\', namespace=\'cart\')),\r\n    url(r\'^\', include(\'df_goods.urls\', namespace=\'goods\')),\r\n    url(r\'^order/\', include(\'df_order.urls\', namespace=\'order\')),\r\n    url(r\'^tinymce/\', include(\'tinymce.urls\')),\r\n    url(r\'^search/\', search_views.MySeachView(), name=\'haystack_search\'),\r\n]\r\n```\r\n\r\n> URLconf示例(df_cart/urls.py)\r\n\r\n```python\r\nfrom django.conf.urls import url\r\nfrom . import views\r\n\r\nurlpatterns = [\r\n    url(r\'^$\', views.cart),\r\n    url(r\'^addcart(\\d+)&(\\d+)/$\', views.addcart),\r\n    url(r\'^edit(\\d+)&(\\d+)/$\', views.edit),\r\n    url(r\'^del(\\d+)/$\', views.delcart),\r\n]\r\n\r\n```\r\n\r\n> Requset\r\n\r\n- 定义在django.http.QueryDict\r\n- HttpRequest对象的属性GET、POST都是QueryDict类型的对象\r\n- 与python字典不同，QueryDict类型的对象用来处理同一个键带有多个值的情况\r\n- 方法get()：根据键获取值\r\n- 如果一个键同时拥有多个值将获取最后一个值\r\n- 如果键不存在则返回None值，可以设置默认值进行后续处理 \r\n\r\n``` python\r\ndict.get(\'键\',默认值)\r\n可简写为\r\ndict[\'键\']\r\n```\r\n\r\n- 方法getlist()：根据键获取值，值以列表返回，可以获取指定键的所有值\r\n- 如果键不存在则返回空列表[]，可以设置默认值进行后续处理\r\n\r\n```python\r\ndict.getlist(\'键\',默认值)\r\n```\r\n\r\n> Response\r\n\r\n设置Cookie\r\n\r\n```python\r\nurl = request.COOKIES.get(\'url\', \'/\')\r\nredir = HttpResponseRedirect(url)\r\nredir.set_cookie(\'url\', \'\', max_age=-1)\r\n```\r\n\r\n设置Session\r\n\r\n- 通过HttpRequest对象的Session属性进行会话的读写操作\r\n- 以键值对的格式写会话\r\n\r\n```python\r\nrequest.session[\'键\']=值\r\n```\r\n\r\n- 根据键读取值\r\n\r\n```python\r\nrequest.session.get(\'键\',默认值)\r\n```\r\n- 清除所有会话，在存储中删除值部分\r\n\r\n```python\r\nrequest.session.clear()\r\n```\r\n- 清除会话数据，在存储中删除会话的整条数据\r\n\r\n```python\r\nrequest.session.flush()\r\n```\r\n- 删除会话中的指定键及值，在存储中只删除某个键及对应的值\r\n\r\n```python\r\ndel request.session[\'键\']\r\n```\r\n- 设置会话的超时时间，如果没有指定过期时间则两个星期后过期\r\n- 如果value是一个整数，会话将在value秒没有活动后过期\r\n- 如果value为0，那么用户会话的Cookie将在用户的浏览器关闭时过期\r\n- 如果value为None，那么会话永不过期\r\n\r\n```python\r\nrequest.session.set_expiry(value)\r\n```\r\n\r\n## 模板\r\n> 变量\r\n\r\n> 标签\r\n\r\n> 过滤器\r\n\r\n> 自定义过滤器\r\n\r\n- 在”booktest/templatetags“目录下创建filters.py文件，代码如下\r\n\r\n```python\r\n#coding=utf-8\r\n#引入注册对象\r\nfrom django.template import Library\r\nregister=Library()\r\n\r\n#使用装饰器进行注册\r\n@register.filter\r\n#定义求余函数mod，将value对2求余\r\ndef mod(value):\r\n    return value%2\r\n```\r\n\r\n- 在templates/booktest/guolvqi.html中，使用自定义过滤器\r\n- 首先使用load标签引入模块\r\n\r\n```html\r\n{%load filters%}\r\n```\r\n> 注释\r\n\r\n> 模板继承\r\n\r\n> HTML转义\r\n\r\n> CSRF\r\n\r\n> 反向解析','<h2>Django常用命令</h2>\n<blockquote>\n<p>创建djngo项目</p>\n</blockquote>\n<p>django-admin startproject test1</p>\n<blockquote>\n<p>创建APP</p>\n</blockquote>\n<p>python manage.py startapp booktest</p>\n<blockquote>\n<p>启动项目</p>\n</blockquote>\n<p>python manage.py runserver ip:port</p>\n<blockquote>\n<p>生成迁移文件</p>\n</blockquote>\n<p>python manage.py makemigrations</p>\n<blockquote>\n<p>生成迁移</p>\n</blockquote>\n<p>python manage.py migrate</p>\n<blockquote>\n<p>Django交互模式</p>\n</blockquote>\n<p>python manage.py shell</p>\n<blockquote>\n<p>创建管理员用户</p>\n</blockquote>\n<p>python manage.py createspueruser</p>\n<blockquote>\n<p>收集静态文件到指定路径</p>\n</blockquote>\n<p>python manage.py collectstatic</p>\n<h2>常用setting文件配置</h2>\n<p>DEBUG模式</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># 开发设置为True，生成改为False</span>\n<span class=\"n\">DEBUG</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n\n<span class=\"c1\"># 生产改为ALLOWED_HOSTS = [&#39;*&#39;]</span>\n<span class=\"n\">ALLOWED_HOSTS</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n</pre></div>\n\n\n<p>视图配置</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">ROOT_URLCONF</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;dailyfresh.urls&#39;</span>\n</pre></div>\n\n\n<p>注册应用选项</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s1\">&#39;django.contrib.admin&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;django.contrib.auth&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;django.contrib.contenttypes&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;django.contrib.sessions&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;django.contrib.messages&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;django.contrib.staticfiles&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;df_user&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;df_goods&#39;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre></div>\n\n\n<p>中间件</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">MIDDLEWARE_CLASSES</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s1\">&#39;django.contrib.sessions.middleware.SessionMiddleware&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;django.middleware.common.CommonMiddleware&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;django.middleware.csrf.CsrfViewMiddleware&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;django.contrib.auth.middleware.SessionAuthenticationMiddleware&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;django.contrib.messages.middleware.MessageMiddleware&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;django.middleware.security.SecurityMiddleware&#39;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre></div>\n\n\n<p>模板文件地址</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">TEMPLATES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;BACKEND&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;django.template.backends.django.DjangoTemplates&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;DIRS&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">BASE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">&#39;templates&#39;</span><span class=\"p\">)],</span>\n        <span class=\"s1\">&#39;APP_DIRS&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;OPTIONS&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;context_processors&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s1\">&#39;django.template.context_processors.debug&#39;</span><span class=\"p\">,</span>\n                <span class=\"s1\">&#39;django.template.context_processors.request&#39;</span><span class=\"p\">,</span>\n                <span class=\"s1\">&#39;django.contrib.auth.context_processors.auth&#39;</span><span class=\"p\">,</span>\n                <span class=\"s1\">&#39;django.contrib.messages.context_processors.messages&#39;</span><span class=\"p\">,</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">]</span>\n</pre></div>\n\n\n<p>静态文件地址</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">STATIC_URL</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/static/&#39;</span>\n<span class=\"n\">STATICFILES_DIRS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">BASE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">&#39;static&#39;</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</pre></div>\n\n\n<p>数据库连接（MySQL）</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;default&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;ENGINE&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;django.db.backends.mysql&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;NAME&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;dailyfresh&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;USER&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;root&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;PASSWORD&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;mysql&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;HOST&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;192.168.12.28&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;PORT&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;3306&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>语言与时区</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">LANGUAGE_CODE</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;zh-Hans&#39;</span>\n\n<span class=\"n\">TIME_ZONE</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Asia/Shanghai&#39;</span>\n</pre></div>\n\n\n<h2>模型</h2>\n<ul>\n<li>\n<p>模型类被定义在“应用/models.py”文件中，此例中为“booktest/models.py”文件</p>\n</li>\n<li>\n<p>模型类必须继承自Model类，位于包django.db.models中</p>\n</li>\n</ul>\n<blockquote>\n<p>模型实例</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"c1\"># Create your models here.</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TypeInfo</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">ttitle</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"n\">isDelete</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">BooleanField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ttitle</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">&#39;utf-8&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">GoodsInfoManager</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Manager</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_queryset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">GoodsInfoManager</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_queryset</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">isDelete</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">GoodsInfo</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">gtitle</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"n\">gpic</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ImageField</span><span class=\"p\">(</span><span class=\"n\">upload_to</span><span class=\"o\">=</span><span class=\"s1\">&#39;goods&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">gprice</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DecimalField</span><span class=\"p\">(</span><span class=\"n\">max_digits</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">decimal_places</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">isDelete</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">BooleanField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">gunit</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">&#39;500g&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">gclick</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">gjianjie</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n    <span class=\"n\">gkucun</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">()</span>\n    <span class=\"n\">gtype</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">TypeInfo</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">gtitle</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">&#39;utf-8&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">GoodsInfoManager</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"c1\"># Create your models here.</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CartInfo</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s1\">&#39;df_user.UserInfo&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">goods</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s1\">&#39;df_goods.GoodsInfo&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<blockquote>\n<p>查询</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"n\">BookInfo</span><span class=\"o\">.</span><span class=\"n\">books</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"n\">BookInfo</span><span class=\"o\">.</span><span class=\"n\">books</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">btitle__contains</span><span class=\"o\">=</span><span class=\"s1\">&#39;传&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"n\">BookInfo</span><span class=\"o\">.</span><span class=\"n\">books</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">btitle__startswith</span><span class=\"o\">=</span><span class=\"s1\">&#39;部&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"n\">BookInfo</span><span class=\"o\">.</span><span class=\"n\">books</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">btitle__endswith</span><span class=\"o\">=</span><span class=\"s1\">&#39;部&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"n\">BookInfo</span><span class=\"o\">.</span><span class=\"n\">books</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">btitle__isnull</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n<span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"n\">BookInfo</span><span class=\"o\">.</span><span class=\"n\">books</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">btitle__in</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"n\">BookInfo</span><span class=\"o\">.</span><span class=\"n\">books</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">btitle__gt</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"n\">BookInfo</span><span class=\"o\">.</span><span class=\"n\">books</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"n\">BookInfo</span><span class=\"o\">.</span><span class=\"n\">books</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">bpud_date__year</span><span class=\"o\">=</span><span class=\"mi\">1980</span><span class=\"p\">)</span>\n<span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"n\">BookInfo</span><span class=\"o\">.</span><span class=\"n\">books</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">heroinfo__hcontent__contains</span><span class=\"o\">=</span><span class=\"s1\">&#39;八&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"n\">HeroInfo</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">hbook__btitle</span><span class=\"o\">=</span><span class=\"s1\">&#39;天龙八部&#39;</span><span class=\"p\">)</span>\n<span class=\"c1\"># F对象</span>\n<span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"n\">BookInfo</span><span class=\"o\">.</span><span class=\"n\">books</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">bread__gte</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s1\">&#39;bcommet&#39;</span><span class=\"p\">))</span>\n<span class=\"c1\"># Q对象</span>\n<span class=\"nb\">list</span><span class=\"o\">=</span><span class=\"n\">BookInfo</span><span class=\"o\">.</span><span class=\"n\">books</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">bread__gt</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"n\">id__lt</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"nb\">list</span><span class=\"o\">=</span><span class=\"n\">BookInfo</span><span class=\"o\">.</span><span class=\"n\">books</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">bread__gt</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">id__lt</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"n\">BookInfo</span><span class=\"o\">.</span><span class=\"n\">books</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># 关联查询</span>\n<span class=\"n\">book</span><span class=\"o\">=</span><span class=\"n\">BookInfo</span><span class=\"o\">.</span><span class=\"n\">books</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">heroinfo_set</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<h2>视图</h2>\n<blockquote>\n<p>URLconf示例(daliyfresh/urls.py)</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">include</span><span class=\"p\">,</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">df_goods</span> <span class=\"kn\">import</span> <span class=\"n\">search_views</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;^admin/&#39;</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">urls</span><span class=\"p\">)),</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;^user/&#39;</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">&#39;df_user.urls&#39;</span><span class=\"p\">,</span> <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s1\">&#39;user&#39;</span><span class=\"p\">)),</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;^cart/&#39;</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">&#39;df_cart.urls&#39;</span><span class=\"p\">,</span> <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s1\">&#39;cart&#39;</span><span class=\"p\">)),</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;^&#39;</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">&#39;df_goods.urls&#39;</span><span class=\"p\">,</span> <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s1\">&#39;goods&#39;</span><span class=\"p\">)),</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;^order/&#39;</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">&#39;df_order.urls&#39;</span><span class=\"p\">,</span> <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s1\">&#39;order&#39;</span><span class=\"p\">)),</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;^tinymce/&#39;</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">&#39;tinymce.urls&#39;</span><span class=\"p\">)),</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;^search/&#39;</span><span class=\"p\">,</span> <span class=\"n\">search_views</span><span class=\"o\">.</span><span class=\"n\">MySeachView</span><span class=\"p\">(),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;haystack_search&#39;</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</pre></div>\n\n\n<blockquote>\n<p>URLconf示例(df_cart/urls.py)</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;^$&#39;</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">cart</span><span class=\"p\">),</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;^addcart(\\d+)&amp;(\\d+)/$&#39;</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">addcart</span><span class=\"p\">),</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;^edit(\\d+)&amp;(\\d+)/$&#39;</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">edit</span><span class=\"p\">),</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;^del(\\d+)/$&#39;</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">delcart</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</pre></div>\n\n\n<blockquote>\n<p>Requset</p>\n</blockquote>\n<ul>\n<li>定义在django.http.QueryDict</li>\n<li>HttpRequest对象的属性GET、POST都是QueryDict类型的对象</li>\n<li>与python字典不同，QueryDict类型的对象用来处理同一个键带有多个值的情况</li>\n<li>方法get()：根据键获取值</li>\n<li>如果一个键同时拥有多个值将获取最后一个值</li>\n<li>如果键不存在则返回None值，可以设置默认值进行后续处理 </li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"nb\">dict</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;键&#39;</span><span class=\"p\">,</span><span class=\"err\">默认值</span><span class=\"p\">)</span>\n<span class=\"err\">可简写为</span>\n<span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"s1\">&#39;键&#39;</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<ul>\n<li>方法getlist()：根据键获取值，值以列表返回，可以获取指定键的所有值</li>\n<li>如果键不存在则返回空列表[]，可以设置默认值进行后续处理</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"nb\">dict</span><span class=\"o\">.</span><span class=\"n\">getlist</span><span class=\"p\">(</span><span class=\"s1\">&#39;键&#39;</span><span class=\"p\">,</span><span class=\"err\">默认值</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<blockquote>\n<p>Response</p>\n</blockquote>\n<p>设置Cookie</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">COOKIES</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;url&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;/&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">redir</span> <span class=\"o\">=</span> <span class=\"n\">HttpResponseRedirect</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n<span class=\"n\">redir</span><span class=\"o\">.</span><span class=\"n\">set_cookie</span><span class=\"p\">(</span><span class=\"s1\">&#39;url&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"n\">max_age</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>设置Session</p>\n<ul>\n<li>通过HttpRequest对象的Session属性进行会话的读写操作</li>\n<li>以键值对的格式写会话</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s1\">&#39;键&#39;</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"err\">值</span>\n</pre></div>\n\n\n<ul>\n<li>根据键读取值</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;键&#39;</span><span class=\"p\">,</span><span class=\"err\">默认值</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<ul>\n<li>清除所有会话，在存储中删除值部分</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<ul>\n<li>清除会话数据，在存储中删除会话的整条数据</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<ul>\n<li>删除会话中的指定键及值，在存储中只删除某个键及对应的值</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">del</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s1\">&#39;键&#39;</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<ul>\n<li>设置会话的超时时间，如果没有指定过期时间则两个星期后过期</li>\n<li>如果value是一个整数，会话将在value秒没有活动后过期</li>\n<li>如果value为0，那么用户会话的Cookie将在用户的浏览器关闭时过期</li>\n<li>如果value为None，那么会话永不过期</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">set_expiry</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<h2>模板</h2>\n<blockquote>\n<p>变量</p>\n<p>标签</p>\n<p>过滤器</p>\n<p>自定义过滤器</p>\n</blockquote>\n<ul>\n<li>在”booktest/templatetags“目录下创建filters.py文件，代码如下</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"c1\">#引入注册对象</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.template</span> <span class=\"kn\">import</span> <span class=\"n\">Library</span>\n<span class=\"n\">register</span><span class=\"o\">=</span><span class=\"n\">Library</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#使用装饰器进行注册</span>\n<span class=\"nd\">@register.filter</span>\n<span class=\"c1\">#定义求余函数mod，将value对2求余</span>\n<span class=\"k\">def</span> <span class=\"nf\">mod</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"o\">%</span><span class=\"mi\">2</span>\n</pre></div>\n\n\n<ul>\n<li>在templates/booktest/guolvqi.html中，使用自定义过滤器</li>\n<li>首先使用load标签引入模块</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>{%load filters%}\n</pre></div>\n\n\n<blockquote>\n<p>注释</p>\n<p>模板继承</p>\n<p>HTML转义</p>\n<p>CSRF</p>\n<p>反向解析</p>\n</blockquote>',1,0,1),(29,'Docker笔记','FangHao','2017-05-03 21:29:43',0,'# Docker简介\n\n## 1、什么是容器（虚拟机通过中间层将一台或者多台虚拟机运行在物理硬件之上，容器直接运行在操作系统内核之上，容器也叫做操作系统虚拟化）\n\n依托Linux内核功能的虚拟化技术\n依赖于Linux内核特性，Namespace和Cgroups\n\n## 2、docker特点\n\n提供简单清亮的建模方式\n职责的逻辑分离\n职责的落地分离\n快速高效的开发生命周期\n鼓励使用面向服务的架构\n\n## 3、docker的使用场景\n\n使用docker容器开发、测试、部署服务（轻量 开发环境部署 提交至私有库 测试环境下载）\n创建隔离的运行环境（同一服务不同版本可能服务不同客户）\n搭建测试环境（学习成本下降）\n\n## 4、docker的基本组成\n\n### 客户端/守护进程\n> CS架构\n> \n> 本地/远程\n\n### 镜像（构建和打包阶段）\n> 容器的基石\n> \n> 层叠的只读文件系统\n\n1层，引导文件系统bootfs\n2层，root文件系统 加载更多的只读文件\n\n> 联合加载 指一次同时加载许多个文件系统，将各层文件系统叠加在一起，最终的文件将包含所有的底层文件和目录，docker将这样的文件系统称为镜像\n\n### 写实复制\n当一个容器启动时，docker会在最顶层加一个读写层，第一次启动的初始的读写层是空的，如果想修改文件，会先从制度成复制到读写层，只读层版本依然存在，创建一个新容器时，读写层+镜像=容器\n\n### 仓库\n> 公有（dockerHub）\n> \n> 私有\n\n## 5、Docker的主要特性如下\n> 文件系统隔离：每个进程容器运行在完全独立的根文件系统里\n> \n> 资源隔离：可以使用cgroup为每个进程容器分配不同的系统资源，例如cpu和内存\n> \n> 网络隔离：每个进程容器运行在自己的网络命名空间里，拥有自己的虚拟接口和IP地址\n> \n> 写实复制：采用写实复制方式创根文件系统，这让部署变得极其快捷，并且节省内存和硬盘空间。\n> \n> 日志记录：Docker将会收集和记录每个进程容器的标准流（stdout/stderr/stdin），用于实时检索或批量检索\n> \n> 变更管理：容器文件系统的变更可以提交至新的映像中，并可重复使用以创建更多的容器。无需使用模板或者手动配置。\n> \n> 交互式Shell：Docker可以分配一个虚拟终端并关联到任何容器的标准输入上，例如运行一个一次性交互shell\n\n\n## 6、Docker客户端和守护进程\nDocker守护进程\n\n```bash\nservice docker stop\nservice docker start\nservice docker restart\n\ndocker -d [options]\n# -d 以守护进程运行\n\n# 启动配置项\n/etc/default/docker\n\n# docker的启动选项\ntcp\nuninx\nsoketfd\n```\n\n## 7、Docker容器\n\n### 容器的基本操作\n\n```bash\ndocker run IMAGE [COMMAND][ARG...]\n# run在新容器中执行命令\n```\n```bash\ndocker run -i -t IMAGE /bin/bash\n# -i --interactive 为容器始终打开标准输入\n# -t --tty=true 创建一个伪tty终端\n# --name 自动以容器名字\n```\n\n查看容器\n\n```bash\ndocker ps [-a][-l]\n# 不指定参数默认返回正在运行的容器\n# -a列出所有容器\n# -l列出最新创建的一个容器\ndocker inspect [name][id]\n```\n\n重新启动已经停止的容器\n\n```bash\ndocker start [-i] 容器名\n```\n\n删除停止的容器\n\n```bash\ndocker rm [name][id]\n# -f 强制删除\n```\n\n### 守护式容器\n\n能够长期运行\n没有交互式回话\n使用运行应用程序和服务\nctrl+c/ctrl+p退出不影响\n\n```bash\ndocker run -d 镜像名 [COMMAND][ARG]\n# -d使用后台的方式启动\n```\n\n附加到运行中的容器\n\n```bash\ndocker attach ID/NAME\n```\n\n查看容器日志\n\n```bash\ndocker logs [-f][-t][--tail]\n# -f 一直跟踪日志变化并返回结果\n# -t 在返回结果上加上时间戳\n# --tail 返回结尾处多少数量的日志，默认返回所有\n```\n\n查看容器内进程\n\n```bash\ndocker top [name]\n```\n\n在运行中的容器内启动新的进程\n\n```bash\ndocker exec [-d][-i][-t] 容器名 [COMMAND][ARG...]\n```\n\n停止守护式容器\n\n```bash\ndocker stop 容器名 # 发送信号等待停止\ndocker kill 容器名 # 直接停止\n```\n\ndocker部署静态网站\n\n```bash\n# 端口映射\nrun [-P][-p]\n# -P 随机映射端口\n# -p 指定端口映射\n```\n\n### 镜像与仓库\n\n查看和删除镜像\n\n```bash\ndocker images [OPTIONS][REPOSITORY]\n# -a 显示所有镜像\n# -f 过滤条件\n# --no-trunc 不使用截断形式显示数据，默认是截断唯一id\n# -q 是显示唯一id\n\ndocker rmi [OPTIONS] IMAGE [IMAGES...]\n# -f 强制删除\n# --no-prue=false 保留未打开标签的父镜像\n\n# 删除所有镜像\ndocker rmi $(docker image -q)\n\n# 查看镜像的存储目录和文件\ntree /opt/data/registestry/repositories/\n```\n\n获取镜像\n\n```bash\n# 查找镜像\n# Docker Hub\ndocker search [OPTIONS] TEAM\n# --automated 只显示自动化构建的镜像\n# --no-trunc 不适用截断形式显示数据，默认是截断唯一id的\n# -s 限制显示结果的最低星级\n```\n\n拉取镜像\n\n```bash\ndocker pull\n# -a,--a-tags 将所有匹配标记的都下载\n\n# 使用--registty-mirror(提高下载速度)\n# 1.修改：/etc/default/docker\n# 2.添加：DOCKER_OPTS=\"--registry-mirror=本地镜像的连接\"\n```\n\n推送镜像\n\n```bash\ndocker push 镜像\n```\n\n构建镜像\n> 1.保存对容器的修改，并在此使用\n\n> 2.自定义容器的能力\n\n> 3.以软件的形式打包并分发服务及其运行环境\n\n```bash\ndocker commit # 通过容器构建\ndocker commit [OPTION] CONTAINER [REPOSITROY[:TAG]]\n\n# -a 指定镜像作者\n# -m 记录镜像的构建信息\n# -p 指示commit命令可以不暂停上传\n```\n\n```bash\ndocker build # 通过Dockerfile文件构建\n# 1.FROM\nFROM <image>\nFROM <image>:<tag>\n# 必须是已经存在的镜像\n\n# 2.MAINTAINER(作者信息)\n# 包含镜像的作者，所有者和联系信息\n\n# 3.RUN\n# 指定当前镜像中运行的命令\nRUN <command> (shell模式)\n\n# 4.CMD(容器运行时运行的)\n\n# 5.EXPOSE\n# 指定运行该镜像的容器使用的端口\n\n# 6.ENV\nENV REFERSH_DATE 2016-07-25(多次执行时，更改时间，则会带来此条以下命令刷新缓存)\n\n# 7.ADD(提供tar解压功能)\nADD <src> <dest>\n\n# 8.COPY(淡出能提供复制)\nCOPY <scr> <dest>\n\n# 9.ENTRYPOINT\n# 不会被docker run中的启动命令所覆盖\n\n# 10.VOLUME\nVOLUME[\"/data\"]\n# 向基于镜像创建的容器添加卷\n\n# 11.USER\n# 指定镜像会以什么样的用户运行（不指定用户默认以root）\n\n# 12.WORDIR\n# 从镜像创建一个新容器时，在容器内部设置工作目录\n\n# 13.ONBUILD\n# 镜像出发器（当一个镜像被其他镜像作为基础镜像时执行）\n```\n\n```bash\n# buil命令\ndocker build [OPTIONS] PATH |URL| -\n# --force-rm\n# --no-cache 跳过构建缓存\n# --pull\n# -q 不显示构建过程\n# --rm\n# -t\n```\n\n> Dockerfile构建过程\n\n1. 从基础镜像运行一个容器\n2. 指定一条命令，对容器作出修改\n3. 执行类似commit的操作，提交一个新的镜像层\n4. 再基于刚提交的镜像云心给一个新容器\n5. 执行Dockerfile中的下一条指令，直至所有的指令执行完毕\n\n> 构建缓存\n\n1. --no-cache 跳过构建缓存\n2. 查看镜像构建过程\n\n```bash\ndocker history [image]\n```\n\n## Docker容器的网络连接\n\n### Linux虚拟网桥（docker0）\n> 可以设置ip地址\n\n> 相当于拥有一个隐藏的虚拟网卡\n\n添加虚拟网桥\n\n```bash\nsudo brctl addbr br0\n```\n\n修改docker0地址\n\n```bash\nsudo ifconfig docker0 192.168.100.1 netmask 255.255.255.0\n```\n\n修改docker守护进程的启动配置\n\n```bash\n/etc/default/docker 中添加DOCKER_OPS值 -b=br0\n```\n\n重启守护进程\n\n### docker容器的互联\n\n```bash\n--icc=true #默认false（拒绝所有容器间的互联）\n--link\ndocker run --link=[CONTAINER_NAME]:[ALIAS][IMAGE][COMMOND0]\n\n# 允许特定的连接\n--icc=false\n--iptable=true\n--link\n```\n\n### docker容器与外部网络的连接\nip_forward\n> Linux系统的一个变量，值决定系统是否会转发流量\n> \n> sysctl net.ipv4.conf.all.forwarding = 1(允许流量转发)\n\niptables\n> iptables是基于Linux内核集成的包过滤防火墙系统，几乎所有的Linux发行版都会包含iptables的功能\n\n允许端口映射访问\n限制IP访问容器\n\n\n## 8、Docker容器的数据卷\n\n### 什么是数据卷（Data Volume）\n数据卷设计的目的，在于数据的持久化，它完全独立于容器的生成周期，因此Docker不会再容器删除时删除其挂在的数据卷，也不会存在类似垃圾回收机制，对容器医用的数据卷进行处理\n> docker的数据卷是独立于docker的存在，它存在于docker host，与docker容器的生成周期分离\n> \n> docker数据卷存在于docker宿主机的文件系统\n> \n> docker数据卷可以使目录页可以使用文件\n> \n> docker容器可以利用数据卷的技术与宿主机进行数据共享\n> \n> 同一目录或者文件可以支持多个容器访问，实现了容器间数据的共享和交换\n\n### 数据卷的特点\n> 数据卷在容器启动时初始化，如果容器在使用镜像挂在点包含了数据，这些数据会拷贝至初始化的数据卷中。\n> \n> 数据卷可以在容器里的内容直接进行修改\n> \n> 数据卷的变化不会影响镜像的更新\n> \n> 卷会一直存在，即使挂载的容器已经被删除\n\n### 为容器添加数据卷\n\n```bash\ndocker run -v 本机目录：容器映射目录名 -it ubuntu /bin/bash\n```\n\n### docker的数据卷容器\n命令的容器挂载数据卷，其他容器通过挂载这个容器实现数据共享，挂载数据卷的容器，就叫做数据卷容器\n\n> 挂载数据卷容器的方法\n\n```bash\ndocker run --volume-from [CONTAINER NAME]\n```\n在docker中，如果一个数据卷还在被容器使用，它就会一直存在。使用数据卷容器挂载数据，实际上此容器起到的作用，仅仅是将数据卷的配置传递到新容器中。\n\n### docker数据卷的备份还原操作（ubuntu）\n\n> 数据备份方法\n\n```bash\n# 需要备份容器name，存放的本地backup目录\ndocker run --volumes-from [container name] -v$(pwd):backup ubuntu\ntar cvf /backup/backup.tar [container data volume] # 需要备份的目录\n```\n\n> 数据还原方法\n\n```bash\n# 需要还原的容器name，存放的本地backup目录\ndocker run --volume-from [container name] v$(pwd):backup ubuntu\ntar xvf /backup/backup.tar [container data volume] # 还原的目录\n```\n','<h1>Docker简介</h1>\n<h2>1、什么是容器（虚拟机通过中间层将一台或者多台虚拟机运行在物理硬件之上，容器直接运行在操作系统内核之上，容器也叫做操作系统虚拟化）</h2>\n<p>依托Linux内核功能的虚拟化技术\n依赖于Linux内核特性，Namespace和Cgroups</p>\n<h2>2、docker特点</h2>\n<p>提供简单清亮的建模方式\n职责的逻辑分离\n职责的落地分离\n快速高效的开发生命周期\n鼓励使用面向服务的架构</p>\n<h2>3、docker的使用场景</h2>\n<p>使用docker容器开发、测试、部署服务（轻量 开发环境部署 提交至私有库 测试环境下载）\n创建隔离的运行环境（同一服务不同版本可能服务不同客户）\n搭建测试环境（学习成本下降）</p>\n<h2>4、docker的基本组成</h2>\n<h3>客户端/守护进程</h3>\n<blockquote>\n<p>CS架构</p>\n<p>本地/远程</p>\n</blockquote>\n<h3>镜像（构建和打包阶段）</h3>\n<blockquote>\n<p>容器的基石</p>\n<p>层叠的只读文件系统</p>\n</blockquote>\n<p>1层，引导文件系统bootfs\n2层，root文件系统 加载更多的只读文件</p>\n<blockquote>\n<p>联合加载 指一次同时加载许多个文件系统，将各层文件系统叠加在一起，最终的文件将包含所有的底层文件和目录，docker将这样的文件系统称为镜像</p>\n</blockquote>\n<h3>写实复制</h3>\n<p>当一个容器启动时，docker会在最顶层加一个读写层，第一次启动的初始的读写层是空的，如果想修改文件，会先从制度成复制到读写层，只读层版本依然存在，创建一个新容器时，读写层+镜像=容器</p>\n<h3>仓库</h3>\n<blockquote>\n<p>公有（dockerHub）</p>\n<p>私有</p>\n</blockquote>\n<h2>5、Docker的主要特性如下</h2>\n<blockquote>\n<p>文件系统隔离：每个进程容器运行在完全独立的根文件系统里</p>\n<p>资源隔离：可以使用cgroup为每个进程容器分配不同的系统资源，例如cpu和内存</p>\n<p>网络隔离：每个进程容器运行在自己的网络命名空间里，拥有自己的虚拟接口和IP地址</p>\n<p>写实复制：采用写实复制方式创根文件系统，这让部署变得极其快捷，并且节省内存和硬盘空间。</p>\n<p>日志记录：Docker将会收集和记录每个进程容器的标准流（stdout/stderr/stdin），用于实时检索或批量检索</p>\n<p>变更管理：容器文件系统的变更可以提交至新的映像中，并可重复使用以创建更多的容器。无需使用模板或者手动配置。</p>\n<p>交互式Shell：Docker可以分配一个虚拟终端并关联到任何容器的标准输入上，例如运行一个一次性交互shell</p>\n</blockquote>\n<h2>6、Docker客户端和守护进程</h2>\n<p>Docker守护进程</p>\n<div class=\"codehilite\"><pre><span></span>service docker stop\nservice docker start\nservice docker restart\n\ndocker -d <span class=\"o\">[</span>options<span class=\"o\">]</span>\n<span class=\"c1\"># -d 以守护进程运行</span>\n\n<span class=\"c1\"># 启动配置项</span>\n/etc/default/docker\n\n<span class=\"c1\"># docker的启动选项</span>\ntcp\nuninx\nsoketfd\n</pre></div>\n\n\n<h2>7、Docker容器</h2>\n<h3>容器的基本操作</h3>\n<div class=\"codehilite\"><pre><span></span>docker run IMAGE <span class=\"o\">[</span>COMMAND<span class=\"o\">][</span>ARG...<span class=\"o\">]</span>\n<span class=\"c1\"># run在新容器中执行命令</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>docker run -i -t IMAGE /bin/bash\n<span class=\"c1\"># -i --interactive 为容器始终打开标准输入</span>\n<span class=\"c1\"># -t --tty=true 创建一个伪tty终端</span>\n<span class=\"c1\"># --name 自动以容器名字</span>\n</pre></div>\n\n\n<p>查看容器</p>\n<div class=\"codehilite\"><pre><span></span>docker ps <span class=\"o\">[</span>-a<span class=\"o\">][</span>-l<span class=\"o\">]</span>\n<span class=\"c1\"># 不指定参数默认返回正在运行的容器</span>\n<span class=\"c1\"># -a列出所有容器</span>\n<span class=\"c1\"># -l列出最新创建的一个容器</span>\ndocker inspect <span class=\"o\">[</span>name<span class=\"o\">][</span>id<span class=\"o\">]</span>\n</pre></div>\n\n\n<p>重新启动已经停止的容器</p>\n<div class=\"codehilite\"><pre><span></span>docker start <span class=\"o\">[</span>-i<span class=\"o\">]</span> 容器名\n</pre></div>\n\n\n<p>删除停止的容器</p>\n<div class=\"codehilite\"><pre><span></span>docker rm <span class=\"o\">[</span>name<span class=\"o\">][</span>id<span class=\"o\">]</span>\n<span class=\"c1\"># -f 强制删除</span>\n</pre></div>\n\n\n<h3>守护式容器</h3>\n<p>能够长期运行\n没有交互式回话\n使用运行应用程序和服务\nctrl+c/ctrl+p退出不影响</p>\n<div class=\"codehilite\"><pre><span></span>docker run -d 镜像名 <span class=\"o\">[</span>COMMAND<span class=\"o\">][</span>ARG<span class=\"o\">]</span>\n<span class=\"c1\"># -d使用后台的方式启动</span>\n</pre></div>\n\n\n<p>附加到运行中的容器</p>\n<div class=\"codehilite\"><pre><span></span>docker attach ID/NAME\n</pre></div>\n\n\n<p>查看容器日志</p>\n<div class=\"codehilite\"><pre><span></span>docker logs <span class=\"o\">[</span>-f<span class=\"o\">][</span>-t<span class=\"o\">][</span>--tail<span class=\"o\">]</span>\n<span class=\"c1\"># -f 一直跟踪日志变化并返回结果</span>\n<span class=\"c1\"># -t 在返回结果上加上时间戳</span>\n<span class=\"c1\"># --tail 返回结尾处多少数量的日志，默认返回所有</span>\n</pre></div>\n\n\n<p>查看容器内进程</p>\n<div class=\"codehilite\"><pre><span></span>docker top <span class=\"o\">[</span>name<span class=\"o\">]</span>\n</pre></div>\n\n\n<p>在运行中的容器内启动新的进程</p>\n<div class=\"codehilite\"><pre><span></span>docker <span class=\"nb\">exec</span> <span class=\"o\">[</span>-d<span class=\"o\">][</span>-i<span class=\"o\">][</span>-t<span class=\"o\">]</span> 容器名 <span class=\"o\">[</span>COMMAND<span class=\"o\">][</span>ARG...<span class=\"o\">]</span>\n</pre></div>\n\n\n<p>停止守护式容器</p>\n<div class=\"codehilite\"><pre><span></span>docker stop 容器名 <span class=\"c1\"># 发送信号等待停止</span>\ndocker <span class=\"nb\">kill</span> 容器名 <span class=\"c1\"># 直接停止</span>\n</pre></div>\n\n\n<p>docker部署静态网站</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># 端口映射</span>\nrun <span class=\"o\">[</span>-P<span class=\"o\">][</span>-p<span class=\"o\">]</span>\n<span class=\"c1\"># -P 随机映射端口</span>\n<span class=\"c1\"># -p 指定端口映射</span>\n</pre></div>\n\n\n<h3>镜像与仓库</h3>\n<p>查看和删除镜像</p>\n<div class=\"codehilite\"><pre><span></span>docker images <span class=\"o\">[</span>OPTIONS<span class=\"o\">][</span>REPOSITORY<span class=\"o\">]</span>\n<span class=\"c1\"># -a 显示所有镜像</span>\n<span class=\"c1\"># -f 过滤条件</span>\n<span class=\"c1\"># --no-trunc 不使用截断形式显示数据，默认是截断唯一id</span>\n<span class=\"c1\"># -q 是显示唯一id</span>\n\ndocker rmi <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> IMAGE <span class=\"o\">[</span>IMAGES...<span class=\"o\">]</span>\n<span class=\"c1\"># -f 强制删除</span>\n<span class=\"c1\"># --no-prue=false 保留未打开标签的父镜像</span>\n\n<span class=\"c1\"># 删除所有镜像</span>\ndocker rmi <span class=\"k\">$(</span>docker image -q<span class=\"k\">)</span>\n\n<span class=\"c1\"># 查看镜像的存储目录和文件</span>\ntree /opt/data/registestry/repositories/\n</pre></div>\n\n\n<p>获取镜像</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># 查找镜像</span>\n<span class=\"c1\"># Docker Hub</span>\ndocker search <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> TEAM\n<span class=\"c1\"># --automated 只显示自动化构建的镜像</span>\n<span class=\"c1\"># --no-trunc 不适用截断形式显示数据，默认是截断唯一id的</span>\n<span class=\"c1\"># -s 限制显示结果的最低星级</span>\n</pre></div>\n\n\n<p>拉取镜像</p>\n<div class=\"codehilite\"><pre><span></span>docker pull\n<span class=\"c1\"># -a,--a-tags 将所有匹配标记的都下载</span>\n\n<span class=\"c1\"># 使用--registty-mirror(提高下载速度)</span>\n<span class=\"c1\"># 1.修改：/etc/default/docker</span>\n<span class=\"c1\"># 2.添加：DOCKER_OPTS=&quot;--registry-mirror=本地镜像的连接&quot;</span>\n</pre></div>\n\n\n<p>推送镜像</p>\n<div class=\"codehilite\"><pre><span></span>docker push 镜像\n</pre></div>\n\n\n<p>构建镜像</p>\n<blockquote>\n<p>1.保存对容器的修改，并在此使用</p>\n<p>2.自定义容器的能力</p>\n<p>3.以软件的形式打包并分发服务及其运行环境</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span>docker commit <span class=\"c1\"># 通过容器构建</span>\ndocker commit <span class=\"o\">[</span>OPTION<span class=\"o\">]</span> CONTAINER <span class=\"o\">[</span>REPOSITROY<span class=\"o\">[</span>:TAG<span class=\"o\">]]</span>\n\n<span class=\"c1\"># -a 指定镜像作者</span>\n<span class=\"c1\"># -m 记录镜像的构建信息</span>\n<span class=\"c1\"># -p 指示commit命令可以不暂停上传</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>docker build <span class=\"c1\"># 通过Dockerfile文件构建</span>\n<span class=\"c1\"># 1.FROM</span>\nFROM &lt;image&gt;\nFROM &lt;image&gt;:&lt;tag&gt;\n<span class=\"c1\"># 必须是已经存在的镜像</span>\n\n<span class=\"c1\"># 2.MAINTAINER(作者信息)</span>\n<span class=\"c1\"># 包含镜像的作者，所有者和联系信息</span>\n\n<span class=\"c1\"># 3.RUN</span>\n<span class=\"c1\"># 指定当前镜像中运行的命令</span>\nRUN &lt;command&gt; <span class=\"o\">(</span>shell模式<span class=\"o\">)</span>\n\n<span class=\"c1\"># 4.CMD(容器运行时运行的)</span>\n\n<span class=\"c1\"># 5.EXPOSE</span>\n<span class=\"c1\"># 指定运行该镜像的容器使用的端口</span>\n\n<span class=\"c1\"># 6.ENV</span>\nENV REFERSH_DATE <span class=\"m\">2016</span>-07-25<span class=\"o\">(</span>多次执行时，更改时间，则会带来此条以下命令刷新缓存<span class=\"o\">)</span>\n\n<span class=\"c1\"># 7.ADD(提供tar解压功能)</span>\nADD &lt;src&gt; &lt;dest&gt;\n\n<span class=\"c1\"># 8.COPY(淡出能提供复制)</span>\nCOPY &lt;scr&gt; &lt;dest&gt;\n\n<span class=\"c1\"># 9.ENTRYPOINT</span>\n<span class=\"c1\"># 不会被docker run中的启动命令所覆盖</span>\n\n<span class=\"c1\"># 10.VOLUME</span>\nVOLUME<span class=\"o\">[</span><span class=\"s2\">&quot;/data&quot;</span><span class=\"o\">]</span>\n<span class=\"c1\"># 向基于镜像创建的容器添加卷</span>\n\n<span class=\"c1\"># 11.USER</span>\n<span class=\"c1\"># 指定镜像会以什么样的用户运行（不指定用户默认以root）</span>\n\n<span class=\"c1\"># 12.WORDIR</span>\n<span class=\"c1\"># 从镜像创建一个新容器时，在容器内部设置工作目录</span>\n\n<span class=\"c1\"># 13.ONBUILD</span>\n<span class=\"c1\"># 镜像出发器（当一个镜像被其他镜像作为基础镜像时执行）</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># buil命令</span>\ndocker build <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> PATH <span class=\"p\">|</span>URL<span class=\"p\">|</span> -\n<span class=\"c1\"># --force-rm</span>\n<span class=\"c1\"># --no-cache 跳过构建缓存</span>\n<span class=\"c1\"># --pull</span>\n<span class=\"c1\"># -q 不显示构建过程</span>\n<span class=\"c1\"># --rm</span>\n<span class=\"c1\"># -t</span>\n</pre></div>\n\n\n<blockquote>\n<p>Dockerfile构建过程</p>\n</blockquote>\n<ol>\n<li>从基础镜像运行一个容器</li>\n<li>指定一条命令，对容器作出修改</li>\n<li>执行类似commit的操作，提交一个新的镜像层</li>\n<li>再基于刚提交的镜像云心给一个新容器</li>\n<li>执行Dockerfile中的下一条指令，直至所有的指令执行完毕</li>\n</ol>\n<blockquote>\n<p>构建缓存</p>\n</blockquote>\n<ol>\n<li>--no-cache 跳过构建缓存</li>\n<li>查看镜像构建过程</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span>docker <span class=\"nb\">history</span> <span class=\"o\">[</span>image<span class=\"o\">]</span>\n</pre></div>\n\n\n<h2>Docker容器的网络连接</h2>\n<h3>Linux虚拟网桥（docker0）</h3>\n<blockquote>\n<p>可以设置ip地址</p>\n<p>相当于拥有一个隐藏的虚拟网卡</p>\n</blockquote>\n<p>添加虚拟网桥</p>\n<div class=\"codehilite\"><pre><span></span>sudo brctl addbr br0\n</pre></div>\n\n\n<p>修改docker0地址</p>\n<div class=\"codehilite\"><pre><span></span>sudo ifconfig docker0 <span class=\"m\">192</span>.168.100.1 netmask <span class=\"m\">255</span>.255.255.0\n</pre></div>\n\n\n<p>修改docker守护进程的启动配置</p>\n<div class=\"codehilite\"><pre><span></span>/etc/default/docker 中添加DOCKER_OPS值 -b<span class=\"o\">=</span>br0\n</pre></div>\n\n\n<p>重启守护进程</p>\n<h3>docker容器的互联</h3>\n<div class=\"codehilite\"><pre><span></span>--icc<span class=\"o\">=</span><span class=\"nb\">true</span> <span class=\"c1\">#默认false（拒绝所有容器间的互联）</span>\n--link\ndocker run --link<span class=\"o\">=[</span>CONTAINER_NAME<span class=\"o\">]</span>:<span class=\"o\">[</span>ALIAS<span class=\"o\">][</span>IMAGE<span class=\"o\">][</span>COMMOND0<span class=\"o\">]</span>\n\n<span class=\"c1\"># 允许特定的连接</span>\n--icc<span class=\"o\">=</span><span class=\"nb\">false</span>\n--iptable<span class=\"o\">=</span><span class=\"nb\">true</span>\n--link\n</pre></div>\n\n\n<h3>docker容器与外部网络的连接</h3>\n<p>ip_forward</p>\n<blockquote>\n<p>Linux系统的一个变量，值决定系统是否会转发流量</p>\n<p>sysctl net.ipv4.conf.all.forwarding = 1(允许流量转发)</p>\n</blockquote>\n<p>iptables</p>\n<blockquote>\n<p>iptables是基于Linux内核集成的包过滤防火墙系统，几乎所有的Linux发行版都会包含iptables的功能</p>\n</blockquote>\n<p>允许端口映射访问\n限制IP访问容器</p>\n<h2>8、Docker容器的数据卷</h2>\n<h3>什么是数据卷（Data Volume）</h3>\n<p>数据卷设计的目的，在于数据的持久化，它完全独立于容器的生成周期，因此Docker不会再容器删除时删除其挂在的数据卷，也不会存在类似垃圾回收机制，对容器医用的数据卷进行处理</p>\n<blockquote>\n<p>docker的数据卷是独立于docker的存在，它存在于docker host，与docker容器的生成周期分离</p>\n<p>docker数据卷存在于docker宿主机的文件系统</p>\n<p>docker数据卷可以使目录页可以使用文件</p>\n<p>docker容器可以利用数据卷的技术与宿主机进行数据共享</p>\n<p>同一目录或者文件可以支持多个容器访问，实现了容器间数据的共享和交换</p>\n</blockquote>\n<h3>数据卷的特点</h3>\n<blockquote>\n<p>数据卷在容器启动时初始化，如果容器在使用镜像挂在点包含了数据，这些数据会拷贝至初始化的数据卷中。</p>\n<p>数据卷可以在容器里的内容直接进行修改</p>\n<p>数据卷的变化不会影响镜像的更新</p>\n<p>卷会一直存在，即使挂载的容器已经被删除</p>\n</blockquote>\n<h3>为容器添加数据卷</h3>\n<div class=\"codehilite\"><pre><span></span>docker run -v 本机目录：容器映射目录名 -it ubuntu /bin/bash\n</pre></div>\n\n\n<h3>docker的数据卷容器</h3>\n<p>命令的容器挂载数据卷，其他容器通过挂载这个容器实现数据共享，挂载数据卷的容器，就叫做数据卷容器</p>\n<blockquote>\n<p>挂载数据卷容器的方法</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span>docker run --volume-from <span class=\"o\">[</span>CONTAINER NAME<span class=\"o\">]</span>\n</pre></div>\n\n\n<p>在docker中，如果一个数据卷还在被容器使用，它就会一直存在。使用数据卷容器挂载数据，实际上此容器起到的作用，仅仅是将数据卷的配置传递到新容器中。</p>\n<h3>docker数据卷的备份还原操作（ubuntu）</h3>\n<blockquote>\n<p>数据备份方法</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># 需要备份容器name，存放的本地backup目录</span>\ndocker run --volumes-from <span class=\"o\">[</span>container name<span class=\"o\">]</span> -v<span class=\"k\">$(</span><span class=\"nb\">pwd</span><span class=\"k\">)</span>:backup ubuntu\ntar cvf /backup/backup.tar <span class=\"o\">[</span>container data volume<span class=\"o\">]</span> <span class=\"c1\"># 需要备份的目录</span>\n</pre></div>\n\n\n<blockquote>\n<p>数据还原方法</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># 需要还原的容器name，存放的本地backup目录</span>\ndocker run --volume-from <span class=\"o\">[</span>container name<span class=\"o\">]</span> v<span class=\"k\">$(</span><span class=\"nb\">pwd</span><span class=\"k\">)</span>:backup ubuntu\ntar xvf /backup/backup.tar <span class=\"o\">[</span>container data volume<span class=\"o\">]</span> <span class=\"c1\"># 还原的目录</span>\n</pre></div>',1,0,1),(30,'Ajax小示例','FangHao','2017-05-03 21:43:27',0,'###以前用的Ajax实例，以后用的时候可以仿照写\r\n\r\n> JS部分\r\n\r\n```javascript\r\n   /* 下订单触发click事件，用来校验订单是否下成功，根据AJAX返回值展示不同页面*/\r\n   $(\'#order_btn\').click(function(){\r\n     orderid = []\r\n     $(\'.goods_list_td\').each(function(){\r\n       orderid.push($(this).attr(\'id\'));\r\n     });\r\n     localStorage.setItem(\'order_finish\',2);\r\n     $.post({\r\n       url:\'/order/addorder/\',\r\n       dataType:\'json\',\r\n       type:\'POST\',\r\n       data:{\r\n         \'csrfmiddlewaretoken\': \'{{ csrf_token }}\',\r\n         id:orderid,\r\n         total:totalPay,\r\n         address:$(\'#oaddress\').text(),\r\n       },\r\n     })\r\n      .done(function(data){\r\n        if(data.status == 1){\r\n          $(\'.popup_con p\').text(\'订单提交成功！\');\r\n          $(\'.popup_con\').fadeIn(\'fast\', function() {\r\n            setTimeout(function(){\r\n              $(\'.popup_con\').fadeOut(\'fast\',function(){\r\n	        window.location.href = \'/user/user_center_order&1/\';\r\n              });	\r\n            },3000)  \r\n          });\r\n        }\r\n        else if(data.status == 2){\r\n          $(\'.popup_con p\').text(\'超出库存请修改！\');\r\n          $(\'.popup_con\').fadeIn(\'fast\', function() {\r\n            setTimeout(function(){\r\n              $(\'.popup_con\').fadeOut(\'fast\',function(){\r\n	        window.location.href = \'/cart/\';\r\n              });	\r\n            },3000)  \r\n          });\r\n        }\r\n      });\r\n     \r\n   });\r\n```\r\n\r\n> Python代码\r\n\r\n```python\r\ndef addorder(request):\r\n    \"\"\"\r\n    下订单功能\r\n    1）根据页面上AJAX传来的请求，依次将价格、地址、用户id、时间保存为一条订单数据，订单id由时间构建\r\n    2）由order函数传的orderlist，由place_order.html页面的JS构造成数组传到本视图，重新getlist解析为列表\r\n       作为订单详情页中购物车中的每个商品\r\n    3）根据步骤2）中得到的详细商品列表，构造订单详细信息表，减去相应的库存数量\r\n    4）步骤3）执行后删除购物车中的信息\r\n    \"\"\"\r\n\r\n    # 设置事务点，发生异常后回滚到此处\r\n    tran_id = transaction.savepoint()\r\n\r\n    # 根据POST和session获取信息\r\n    post = request.POST\r\n    orderlist = post.getlist(\'id[]\')\r\n    total = post.get(\'total\')\r\n    address = post.get(\'address\')\r\n    uid = request.session.get(\'userid\')\r\n    time = datetime.now()\r\n\r\n    # 创建订单表\r\n    order = OrderInfo()\r\n    order.oid = \'%s%d\' % (time.strftime(\'%Y%m%d%H%M%S\'), uid)\r\n    order.user_id = uid\r\n    order.odate = time\r\n    order.ototal = Decimal(total)\r\n    order.oaddress = address\r\n    order.save()\r\n\r\n    # 遍历购物车中提交信息，创建订单详情表\r\n    for orderid in orderlist:\r\n        cartinfo = CartInfo.objects.get(id=orderid)\r\n        good = GoodsInfo.objects.get(cartinfo__id=cartinfo.id)\r\n\r\n        # 判断库存是否够\r\n        if int(good.gkucun) >= int(cartinfo.count):\r\n            # 库存够，移除购买数量并保存\r\n            good.gkucun -= int(cartinfo.count)\r\n            good.save()\r\n\r\n            goodinfo = GoodsInfo.objects.get(cartinfo__id=orderid)\r\n\r\n            # 创建订单详情表\r\n            detailinfo = OrderDetailInfo()\r\n            detailinfo.goods_id = int(goodinfo.id)\r\n            detailinfo.order_id = int(order.oid)\r\n            detailinfo.price = Decimal(int(goodinfo.gprice))\r\n            detailinfo.count = int(cartinfo.count)\r\n            detailinfo.save()\r\n\r\n            # 循环删除购物车对象\r\n            cartinfo.delete()\r\n        else:\r\n            # 库存不够出发事务回滚\r\n            transaction.savepoint_rollback(tran_id)\r\n            # 返回json供前台提示失败\r\n            return JsonResponse({\'status\': 2})\r\n\r\n    # 返回json供前台提示成功\r\n    return JsonResponse({\'status\': 1})\r\n```','<h3>以前用的Ajax实例，以后用的时候可以仿照写</h3>\n<blockquote>\n<p>JS部分</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span>   <span class=\"cm\">/* 下订单触发click事件，用来校验订单是否下成功，根据AJAX返回值展示不同页面*/</span>\n   <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">&#39;#order_btn&#39;</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n     <span class=\"nx\">orderid</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n     <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">&#39;.goods_list_td&#39;</span><span class=\"p\">).</span><span class=\"nx\">each</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n       <span class=\"nx\">orderid</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">).</span><span class=\"nx\">attr</span><span class=\"p\">(</span><span class=\"s1\">&#39;id&#39;</span><span class=\"p\">));</span>\n     <span class=\"p\">});</span>\n     <span class=\"nx\">localStorage</span><span class=\"p\">.</span><span class=\"nx\">setItem</span><span class=\"p\">(</span><span class=\"s1\">&#39;order_finish&#39;</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n     <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">({</span>\n       <span class=\"nx\">url</span><span class=\"o\">:</span><span class=\"s1\">&#39;/order/addorder/&#39;</span><span class=\"p\">,</span>\n       <span class=\"nx\">dataType</span><span class=\"o\">:</span><span class=\"s1\">&#39;json&#39;</span><span class=\"p\">,</span>\n       <span class=\"nx\">type</span><span class=\"o\">:</span><span class=\"s1\">&#39;POST&#39;</span><span class=\"p\">,</span>\n       <span class=\"nx\">data</span><span class=\"o\">:</span><span class=\"p\">{</span>\n         <span class=\"s1\">&#39;csrfmiddlewaretoken&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;{{ csrf_token }}&#39;</span><span class=\"p\">,</span>\n         <span class=\"nx\">id</span><span class=\"o\">:</span><span class=\"nx\">orderid</span><span class=\"p\">,</span>\n         <span class=\"nx\">total</span><span class=\"o\">:</span><span class=\"nx\">totalPay</span><span class=\"p\">,</span>\n         <span class=\"nx\">address</span><span class=\"o\">:</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">&#39;#oaddress&#39;</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">(),</span>\n       <span class=\"p\">},</span>\n     <span class=\"p\">})</span>\n      <span class=\"p\">.</span><span class=\"nx\">done</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">){</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">){</span>\n          <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">&#39;.popup_con p&#39;</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">(</span><span class=\"s1\">&#39;订单提交成功！&#39;</span><span class=\"p\">);</span>\n          <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">&#39;.popup_con&#39;</span><span class=\"p\">).</span><span class=\"nx\">fadeIn</span><span class=\"p\">(</span><span class=\"s1\">&#39;fast&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n              <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">&#39;.popup_con&#39;</span><span class=\"p\">).</span><span class=\"nx\">fadeOut</span><span class=\"p\">(</span><span class=\"s1\">&#39;fast&#39;</span><span class=\"p\">,</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n            <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">href</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/user/user_center_order&amp;1/&#39;</span><span class=\"p\">;</span>\n              <span class=\"p\">});</span>   \n            <span class=\"p\">},</span><span class=\"mi\">3000</span><span class=\"p\">)</span>  \n          <span class=\"p\">});</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">){</span>\n          <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">&#39;.popup_con p&#39;</span><span class=\"p\">).</span><span class=\"nx\">text</span><span class=\"p\">(</span><span class=\"s1\">&#39;超出库存请修改！&#39;</span><span class=\"p\">);</span>\n          <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">&#39;.popup_con&#39;</span><span class=\"p\">).</span><span class=\"nx\">fadeIn</span><span class=\"p\">(</span><span class=\"s1\">&#39;fast&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n              <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">&#39;.popup_con&#39;</span><span class=\"p\">).</span><span class=\"nx\">fadeOut</span><span class=\"p\">(</span><span class=\"s1\">&#39;fast&#39;</span><span class=\"p\">,</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n            <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">href</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/cart/&#39;</span><span class=\"p\">;</span>\n              <span class=\"p\">});</span>   \n            <span class=\"p\">},</span><span class=\"mi\">3000</span><span class=\"p\">)</span>  \n          <span class=\"p\">});</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">});</span>\n\n   <span class=\"p\">});</span>\n</pre></div>\n\n\n<blockquote>\n<p>Python代码</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">addorder</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    下订单功能</span>\n<span class=\"sd\">    1）根据页面上AJAX传来的请求，依次将价格、地址、用户id、时间保存为一条订单数据，订单id由时间构建</span>\n<span class=\"sd\">    2）由order函数传的orderlist，由place_order.html页面的JS构造成数组传到本视图，重新getlist解析为列表</span>\n<span class=\"sd\">       作为订单详情页中购物车中的每个商品</span>\n<span class=\"sd\">    3）根据步骤2）中得到的详细商品列表，构造订单详细信息表，减去相应的库存数量</span>\n<span class=\"sd\">    4）步骤3）执行后删除购物车中的信息</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"c1\"># 设置事务点，发生异常后回滚到此处</span>\n    <span class=\"n\">tran_id</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">savepoint</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># 根据POST和session获取信息</span>\n    <span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span>\n    <span class=\"n\">orderlist</span> <span class=\"o\">=</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">getlist</span><span class=\"p\">(</span><span class=\"s1\">&#39;id[]&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;total&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;address&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">uid</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;userid&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># 创建订单表</span>\n    <span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"n\">OrderInfo</span><span class=\"p\">()</span>\n    <span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">oid</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">%s%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s1\">&#39;%Y%m</span><span class=\"si\">%d</span><span class=\"s1\">%H%M%S&#39;</span><span class=\"p\">),</span> <span class=\"n\">uid</span><span class=\"p\">)</span>\n    <span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">uid</span>\n    <span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">odate</span> <span class=\"o\">=</span> <span class=\"n\">time</span>\n    <span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">ototal</span> <span class=\"o\">=</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"p\">)</span>\n    <span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">oaddress</span> <span class=\"o\">=</span> <span class=\"n\">address</span>\n    <span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># 遍历购物车中提交信息，创建订单详情表</span>\n    <span class=\"k\">for</span> <span class=\"n\">orderid</span> <span class=\"ow\">in</span> <span class=\"n\">orderlist</span><span class=\"p\">:</span>\n        <span class=\"n\">cartinfo</span> <span class=\"o\">=</span> <span class=\"n\">CartInfo</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">orderid</span><span class=\"p\">)</span>\n        <span class=\"n\">good</span> <span class=\"o\">=</span> <span class=\"n\">GoodsInfo</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">cartinfo__id</span><span class=\"o\">=</span><span class=\"n\">cartinfo</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># 判断库存是否够</span>\n        <span class=\"k\">if</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">good</span><span class=\"o\">.</span><span class=\"n\">gkucun</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">cartinfo</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">):</span>\n            <span class=\"c1\"># 库存够，移除购买数量并保存</span>\n            <span class=\"n\">good</span><span class=\"o\">.</span><span class=\"n\">gkucun</span> <span class=\"o\">-=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">cartinfo</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">)</span>\n            <span class=\"n\">good</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n            <span class=\"n\">goodinfo</span> <span class=\"o\">=</span> <span class=\"n\">GoodsInfo</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">cartinfo__id</span><span class=\"o\">=</span><span class=\"n\">orderid</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># 创建订单详情表</span>\n            <span class=\"n\">detailinfo</span> <span class=\"o\">=</span> <span class=\"n\">OrderDetailInfo</span><span class=\"p\">()</span>\n            <span class=\"n\">detailinfo</span><span class=\"o\">.</span><span class=\"n\">goods_id</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">goodinfo</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n            <span class=\"n\">detailinfo</span><span class=\"o\">.</span><span class=\"n\">order_id</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">oid</span><span class=\"p\">)</span>\n            <span class=\"n\">detailinfo</span><span class=\"o\">.</span><span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">goodinfo</span><span class=\"o\">.</span><span class=\"n\">gprice</span><span class=\"p\">))</span>\n            <span class=\"n\">detailinfo</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">cartinfo</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">)</span>\n            <span class=\"n\">detailinfo</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n            <span class=\"c1\"># 循环删除购物车对象</span>\n            <span class=\"n\">cartinfo</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># 库存不够出发事务回滚</span>\n            <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">savepoint_rollback</span><span class=\"p\">(</span><span class=\"n\">tran_id</span><span class=\"p\">)</span>\n            <span class=\"c1\"># 返回json供前台提示失败</span>\n            <span class=\"k\">return</span> <span class=\"n\">JsonResponse</span><span class=\"p\">({</span><span class=\"s1\">&#39;status&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>\n\n    <span class=\"c1\"># 返回json供前台提示成功</span>\n    <span class=\"k\">return</span> <span class=\"n\">JsonResponse</span><span class=\"p\">({</span><span class=\"s1\">&#39;status&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span>\n</pre></div>',1,0,1),(31,'range与xrange（Python2）','FangHao','2017-05-04 11:41:14',0,'> range返回的是一个list\n\n> xrange返回的一个xrange对象，每次调用会返回其中一个值，不能用next方法调用，可以用for循环。\n\n要生成很大的数字序列的时候，用xrange会比range性能优很多，因为不需要一上来就开辟一块很大的内存空间，这两个基本上都是在循环的时候用\n```python\nIn [1]: a = xrange(10)\n\nIn [2]: type(a)\nOut[2]: xrange\n\nIn [3]: from collections import Iterator\n\nIn [4]: isinstance(a,Iterator)\nOut[4]: False\n\nIn [5]: def xrange(end):\n   ...:     i = 0\n   ...:     while i < end:\n   ...:         yield i\n   ...:         i += 1\n   ...:\n\nIn [6]: a = xrange(10)\n\nIn [7]: type(a)\nOut[7]: generator\n\nIn [8]: isinstance(a,Iterator)\nOut[8]: True\n```','<blockquote>\n<p>range返回的是一个list</p>\n<p>xrange返回的一个xrange对象，每次调用会返回其中一个值，不能用next方法调用，可以用for循环。</p>\n</blockquote>\n<p>要生成很大的数字序列的时候，用xrange会比range性能优很多，因为不需要一上来就开辟一块很大的内存空间，这两个基本上都是在循环的时候用</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"nb\">xrange</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">Iterator</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">Iterator</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"bp\">False</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"k\">def</span> <span class=\"nf\">xrange</span><span class=\"p\">(</span><span class=\"n\">end</span><span class=\"p\">):</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"k\">while</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">end</span><span class=\"p\">:</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>         <span class=\"k\">yield</span> <span class=\"n\">i</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>         <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"n\">generator</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">Iterator</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span> <span class=\"bp\">True</span>\n</pre></div>',1,0,1),(32,'Python浅拷贝与深拷贝','FangHao','2017-05-04 13:23:56',0,'## 浅拷贝\r\n\r\n- 类似于对于引用的拷贝\r\n\r\n```python\r\nIn [1]: a = [11,22,33]\r\n\r\nIn [2]: b = [44,55,66]\r\n\r\nIn [3]: c = [a,b]\r\n\r\nIn [4]: c\r\nOut[4]: [[11, 22, 33], [44, 55, 66]]\r\n\r\nIn [5]: d = c\r\n\r\nIn [6]: d\r\nOut[6]: [[11, 22, 33], [44, 55, 66]]\r\n\r\nIn [7]: c\r\nOut[7]: [[11, 22, 33], [44, 55, 66]]\r\n\r\nIn [8]: id(d)\r\nOut[8]: 4366797352\r\n\r\nIn [9]: id(c)\r\nOut[9]: 4366797352\r\n\r\nIn [10]: c[0].append(44)\r\n\r\nIn [11]: c\r\nOut[11]: [[11, 22, 33, 44], [44, 55, 66]]\r\n\r\nIn [12]: d\r\nOut[12]: [[11, 22, 33, 44], [44, 55, 66]]\r\n\r\nIn [13]: id(c)\r\nOut[13]: 4366797352\r\n\r\nIn [14]: id(d)\r\nOut[14]: 4366797352\r\n```\r\n\r\n## 深拷贝\r\n\r\n- 完全拷贝了一个副本\r\n\r\n```python\r\nIn [1]: import copy\r\n\r\nIn [2]: a = [11,22,33]\r\n\r\nIn [3]: b = [33,44,55]\r\n\r\nIn [4]: c = [a,b]\r\n\r\nIn [5]: e = copy.deepcopy(c)\r\n\r\nIn [6]: c\r\nOut[6]: [[11, 22, 33], [33, 44, 55]]\r\n\r\nIn [7]: e\r\nOut[7]: [[11, 22, 33], [33, 44, 55]]\r\n\r\nIn [8]: id(c)\r\nOut[8]: 4431089464\r\n\r\nIn [9]: id(e)\r\nOut[9]: 4429576528\r\n\r\nIn [10]: c[0].append(44)\r\n\r\nIn [11]: c\r\nOut[11]: [[11, 22, 33, 44], [33, 44, 55]]\r\n\r\nIn [12]: e\r\nOut[12]: [[11, 22, 33], [33, 44, 55]]\r\n\r\nIn [13]: id(c)\r\nOut[13]: 4431089464\r\n\r\nIn [14]: id(e)\r\nOut[14]: 4429576528\r\n```\r\n\r\n## 其他浅拷贝，如：copy.copy\r\n\r\n- 特别要主要拷贝的对象是可变类型还是不可变类型\r\n\r\n> 不可变类型\r\n\r\n```python\r\nIn [1]: import copy\r\n\r\nIn [2]: a = (11,22,33,[44,55])\r\n\r\nIn [3]: b = copy.copy(a)\r\n\r\nIn [4]: a\r\nOut[4]: (11, 22, 33, [44, 55])\r\n\r\nIn [5]: b\r\nOut[5]: (11, 22, 33, [44, 55])\r\n\r\nIn [6]: id(a)\r\nOut[6]: 4427232456\r\n\r\nIn [7]: id(b)\r\nOut[7]: 4427232456\r\n\r\nIn [8]: a[3].append(66)\r\n\r\nIn [9]: a\r\nOut[9]: (11, 22, 33, [44, 55, 66])\r\n\r\nIn [10]: b\r\nOut[10]: (11, 22, 33, [44, 55, 66])\r\n\r\nIn [11]: id(a)\r\nOut[11]: 4427232456\r\n\r\nIn [12]: id(b)\r\nOut[12]: 4427232456\r\n\r\nIn [13]: id(a[3])\r\nOut[13]: 4427525224\r\n\r\nIn [14]: id(b[3])\r\nOut[14]: 4427525224\r\n```\r\n\r\n> 可变类型\r\n\r\n```python\r\nIn [1]: import copy\r\n\r\nIn [2]: a = [11,22,33,(44,55)]\r\n\r\nIn [3]: b = copy.copy(a)\r\n\r\nIn [4]: a\r\nOut[4]: [11, 22, 33, (44, 55)]\r\n\r\nIn [5]: b\r\nOut[5]: [11, 22, 33, (44, 55)]\r\n\r\nIn [6]: id(a)\r\nOut[6]: 4337742480\r\n\r\nIn [7]: id(b)\r\nOut[7]: 4336618168\r\n\r\nIn [8]: a.append(66)\r\n\r\nIn [9]: a\r\nOut[9]: [11, 22, 33, (44, 55), 66]\r\n\r\nIn [10]: b\r\nOut[10]: [11, 22, 33, (44, 55)]\r\n\r\nIn [11]: id(a)\r\nOut[11]: 4337742480\r\n\r\nIn [12]: id(b)\r\nOut[12]: 4336618168\r\n```\r\n\r\n> copy.copy针对copy的对象是否是可变类型会不一样，如果拷贝的是可变类型，那么重新再内存中开辟地址，并将值拷贝过去；如果是不可变类型，那么只会拷贝一份引用，但是如果不可变类型中还有可变类型，如：(11,22,33,[44,55])，在[44,55]中append值，两个对象的值都会变，因为他们指向的是同一份引用','<h2>浅拷贝</h2>\n<ul>\n<li>类似于对于引用的拷贝</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"mi\">22</span><span class=\"p\">,</span><span class=\"mi\">33</span><span class=\"p\">]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">44</span><span class=\"p\">,</span><span class=\"mi\">55</span><span class=\"p\">,</span><span class=\"mi\">66</span><span class=\"p\">]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"n\">c</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"p\">[[</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">66</span><span class=\"p\">]]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">c</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"n\">d</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"p\">[[</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">66</span><span class=\"p\">]]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"n\">c</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"p\">[[</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">66</span><span class=\"p\">]]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span> <span class=\"mi\">4366797352</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span> <span class=\"mi\">4366797352</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]:</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">44</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]:</span> <span class=\"n\">c</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]:</span> <span class=\"p\">[[</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">66</span><span class=\"p\">]]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]:</span> <span class=\"n\">d</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]:</span> <span class=\"p\">[[</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">66</span><span class=\"p\">]]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">]:</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">]:</span> <span class=\"mi\">4366797352</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">]:</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">]:</span> <span class=\"mi\">4366797352</span>\n</pre></div>\n\n\n<h2>深拷贝</h2>\n<ul>\n<li>完全拷贝了一个副本</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"mi\">22</span><span class=\"p\">,</span><span class=\"mi\">33</span><span class=\"p\">]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">33</span><span class=\"p\">,</span><span class=\"mi\">44</span><span class=\"p\">,</span><span class=\"mi\">55</span><span class=\"p\">]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"n\">c</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"p\">[[</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">]]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"n\">e</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"p\">[[</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">]]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span> <span class=\"mi\">4431089464</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span> <span class=\"mi\">4429576528</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]:</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">44</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]:</span> <span class=\"n\">c</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]:</span> <span class=\"p\">[[</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">]]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]:</span> <span class=\"n\">e</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]:</span> <span class=\"p\">[[</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">]]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">]:</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">]:</span> <span class=\"mi\">4431089464</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">]:</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">]:</span> <span class=\"mi\">4429576528</span>\n</pre></div>\n\n\n<h2>其他浅拷贝，如：copy.copy</h2>\n<ul>\n<li>特别要主要拷贝的对象是可变类型还是不可变类型</li>\n</ul>\n<blockquote>\n<p>不可变类型</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"mi\">22</span><span class=\"p\">,</span><span class=\"mi\">33</span><span class=\"p\">,[</span><span class=\"mi\">44</span><span class=\"p\">,</span><span class=\"mi\">55</span><span class=\"p\">])</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"n\">a</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">])</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"n\">b</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">])</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"mi\">4427232456</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"mi\">4427232456</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">66</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span> <span class=\"n\">a</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span> <span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">66</span><span class=\"p\">])</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]:</span> <span class=\"n\">b</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]:</span> <span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">66</span><span class=\"p\">])</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]:</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]:</span> <span class=\"mi\">4427232456</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]:</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]:</span> <span class=\"mi\">4427232456</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">]:</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">]:</span> <span class=\"mi\">4427525224</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">]:</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">]:</span> <span class=\"mi\">4427525224</span>\n</pre></div>\n\n\n<blockquote>\n<p>可变类型</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"mi\">22</span><span class=\"p\">,</span><span class=\"mi\">33</span><span class=\"p\">,(</span><span class=\"mi\">44</span><span class=\"p\">,</span><span class=\"mi\">55</span><span class=\"p\">)]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"n\">a</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">)]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"n\">b</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">)]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"mi\">4337742480</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"mi\">4336618168</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">66</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span> <span class=\"n\">a</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span> <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">),</span> <span class=\"mi\">66</span><span class=\"p\">]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]:</span> <span class=\"n\">b</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]:</span> <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">)]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]:</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]:</span> <span class=\"mi\">4337742480</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]:</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]:</span> <span class=\"mi\">4336618168</span>\n</pre></div>\n\n\n<blockquote>\n<p>copy.copy针对copy的对象是否是可变类型会不一样，如果拷贝的是可变类型，那么重新再内存中开辟地址，并将值拷贝过去；如果是不可变类型，那么只会拷贝一份引用，但是如果不可变类型中还有可变类型，如：(11,22,33,[44,55])，在[44,55]中append值，两个对象的值都会变，因为他们指向的是同一份引用</p>\n</blockquote>',1,0,1),(33,'map()&reduce()&filter()&sorted()','FangHao','2017-05-04 14:48:32',0,'## map()\n\n> map()函数的作用主要是根据函数的要求对序列做映射\n\n- function:是一个函数\n- sequence:是一个或多个序列,取决于function需要几个参数\n- 返回值是一个list\n\n```python\nIn [1]: func = lambda x:x**2\n\nIn [2]: map(func,[i for i in range(10)])\nOut[2]: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n```\n\n## reduce()\n\n> reduce()函数的作用是会根据序列中的值进行累计\n\n- function:该函数有两个参数\n- sequence:序列可以是str，tuple，list\n- initial:固定初始值\n\n```python\nIn [1]: func = lambda x,y:x*10 + y\n\nIn [2]: reduce(func,[1,3,5,7,9])\nOut[2]: 13579\n```\n在Python3里,reduce函数已经被从全局名字空间里移除了, 它现在被放置在fucntools模块里用的话要先引入： \n\n```python\nfrom functools import reduce\n```\n\n## filter()\n\n> filter()函数的作用主要是对序列做过滤\n\n- function:接受一个参数，返回布尔值True或False\n- sequence:序列可以是str，tuple，list\n\n```python\nIn [2]: filter(lambda x:x%2,[i for i in range(10)])\nOut[2]: [1, 3, 5, 7, 9]\n```\n\n## sorted()\n\n> sorted()函数的作用主要是针对序列做排序\n\n用法：\n```python\nsorted(...)\n    sorted(iterable, cmp=None, key=None, reverse=False) --> new sorted list\n```\n\n```python\nIn [1]: sorted([3,4,5,1,2,9,0])\nOut[1]: [0, 1, 2, 3, 4, 5, 9]\n\nIn [2]: sorted([3,4,5,1,2,9,0],reverse=-1)\nOut[2]: [9, 5, 4, 3, 2, 1, 0]\n```','<h2>map()</h2>\n<blockquote>\n<p>map()函数的作用主要是根据函数的要求对序列做映射</p>\n</blockquote>\n<ul>\n<li>function:是一个函数</li>\n<li>sequence:是一个或多个序列,取决于function需要几个参数</li>\n<li>返回值是一个list</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)])</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">49</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">81</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<h2>reduce()</h2>\n<blockquote>\n<p>reduce()函数的作用是会根据序列中的值进行累计</p>\n</blockquote>\n<ul>\n<li>function:该函数有两个参数</li>\n<li>sequence:序列可以是str，tuple，list</li>\n<li>initial:固定初始值</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">:</span><span class=\"n\">x</span><span class=\"o\">*</span><span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"nb\">reduce</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">])</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"mi\">13579</span>\n</pre></div>\n\n\n<p>在Python3里,reduce函数已经被从全局名字空间里移除了, 它现在被放置在fucntools模块里用的话要先引入： </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"nb\">reduce</span>\n</pre></div>\n\n\n<h2>filter()</h2>\n<blockquote>\n<p>filter()函数的作用主要是对序列做过滤</p>\n</blockquote>\n<ul>\n<li>function:接受一个参数，返回布尔值True或False</li>\n<li>sequence:序列可以是str，tuple，list</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"nb\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span><span class=\"n\">x</span><span class=\"o\">%</span><span class=\"mi\">2</span><span class=\"p\">,[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)])</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<h2>sorted()</h2>\n<blockquote>\n<p>sorted()函数的作用主要是针对序列做排序</p>\n</blockquote>\n<p>用法：</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n    <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">,</span> <span class=\"nb\">cmp</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span> <span class=\"o\">--&gt;</span> <span class=\"n\">new</span> <span class=\"nb\">sorted</span> <span class=\"nb\">list</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"nb\">sorted</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"nb\">sorted</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">reverse</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre></div>',1,0,1),(34,'Python中的dict','FangHao','2017-05-04 15:57:01',0,'## dict的items()与iteritems()\r\n\r\n> 注意:在 python3 中不存在 iteritems 属性，只有 items 属性，并且返回的是列 表，如果需要其返回迭代器那么，需要显示转换 iter(d.items())\r\n\r\n```python\r\nIn [3]: d={1:\'one\',2:\'two\',3:\'three\'}\r\n\r\nIn [4]: d.items()\r\nOut[4]: [(1, \'one\'), (2, \'two\'), (3, \'three\')]\r\n\r\nIn [5]: d.iteritems()\r\nOut[5]: <dictionary-itemiterator at 0x103b93d60>\r\n\r\nIn [6]: a = d.iteritems()\r\n\r\nIn [7]: next(a)\r\nOut[7]: (1, \'one\')\r\n\r\nIn [8]: for i in a:\r\n   ...:     print i\r\n   ...:\r\n(2, \'two\')\r\n(3, \'three\')\r\n\r\nIn [9]: next(a)\r\n---------------------------------------------------------------------------\r\nStopIteration                             Traceback (most recent call last)\r\n<ipython-input-9-3f6e2eea332d> in <module>()\r\n----> 1 next(a)\r\n\r\nStopIteration:\r\n```\r\n> iteritems()返回的是一个迭代器，可以使用next()、for来遍历\r\n\r\n> 关于迭代器：\r\n\r\n> > 首先要分别出可迭代对象和迭代器\r\n\r\n> > 以直接作用于 for 循环的数据类型有以下几种：\r\n\r\n> > 一类是集合数据类型，如 list 、 tuple 、 dict 、 set 、 str 等；\r\n\r\n> > 一类是 generator ，包括生成器和带 yield 的generator function。\r\n\r\n> > 这些可以直接作用于 for 循环的对象统称为可迭代对象： Iterable 。\r\n\r\n> 判断是否是可迭代对象\r\n> > 可以使用 isinstance() 判断一个对象是否是 Iterable 对象\r\n> > 而生成器不但可以作用于 for 循环，还可以被 next() 函数不断调用并返回下一个值，直到最后抛出 StopIteration 错误表示无法继续返回下一个值了。\r\n\r\n```python\r\nIn [1]: from collections import Iterable\r\n\r\nIn [2]: isinstance([],Iterable)\r\nOut[2]: True\r\n\r\nIn [3]: isinstance({},Iterable)\r\nOut[3]: True\r\n\r\nIn [4]: isinstance(\'abc\',Iterable)\r\nOut[4]: True\r\n\r\nIn [5]: isinstance((x for x in range(10)),Iterable)\r\nOut[5]: True\r\n\r\nIn [6]: isinstance([x for x in range(10)],Iterable)\r\nOut[6]: True\r\n\r\nIn [7]: isinstance(100,Iterable)\r\nOut[7]: False\r\n```\r\n\r\n> 判断是否是迭代器\r\n> > 可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator\r\n\r\n```python\r\nIn [1]: from collections import Iterator\r\n\r\nIn [2]: isinstance([],Iterator)\r\nOut[2]: False\r\n\r\nIn [3]: isinstance({},Iterator)\r\nOut[3]: False\r\n\r\nIn [4]: isinstance(\'abc\',Iterator)\r\nOut[4]: False\r\n\r\nIn [5]: isinstance((x for x in range(10)),Iterator)\r\nOut[5]: True\r\n\r\nIn [6]: isinstance([x for x in range(10)],Iterator)\r\nOut[6]: False\r\n\r\nIn [7]: isinstance(100,Iterator)\r\nOut[7]: False\r\n```\r\n\r\n> iter()函数\r\n> > 生成器都是 Iterator 对象，但 list 、 dict 、 str 虽然是 Iterable ，却不是 Iterator 。把 list 、 dict 、 str 等 Iterable 变成 Iterator 可以使用 iter() 函数\r\n\r\n```python\r\nIn [1]: from collections import Iterable,Iterator\r\n\r\nIn [2]: isinstance([1,2,3],Iterable)\r\nOut[2]: True\r\n\r\nIn [3]: isinstance([1,2,3],Iterator)\r\nOut[3]: False\r\n\r\nIn [4]: isinstance(iter([1,2,3]),Iterable)\r\nOut[4]: True\r\n\r\nIn [5]: isinstance(iter([1,2,3]),Iterator)\r\nOut[5]: True\r\n```\r\n\r\n## 总结\r\n- 凡是可作用于 for 循环的对象都是 Iterable 类型；\r\n- 凡是可作用于 next() 函数的对象都是 Iterator 类型\r\n- 集合数据类型如 list 、 dict 、 str 等是 Iterable 但不是 Iterator ，不过可以通过 iter() 函数获得一个 Iterator 对象。','<h2>dict的items()与iteritems()</h2>\n<blockquote>\n<p>注意:在 python3 中不存在 iteritems 属性，只有 items 属性，并且返回的是列 表，如果需要其返回迭代器那么，需要显示转换 iter(d.items())</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">d</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"s1\">&#39;one&#39;</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"s1\">&#39;two&#39;</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"s1\">&#39;three&#39;</span><span class=\"p\">}</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;one&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;two&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;three&#39;</span><span class=\"p\">)]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">iteritems</span><span class=\"p\">()</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"o\">&lt;</span><span class=\"n\">dictionary</span><span class=\"o\">-</span><span class=\"n\">itemiterator</span> <span class=\"n\">at</span> <span class=\"mh\">0x103b93d60</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">iteritems</span><span class=\"p\">()</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;one&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"p\">:</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"k\">print</span> <span class=\"n\">i</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>\n<span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;two&#39;</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;three&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"o\">---------------------------------------------------------------------------</span>\n<span class=\"ne\">StopIteration</span>                             <span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">ipython</span><span class=\"o\">-</span><span class=\"nb\">input</span><span class=\"o\">-</span><span class=\"mi\">9</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"n\">f6e2eea332d</span><span class=\"o\">&gt;</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">()</span>\n<span class=\"o\">----&gt;</span> <span class=\"mi\">1</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n\n<span class=\"ne\">StopIteration</span><span class=\"p\">:</span>\n</pre></div>\n\n\n<blockquote>\n<p>iteritems()返回的是一个迭代器，可以使用next()、for来遍历</p>\n<p>关于迭代器：</p>\n<blockquote>\n<p>首先要分别出可迭代对象和迭代器</p>\n<p>以直接作用于 for 循环的数据类型有以下几种：</p>\n<p>一类是集合数据类型，如 list 、 tuple 、 dict 、 set 、 str 等；</p>\n<p>一类是 generator ，包括生成器和带 yield 的generator function。</p>\n<p>这些可以直接作用于 for 循环的对象统称为可迭代对象： Iterable 。</p>\n</blockquote>\n<p>判断是否是可迭代对象</p>\n<blockquote>\n<p>可以使用 isinstance() 判断一个对象是否是 Iterable 对象\n而生成器不但可以作用于 for 循环，还可以被 next() 函数不断调用并返回下一个值，直到最后抛出 StopIteration 错误表示无法继续返回下一个值了。</p>\n</blockquote>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">Iterable</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"nb\">isinstance</span><span class=\"p\">([],</span><span class=\"n\">Iterable</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"bp\">True</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"nb\">isinstance</span><span class=\"p\">({},</span><span class=\"n\">Iterable</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"bp\">True</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"s1\">&#39;abc&#39;</span><span class=\"p\">,</span><span class=\"n\">Iterable</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"bp\">True</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"nb\">isinstance</span><span class=\"p\">((</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)),</span><span class=\"n\">Iterable</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"bp\">True</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"nb\">isinstance</span><span class=\"p\">([</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)],</span><span class=\"n\">Iterable</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"bp\">True</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"n\">Iterable</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"bp\">False</span>\n</pre></div>\n\n\n<blockquote>\n<p>判断是否是迭代器</p>\n<blockquote>\n<p>可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator</p>\n</blockquote>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">Iterator</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"nb\">isinstance</span><span class=\"p\">([],</span><span class=\"n\">Iterator</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"bp\">False</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"nb\">isinstance</span><span class=\"p\">({},</span><span class=\"n\">Iterator</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"bp\">False</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"s1\">&#39;abc&#39;</span><span class=\"p\">,</span><span class=\"n\">Iterator</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"bp\">False</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"nb\">isinstance</span><span class=\"p\">((</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)),</span><span class=\"n\">Iterator</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"bp\">True</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"nb\">isinstance</span><span class=\"p\">([</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)],</span><span class=\"n\">Iterator</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"bp\">False</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"n\">Iterator</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"bp\">False</span>\n</pre></div>\n\n\n<blockquote>\n<p>iter()函数</p>\n<blockquote>\n<p>生成器都是 Iterator 对象，但 list 、 dict 、 str 虽然是 Iterable ，却不是 Iterator 。把 list 、 dict 、 str 等 Iterable 变成 Iterator 可以使用 iter() 函数</p>\n</blockquote>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">Iterable</span><span class=\"p\">,</span><span class=\"n\">Iterator</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"nb\">isinstance</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span><span class=\"n\">Iterable</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"bp\">True</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"nb\">isinstance</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span><span class=\"n\">Iterator</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"bp\">False</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"nb\">iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]),</span><span class=\"n\">Iterable</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"bp\">True</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"nb\">iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]),</span><span class=\"n\">Iterator</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"bp\">True</span>\n</pre></div>\n\n\n<h2>总结</h2>\n<ul>\n<li>凡是可作用于 for 循环的对象都是 Iterable 类型；</li>\n<li>凡是可作用于 next() 函数的对象都是 Iterator 类型</li>\n<li>集合数据类型如 list 、 dict 、 str 等是 Iterable 但不是 Iterator ，不过可以通过 iter() 函数获得一个 Iterator 对象。</li>\n</ul>',1,0,1),(35,'Python单例模式','FangHao','2017-05-04 17:11:37',0,'> 重写__new__方法\r\n\r\n```python\r\n# coding=utf-8\r\nclass Singleton(object):\r\n    def __new__(cls, *args, **kwargs):\r\n        if not hasattr(cls, \'_instance\'):\r\n            cls._instance = super(Singleton, cls).__new__(cls, *args, **kwargs)\r\n        return cls._instance\r\n\r\n\r\nclass MyClass(Singleton):\r\n    a = 1\r\n\r\n\r\none = MyClass()\r\ntwo = MyClass()\r\n\r\nprint(id(one))\r\nprint(id(two))\r\n```\r\n\r\n> 装饰器版本\r\n\r\n```python\r\n# coding=utf-8\r\ndef singleton(cls, *args, **kw):\r\n    instances = {}\r\n\r\n    def getinstance():\r\n        if cls not in instances:\r\n            instances[cls] = cls(*args, **kw)\r\n        return instances[cls]\r\n    return getinstance\r\n\r\n\r\n@singleton\r\nclass MyClass(object):\r\n    a = 1\r\n\r\n\r\none = MyClass()\r\ntwo = MyClass()\r\n\r\nprint(id(one))\r\nprint(id(two))\r\n\r\n```\r\n\r\n> import导入\r\n\r\n```python\r\n# mysingleton.py\r\nclass My_Singleton(object):\r\n    def foo(self):\r\n        pass\r\n\r\nmy_singleton = My_Singleton()\r\n\r\n# to use\r\nfrom mysingleton import my_singleton\r\n\r\nmy_singleton.foo()\r\n```','<blockquote>\n<p>重写__new__方法</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># coding=utf-8</span>\n<span class=\"k\">class</span> <span class=\"nc\">Singleton</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"s1\">&#39;_instance&#39;</span><span class=\"p\">):</span>\n            <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_instance</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">Singleton</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_instance</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyClass</span><span class=\"p\">(</span><span class=\"n\">Singleton</span><span class=\"p\">):</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n\n<span class=\"n\">one</span> <span class=\"o\">=</span> <span class=\"n\">MyClass</span><span class=\"p\">()</span>\n<span class=\"n\">two</span> <span class=\"o\">=</span> <span class=\"n\">MyClass</span><span class=\"p\">()</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">one</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">two</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<blockquote>\n<p>装饰器版本</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># coding=utf-8</span>\n<span class=\"k\">def</span> <span class=\"nf\">singleton</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">):</span>\n    <span class=\"n\">instances</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">getinstance</span><span class=\"p\">():</span>\n        <span class=\"k\">if</span> <span class=\"bp\">cls</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">instances</span><span class=\"p\">:</span>\n            <span class=\"n\">instances</span><span class=\"p\">[</span><span class=\"bp\">cls</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">instances</span><span class=\"p\">[</span><span class=\"bp\">cls</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">getinstance</span>\n\n\n<span class=\"nd\">@singleton</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n\n<span class=\"n\">one</span> <span class=\"o\">=</span> <span class=\"n\">MyClass</span><span class=\"p\">()</span>\n<span class=\"n\">two</span> <span class=\"o\">=</span> <span class=\"n\">MyClass</span><span class=\"p\">()</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">one</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">two</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<blockquote>\n<p>import导入</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># mysingleton.py</span>\n<span class=\"k\">class</span> <span class=\"nc\">My_Singleton</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"n\">my_singleton</span> <span class=\"o\">=</span> <span class=\"n\">My_Singleton</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># to use</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mysingleton</span> <span class=\"kn\">import</span> <span class=\"n\">my_singleton</span>\n\n<span class=\"n\">my_singleton</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"p\">()</span>\n</pre></div>',1,0,1),(36,'Python常用小知识点','FangHao','2017-05-04 19:48:37',0,'> zip\r\n\r\n```python\r\nIn [1]: a = [\'a\',\'b\']\r\n\r\nIn [2]: b = [18,19]\r\n\r\nIn [3]: dict(zip(a,b))\r\nOut[3]: {\'a\': 18, \'b\': 19}\r\n```\r\n\r\n> 字典按照键或值排序\r\n\r\n```python\r\nIn [1]: dic = {\'a\':31, \'bc\':5, \'c\':3, \'asd\':4, \'aa\':74, \'d\':0}\r\n\r\nIn [2]: sorted(dic.iteritems(),key=lambda d:d[1],reverse=True)\r\nOut[2]: [(\'aa\', 74), (\'a\', 31), (\'bc\', 5), (\'asd\', 4), (\'c\', 3), (\'d\', 0)]\r\n```\r\n\r\n> 检索是否存在.pyc文件\r\n\r\n```python\r\n# coding=utf-8\r\nimport os\r\n\r\nres = []\r\n\r\nfor root, directory, files in os.walk(\'./\'):\r\n    print root\r\n\r\n    for filename in files:\r\n        name, suf = os.path.splitext(filename)\r\n        if suf == \'.pyc\':\r\n            res.append(os.path.join(root, filename))\r\n\r\n\r\nprint res\r\n```\r\n\r\n> list 去重\r\n\r\n```python\r\nIn [1]: a = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]\r\n\r\nIn [2]: list(set(a))\r\nOut[2]: [1, 2, 3, 4, 5]\r\n```\r\n\r\n```python\r\nIn [3]: new_ids = []\r\n\r\nIn [4]: for i in a:\r\n   ...:     if i not in new_ids:\r\n   ...:         new_ids.append(i)\r\n   ...:\r\n\r\nIn [5]: print new_ids\r\n[1, 2, 3, 4, 5]\r\n```\r\n\r\n```python\r\nIn [2]: ids = [1,4,3,3,4,2,3,4,5,6,1]\r\n\r\nIn [3]: func = lambda x,y:x if y in x else x + [y]\r\n\r\nIn [4]: reduce(func,[[],] + ids)\r\nOut[4]: [1, 4, 3, 2, 5, 6]\r\n```\r\n\r\n> [1,2,3,4.....,100] 转化为[[1,2,3],[4,5,6],[7,8,9]....]\r\n\r\n```python\r\nIn [1]: res = []\r\n\r\nIn [2]: for i in range(1,100,3):\r\n   ...:     res.append([i,i+1,i+2])\r\n   ...:\r\n\r\nIn [3]: print res\r\n[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24], [25, 26, 27], [28, 29, 30], [31, 32, 33], [34, 35, 36], [37, 38, 39], [40, 41, 42], [43, 44, 45], [46, 47, 48], [49, 50, 51], [52, 53, 54], [55, 56, 57], [58, 59, 60], [61, 62, 63], [64, 65, 66], [67, 68, 69], [70, 71, 72], [73, 74, 75], [76, 77, 78], [79, 80, 81], [82, 83, 84], [85, 86, 87], [88, 89, 90], [91, 92, 93], [94, 95, 96], [97, 98, 99]]\r\n```\r\n\r\n> 时间消耗装饰器\r\n\r\n```python\r\n# coding=utf-8\r\n\r\n\r\ndef timeCon(func):\r\n    import time\r\n\r\n    def wrapper(*args, **kw):\r\n        t = time.clock()\r\n        func(*args, **kw)\r\n        print \'%.9f\' % (time.clock() - t)\r\n    return wrapper\r\n\r\n\r\n@timeCon\r\ndef foo():\r\n    print \'hello world\'\r\n\r\n\r\nfoo()\r\n\r\n```\r\n> 调用父类方法\r\n\r\npython3\r\n```python\r\nsuper().__init__(name)\r\n```\r\npython2\r\n```python\r\nsuper(Bosi,self).__init__(name)\r\n```\r\n```python\r\nCat.__init__(self,name)\r\n```\r\n\r\n> Python自省\r\n\r\n自省就是面向对象的语言所写的程序在运行时,所能知道对象的类型.简单一句就是运行时能够获得对象的类型.比如type(),dir(),getattr(),hasattr(),isinstance().\r\n\r\n> Python重载\r\n\r\n引自知乎:http://www.zhihu.com/question/20053359\r\n\r\n函数重载主要是为了解决两个问题。\r\n\r\n- 可变参数类型。\r\n- 可变参数个数。\r\n\r\n另外，一个基本的设计原则是，仅仅当两个函数除了参数类型和参数个数不同以外，其功能是完全相同的，此时才使用函数重载，如果两个函数的功能其实不同，那么不应当使用重载，而应当使用一个名字不同的函数。\r\n\r\n好吧，那么对于情况 1 ，函数功能相同，但是参数类型不同，python 如何处理？答案是根本不需要处理，因为 python 可以接受任何类型的参数，如果函数的功能相同，那么不同的参数类型在 python 中很可能是相同的代码，没有必要做成两个不同函数。\r\n\r\n那么对于情况 2 ，函数功能相同，但参数个数不同，python 如何处理？大家知道，答案就是缺省参数。对那些缺少的参数设定为缺省参数即可解决问题。因为你假设函数功能相同，那么那些缺少的参数终归是需要用的。\r\n\r\n好了，鉴于情况 1 跟 情况 2 都有了解决方案，python 自然就不需要函数重载了。\r\n\r\n> Python私有化\r\n\r\n- xx: 公有变量\r\n- _x: 单前置下划线,私有化属性或方法，from somemodule import *禁止导入,类对象和子类可以访问\r\n- __xx：双前置下划线,避免与子类中的属性命名冲突，无法在外部直接访问(名字重整所以访问不到)\r\n- \\__xx\\__:双前后下划线,用户名字空间的魔法对象或属性。例如:\\__init\\__ , __ 不要自己发明这样的名字\r\n- xx_:单后置下划线,用于避免与Python关键词的冲突','<blockquote>\n<p>zip</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">18</span><span class=\"p\">,</span><span class=\"mi\">19</span><span class=\"p\">]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">))</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">:</span> <span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">:</span> <span class=\"mi\">19</span><span class=\"p\">}</span>\n</pre></div>\n\n\n<blockquote>\n<p>字典按照键或值排序</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"n\">dic</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">:</span><span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bc&#39;</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;asd&#39;</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;aa&#39;</span><span class=\"p\">:</span><span class=\"mi\">74</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">}</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">dic</span><span class=\"o\">.</span><span class=\"n\">iteritems</span><span class=\"p\">(),</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">d</span><span class=\"p\">:</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"p\">[(</span><span class=\"s1\">&#39;aa&#39;</span><span class=\"p\">,</span> <span class=\"mi\">74</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;bc&#39;</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;asd&#39;</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]</span>\n</pre></div>\n\n\n<blockquote>\n<p>检索是否存在.pyc文件</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># coding=utf-8</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">directory</span><span class=\"p\">,</span> <span class=\"n\">files</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">walk</span><span class=\"p\">(</span><span class=\"s1\">&#39;./&#39;</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span> <span class=\"n\">root</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">filename</span> <span class=\"ow\">in</span> <span class=\"n\">files</span><span class=\"p\">:</span>\n        <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">suf</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">suf</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;.pyc&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">print</span> <span class=\"n\">res</span>\n</pre></div>\n\n\n<blockquote>\n<p>list 去重</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">))</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">new_ids</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"p\">:</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">new_ids</span><span class=\"p\">:</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>         <span class=\"n\">new_ids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"k\">print</span> <span class=\"n\">new_ids</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">ids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">:</span><span class=\"n\">x</span> <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"nb\">reduce</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,[[],]</span> <span class=\"o\">+</span> <span class=\"n\">ids</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n</pre></div>\n\n\n<blockquote>\n<p>[1,2,3,4.....,100] 转化为[[1,2,3],[4,5,6],[7,8,9]....]</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"k\">print</span> <span class=\"n\">res</span>\n<span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"mi\">27</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">37</span><span class=\"p\">,</span> <span class=\"mi\">38</span><span class=\"p\">,</span> <span class=\"mi\">39</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">43</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">46</span><span class=\"p\">,</span> <span class=\"mi\">47</span><span class=\"p\">,</span> <span class=\"mi\">48</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">49</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">51</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">52</span><span class=\"p\">,</span> <span class=\"mi\">53</span><span class=\"p\">,</span> <span class=\"mi\">54</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"mi\">57</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"mi\">59</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">61</span><span class=\"p\">,</span> <span class=\"mi\">62</span><span class=\"p\">,</span> <span class=\"mi\">63</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">66</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">68</span><span class=\"p\">,</span> <span class=\"mi\">69</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">71</span><span class=\"p\">,</span> <span class=\"mi\">72</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">73</span><span class=\"p\">,</span> <span class=\"mi\">74</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">76</span><span class=\"p\">,</span> <span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"mi\">78</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">79</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">81</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">82</span><span class=\"p\">,</span> <span class=\"mi\">83</span><span class=\"p\">,</span> <span class=\"mi\">84</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"mi\">86</span><span class=\"p\">,</span> <span class=\"mi\">87</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">88</span><span class=\"p\">,</span> <span class=\"mi\">89</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">91</span><span class=\"p\">,</span> <span class=\"mi\">92</span><span class=\"p\">,</span> <span class=\"mi\">93</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">94</span><span class=\"p\">,</span> <span class=\"mi\">95</span><span class=\"p\">,</span> <span class=\"mi\">96</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">]]</span>\n</pre></div>\n\n\n<blockquote>\n<p>时间消耗装饰器</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># coding=utf-8</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">timeCon</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">wrapper</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">):</span>\n        <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">clock</span><span class=\"p\">()</span>\n        <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">)</span>\n        <span class=\"k\">print</span> <span class=\"s1\">&#39;</span><span class=\"si\">%.9f</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">clock</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">wrapper</span>\n\n\n<span class=\"nd\">@timeCon</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"k\">print</span> <span class=\"s1\">&#39;hello world&#39;</span>\n\n\n<span class=\"n\">foo</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<blockquote>\n<p>调用父类方法</p>\n</blockquote>\n<p>python3</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>python2</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">Bosi</span><span class=\"p\">,</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">Cat</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<blockquote>\n<p>Python自省</p>\n</blockquote>\n<p>自省就是面向对象的语言所写的程序在运行时,所能知道对象的类型.简单一句就是运行时能够获得对象的类型.比如type(),dir(),getattr(),hasattr(),isinstance().</p>\n<blockquote>\n<p>Python重载</p>\n</blockquote>\n<p>引自知乎:http://www.zhihu.com/question/20053359</p>\n<p>函数重载主要是为了解决两个问题。</p>\n<ul>\n<li>可变参数类型。</li>\n<li>可变参数个数。</li>\n</ul>\n<p>另外，一个基本的设计原则是，仅仅当两个函数除了参数类型和参数个数不同以外，其功能是完全相同的，此时才使用函数重载，如果两个函数的功能其实不同，那么不应当使用重载，而应当使用一个名字不同的函数。</p>\n<p>好吧，那么对于情况 1 ，函数功能相同，但是参数类型不同，python 如何处理？答案是根本不需要处理，因为 python 可以接受任何类型的参数，如果函数的功能相同，那么不同的参数类型在 python 中很可能是相同的代码，没有必要做成两个不同函数。</p>\n<p>那么对于情况 2 ，函数功能相同，但参数个数不同，python 如何处理？大家知道，答案就是缺省参数。对那些缺少的参数设定为缺省参数即可解决问题。因为你假设函数功能相同，那么那些缺少的参数终归是需要用的。</p>\n<p>好了，鉴于情况 1 跟 情况 2 都有了解决方案，python 自然就不需要函数重载了。</p>\n<blockquote>\n<p>Python私有化</p>\n</blockquote>\n<ul>\n<li>xx: 公有变量</li>\n<li>_x: 单前置下划线,私有化属性或方法，from somemodule import *禁止导入,类对象和子类可以访问</li>\n<li>__xx：双前置下划线,避免与子类中的属性命名冲突，无法在外部直接访问(名字重整所以访问不到)</li>\n<li>_<em>xx_</em>:双前后下划线,用户名字空间的魔法对象或属性。例如:_<em>init_</em> , __ 不要自己发明这样的名字</li>\n<li>xx_:单后置下划线,用于避免与Python关键词的冲突</li>\n</ul>',1,0,1),(37,'Python的新式类与旧式类','FangHao','2017-05-05 09:24:12',0,'   python的新式类是2.2版本引进来的，我们可以将之前的类叫做经典类或者旧类。为什么要在2.2中引进new style class呢？官方给的解释是：\r\n\r\n**为了统一类(class)和类型(type)**\r\n\r\n```python\r\nIn [1]: class A():\r\n   ...:     a = 1\r\n   ...:\r\n\r\nIn [2]: class B(object):\r\n   ...:     b = 2\r\n   ...:\r\n\r\nIn [3]: a = A()\r\n\r\nIn [4]: b = B()\r\n\r\nIn [5]: type(a)\r\nOut[5]: instance\r\n\r\nIn [6]: type(b)\r\nOut[6]: __main__.B\r\n\r\nIn [7]: a.__class__\r\nOut[7]: <class __main__.A at 0x10ef22668>\r\n\r\nIn [8]: b.__class__\r\nOut[8]: __main__.B\r\n```\r\n\r\n**继承的搜索顺序**\r\n\r\n   继承搜索的顺序发生了改变,经典类多继承属性搜索顺序: 先深入继承树左侧，再返回，开始找右侧;新式类多继承属性搜索顺序: 先水平搜索，然后再向上移动\r\n\r\n**__slots__**\r\n\r\n   新式类新增__slots__属性，可以限制类的属性和方法\r\n\r\n```python\r\nIn [1]: class Person(object):\r\n   ...:     __slots__ = (\'name\',\'age\')\r\n   ...:\r\n\r\nIn [2]: p = Person()\r\n\r\nIn [3]: p.name = \'FangHao\'\r\n\r\nIn [4]: p.age = 24\r\n\r\nIn [5]: p.weigth = 150\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-5-0b75d36f0341> in <module>()\r\n----> 1 p.weigth = 150\r\n\r\nAttributeError: \'Person\' object has no attribute \'weigth\'\r\n```\r\n\r\n> pyhton2.x 默认都是旧式类，除非显示的继承object\r\n> python3.x 默认都是新式类，隐式的继承object\r\n\r\n','<p>python的新式类是2.2版本引进来的，我们可以将之前的类叫做经典类或者旧类。为什么要在2.2中引进new style class呢？官方给的解释是：</p>\n<p><strong>为了统一类(class)和类型(type)</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">():</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">()</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"p\">()</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"n\">instance</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"n\">__main__</span><span class=\"o\">.</span><span class=\"n\">B</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"vm\">__class__</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"nc\">__main__</span><span class=\"o\">.</span><span class=\"n\">A</span> <span class=\"n\">at</span> <span class=\"mh\">0x10ef22668</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"vm\">__class__</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span> <span class=\"n\">__main__</span><span class=\"o\">.</span><span class=\"n\">B</span>\n</pre></div>\n\n\n<p><strong>继承的搜索顺序</strong></p>\n<p>继承搜索的顺序发生了改变,经典类多继承属性搜索顺序: 先深入继承树左侧，再返回，开始找右侧;新式类多继承属性搜索顺序: 先水平搜索，然后再向上移动</p>\n<p><strong><strong>slots</strong></strong></p>\n<p>新式类新增__slots__属性，可以限制类的属性和方法</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">)</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">()</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;FangHao&#39;</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"mi\">24</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">weigth</span> <span class=\"o\">=</span> <span class=\"mi\">150</span>\n<span class=\"o\">---------------------------------------------------------------------------</span>\n<span class=\"ne\">AttributeError</span>                            <span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">ipython</span><span class=\"o\">-</span><span class=\"nb\">input</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"o\">-</span><span class=\"mi\">0</span><span class=\"n\">b75d36f0341</span><span class=\"o\">&gt;</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">()</span>\n<span class=\"o\">----&gt;</span> <span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">weigth</span> <span class=\"o\">=</span> <span class=\"mi\">150</span>\n\n<span class=\"ne\">AttributeError</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Person&#39;</span> <span class=\"nb\">object</span> <span class=\"n\">has</span> <span class=\"n\">no</span> <span class=\"n\">attribute</span> <span class=\"s1\">&#39;weigth&#39;</span>\n</pre></div>\n\n\n<blockquote>\n<p>pyhton2.x 默认都是旧式类，除非显示的继承object\npython3.x 默认都是新式类，隐式的继承object</p>\n</blockquote>',1,0,1),(38,'TCP-单服务-server/client','FangHao','2017-05-05 19:19:10',0,'> server\r\n\r\n```python\r\n#coding=utf-8\r\nfrom socket import *\r\nimport time\r\n\r\ntcpSocket = socket(AF_INET,SOCK_STREAM)\r\n\r\n#重复使用绑定信息,不必等待2MSL时间\r\ntcpSocket.setsockopt(SOL_SOCKET,SO_REUSEADDR,1)\r\n\r\naddress = (\'\',7788)\r\ntcpSocket.bind(address)\r\n\r\ntcpSocket.listen(5)\r\n\r\nwhile True:\r\n	time.sleep(0.01)\r\n	print(\'开启等待\')\r\n	newData,newAddr = tcpSocket.accept()\r\n	print(\'%s客户端已经连接，准备处理数据\'%newAddr[0])\r\n	try:\r\n		while True:\r\n			recvData = newData.recv(1024)\r\n			if len(recvData) > 0:\r\n				print(recvData)\r\n			else:\r\n				print(\'%s客户端已经关闭\'%newAddr[0])\r\n				break\r\n	finally:\r\n		newData.close()\r\n\r\ntcpSocket.close()\r\n```\r\n\r\n> client\r\n\r\n```python\r\n#coding=utf-8\r\nfrom socket import *\r\nimport time\r\n\r\ntcpSocket = socket(AF_INET,SOCK_STREAM)\r\n\r\naddress = (\'192.168.17.30\',7788)\r\ntcpSocket.connect(address)\r\n\r\nwhile True:\r\n	time.sleep(0.01)\r\n	sendData = raw_input(\'>>\')\r\n	if sendData == \'exit\':\r\n		tcpSocket.close()\r\n		break\r\n	else:\r\n		tcpSocket.send(sendData)\r\n```','<blockquote>\n<p>server</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">socket</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"n\">tcpSocket</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#重复使用绑定信息,不必等待2MSL时间</span>\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">setsockopt</span><span class=\"p\">(</span><span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span><span class=\"n\">SO_REUSEADDR</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span><span class=\"mi\">7788</span><span class=\"p\">)</span>\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"p\">)</span>\n\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;开启等待&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">newData</span><span class=\"p\">,</span><span class=\"n\">newAddr</span> <span class=\"o\">=</span> <span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">accept</span><span class=\"p\">()</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">客户端已经连接，准备处理数据&#39;</span><span class=\"o\">%</span><span class=\"n\">newAddr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n            <span class=\"n\">recvData</span> <span class=\"o\">=</span> <span class=\"n\">newData</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">recvData</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">recvData</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">客户端已经关闭&#39;</span><span class=\"o\">%</span><span class=\"n\">newAddr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"k\">break</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"n\">newData</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<blockquote>\n<p>client</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">socket</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"n\">tcpSocket</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">)</span>\n\n<span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;192.168.17.30&#39;</span><span class=\"p\">,</span><span class=\"mi\">7788</span><span class=\"p\">)</span>\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"p\">)</span>\n\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n    <span class=\"n\">sendData</span> <span class=\"o\">=</span> <span class=\"nb\">raw_input</span><span class=\"p\">(</span><span class=\"s1\">&#39;&gt;&gt;&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">sendData</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;exit&#39;</span><span class=\"p\">:</span>\n        <span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"k\">break</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">sendData</span><span class=\"p\">)</span>\n</pre></div>',1,0,1),(39,'TCP-多进程-server','FangHao','2017-05-05 19:21:25',0,'```python\r\n#coding=utf-8\r\nfrom socket import *\r\nfrom multiprocessing import Process\r\nimport time\r\n\r\n\r\ndef main():\r\n	tcpSocket = socket(AF_INET,SOCK_STREAM)\r\n	#重复使用绑定信息,不必等待2MSL时间\r\n	tcpSocket.setsockopt(SOL_SOCKET,SO_REUSEADDR,1)\r\n	address = (\'\',7788)\r\n	tcpSocket.bind(address)\r\n	tcpSocket.listen(5)\r\n	try:\r\n		while True:\r\n			time.sleep(0.01)\r\n			print(\'开启等待\')\r\n			newData,newAddr = tcpSocket.accept()\r\n			print(\'%s客户端已经连接，准备处理数据\'%newAddr[0])\r\n\r\n			p = Process(target = recv ,args = (newData,newAddr))\r\n			p.start()\r\n\r\n			newData.close()\r\n	finally:\r\n		tcpSocket.close()\r\n\r\ndef recv(newData,newAddr):\r\n	while True:\r\n		recvData = newData.recv(1024)\r\n		if len(recvData) > 0:\r\n			print(recvData)\r\n		else:\r\n			print(\'%s客户端已经关闭\'%newAddr[0])\r\n			break\r\n			newData.close()\r\n\r\n#tcpSocket.close()\r\nif __name__ == \'__main__\':\r\n	main()\r\n```','<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">socket</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">multiprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">Process</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">tcpSocket</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">)</span>\n    <span class=\"c1\">#重复使用绑定信息,不必等待2MSL时间</span>\n    <span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">setsockopt</span><span class=\"p\">(</span><span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span><span class=\"n\">SO_REUSEADDR</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span><span class=\"mi\">7788</span><span class=\"p\">)</span>\n    <span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"p\">)</span>\n    <span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n            <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;开启等待&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">newData</span><span class=\"p\">,</span><span class=\"n\">newAddr</span> <span class=\"o\">=</span> <span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">accept</span><span class=\"p\">()</span>\n            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">客户端已经连接，准备处理数据&#39;</span><span class=\"o\">%</span><span class=\"n\">newAddr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Process</span><span class=\"p\">(</span><span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">recv</span> <span class=\"p\">,</span><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">newData</span><span class=\"p\">,</span><span class=\"n\">newAddr</span><span class=\"p\">))</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n            <span class=\"n\">newData</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">recv</span><span class=\"p\">(</span><span class=\"n\">newData</span><span class=\"p\">,</span><span class=\"n\">newAddr</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">recvData</span> <span class=\"o\">=</span> <span class=\"n\">newData</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">recvData</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">recvData</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">客户端已经关闭&#39;</span><span class=\"o\">%</span><span class=\"n\">newAddr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n            <span class=\"k\">break</span>\n            <span class=\"n\">newData</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#tcpSocket.close()</span>\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre></div>',1,0,1),(40,'TCP-多线程-server','FangHao','2017-05-05 19:22:24',0,'```python\n#coding=utf-8\nfrom socket import *\nfrom threading import Thread\nimport time\n\n\ndef main():\n	tcpSocket = socket(AF_INET,SOCK_STREAM)\n	#重复使用绑定信息,不必等待2MSL时间\n	tcpSocket.setsockopt(SOL_SOCKET,SO_REUSEADDR,1)\n	address = (\'\',7788)\n	tcpSocket.bind(address)\n	tcpSocket.listen(5)\n\n	try:\n		while True:\n			time.sleep(0.01)\n			print(\'开启等待\')\n			newData,newAddr = tcpSocket.accept()\n			print(\'%s客户端已经连接，准备处理数据\'%newAddr[0])\n\n			p = Thread(target = recv ,args = (newData,newAddr))\n			p.start()\n	finally:\n		tcpSocket.close()\n\ndef recv(newData,newAddr):\n	while True:\n		recvData = newData.recv(1024)\n		if len(recvData) > 0:\n			print(recvData)\n		else:\n			print(\'%s客户端已经关闭\'%newAddr[0])\n			break\n			newData.close()\n\n#tcpSocket.close()\nif __name__ == \'__main__\':\n	main()\n```','<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">socket</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">threading</span> <span class=\"kn\">import</span> <span class=\"n\">Thread</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">tcpSocket</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">)</span>\n    <span class=\"c1\">#重复使用绑定信息,不必等待2MSL时间</span>\n    <span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">setsockopt</span><span class=\"p\">(</span><span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span><span class=\"n\">SO_REUSEADDR</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span><span class=\"mi\">7788</span><span class=\"p\">)</span>\n    <span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"p\">)</span>\n    <span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n            <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;开启等待&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">newData</span><span class=\"p\">,</span><span class=\"n\">newAddr</span> <span class=\"o\">=</span> <span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">accept</span><span class=\"p\">()</span>\n            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">客户端已经连接，准备处理数据&#39;</span><span class=\"o\">%</span><span class=\"n\">newAddr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">recv</span> <span class=\"p\">,</span><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">newData</span><span class=\"p\">,</span><span class=\"n\">newAddr</span><span class=\"p\">))</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">recv</span><span class=\"p\">(</span><span class=\"n\">newData</span><span class=\"p\">,</span><span class=\"n\">newAddr</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">recvData</span> <span class=\"o\">=</span> <span class=\"n\">newData</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">recvData</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">recvData</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">客户端已经关闭&#39;</span><span class=\"o\">%</span><span class=\"n\">newAddr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n            <span class=\"k\">break</span>\n            <span class=\"n\">newData</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#tcpSocket.close()</span>\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre></div>',1,0,1),(41,'TCP-单进程非阻塞-server','FangHao','2017-05-05 19:23:00',0,'```python\n#coding=utf-8\nfrom socket import *\nimport time\n\ng_clientinfoList = []\n\ndef main():\n	tcpSocket = socket(AF_INET,SOCK_STREAM)\n	tcpSocket.setsockopt(SOL_SOCKET,SO_REUSEADDR,1)\n	address = (\'\',7788)\n	tcpSocket.bind(address)\n	tcpSocket.listen(5)\n	#设置socket为不阻塞\n	tcpSocket.setblocking(False)\n\n	while True:\n		try:\n			clientInfo = tcpSocket.accept()\n		except Exception as result:\n			pass\n		else:\n			clientInfo[0].setblocking(False)\n			g_clientinfoList.append(clientInfo)\n			print(\'%s连接到服务器\'%str(clientInfo[1]))\n		#定义一个需要删除的socket对象的列表，来暂时存储需要删除的socket\n		needDelInfoList = []\n\n		for clientSocket,clientAddr in g_clientinfoList:\n			try:\n				newData = clientSocket.recv(1024)\n			except Exception as result:\n				pass\n			else:\n				if newData:\n					print(\'%s：%s\'%(str(clientAddr),newData))\n				else:\n					clientSocket.close()\n					needDelInfoList.append((clientSocket,clientAddr))\n					print(\'%s已经离开服务器\'%str(clientAddr))\n		#避免在上面for循环中删除连续的socket的误删的情况\n		for needDelInfo in needDelInfoList:\n			g_clientinfoList.remove(needDelInfo)\n\nif __name__ == \'__main__\':\n	main()\n```','<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">socket</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"n\">g_clientinfoList</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">tcpSocket</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">)</span>\n    <span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">setsockopt</span><span class=\"p\">(</span><span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span><span class=\"n\">SO_REUSEADDR</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span><span class=\"mi\">7788</span><span class=\"p\">)</span>\n    <span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"p\">)</span>\n    <span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"c1\">#设置socket为不阻塞</span>\n    <span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">setblocking</span><span class=\"p\">(</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n\n    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">clientInfo</span> <span class=\"o\">=</span> <span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">accept</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">clientInfo</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">setblocking</span><span class=\"p\">(</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n            <span class=\"n\">g_clientinfoList</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">clientInfo</span><span class=\"p\">)</span>\n            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">连接到服务器&#39;</span><span class=\"o\">%</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">clientInfo</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n        <span class=\"c1\">#定义一个需要删除的socket对象的列表，来暂时存储需要删除的socket</span>\n        <span class=\"n\">needDelInfoList</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">clientSocket</span><span class=\"p\">,</span><span class=\"n\">clientAddr</span> <span class=\"ow\">in</span> <span class=\"n\">g_clientinfoList</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">newData</span> <span class=\"o\">=</span> <span class=\"n\">clientSocket</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">newData</span><span class=\"p\">:</span>\n                    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">：</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span><span class=\"o\">%</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">clientAddr</span><span class=\"p\">),</span><span class=\"n\">newData</span><span class=\"p\">))</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">clientSocket</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n                    <span class=\"n\">needDelInfoList</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">clientSocket</span><span class=\"p\">,</span><span class=\"n\">clientAddr</span><span class=\"p\">))</span>\n                    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">已经离开服务器&#39;</span><span class=\"o\">%</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">clientAddr</span><span class=\"p\">))</span>\n        <span class=\"c1\">#避免在上面for循环中删除连续的socket的误删的情况</span>\n        <span class=\"k\">for</span> <span class=\"n\">needDelInfo</span> <span class=\"ow\">in</span> <span class=\"n\">needDelInfoList</span><span class=\"p\">:</span>\n            <span class=\"n\">g_clientinfoList</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">needDelInfo</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre></div>',1,0,1),(42,'TCP-单进程select-server','FangHao','2017-05-05 19:24:04',0,'```python\n#coding=utf-8\nfrom socket import *\nimport select,sys\n\ntcpSocket = socket(AF_INET,SOCK_STREAM)\ntcpSocket.setsockopt(SOL_SOCKET,SO_REUSEADDR,1)\naddres = (\'\',7788)\ntcpSocket.bind(addres)\ntcpSocket.listen(5)\n\ninputs = [tcpSocket,sys.stdin]\nruning = True\n\nwhile True:\n	readabled,writeabled,exceptional = select.select(inputs,[],[])\n\n	for socket in readabled:\n		if socket == tcpSocket:\n			conn,addr = tcpSocket.accept()\n			inputs.append(conn)\n			print(\'%s已经连入系统\'%str(addr))\n		elif socket == sys.stdin:\n			#加入随便一个变量保证退出时不在命令行中执行\n			cmd = sys.stdin.readline()\n			runing = False\n			break\n		else:\n			data = socket.recv(1024)\n			if data:\n				print(data)\n			else:\n				inputs.remove(socket)\n				socket.close()\n	if not runing:\n		break\n\ntcpSocket.close()\n```','<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">socket</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">select</span><span class=\"o\">,</span><span class=\"nn\">sys</span>\n\n<span class=\"n\">tcpSocket</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">)</span>\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">setsockopt</span><span class=\"p\">(</span><span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span><span class=\"n\">SO_REUSEADDR</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">addres</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span><span class=\"mi\">7788</span><span class=\"p\">)</span>\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">addres</span><span class=\"p\">)</span>\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"n\">inputs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">tcpSocket</span><span class=\"p\">,</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdin</span><span class=\"p\">]</span>\n<span class=\"n\">runing</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">readabled</span><span class=\"p\">,</span><span class=\"n\">writeabled</span><span class=\"p\">,</span><span class=\"n\">exceptional</span> <span class=\"o\">=</span> <span class=\"n\">select</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"p\">,[],[])</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">socket</span> <span class=\"ow\">in</span> <span class=\"n\">readabled</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">socket</span> <span class=\"o\">==</span> <span class=\"n\">tcpSocket</span><span class=\"p\">:</span>\n            <span class=\"n\">conn</span><span class=\"p\">,</span><span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">accept</span><span class=\"p\">()</span>\n            <span class=\"n\">inputs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span>\n            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%s</span><span class=\"s1\">已经连入系统&#39;</span><span class=\"o\">%</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"p\">))</span>\n        <span class=\"k\">elif</span> <span class=\"n\">socket</span> <span class=\"o\">==</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdin</span><span class=\"p\">:</span>\n            <span class=\"c1\">#加入随便一个变量保证退出时不在命令行中执行</span>\n            <span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdin</span><span class=\"o\">.</span><span class=\"n\">readline</span><span class=\"p\">()</span>\n            <span class=\"n\">runing</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n            <span class=\"k\">break</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n                <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">inputs</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">socket</span><span class=\"p\">)</span>\n                <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">runing</span><span class=\"p\">:</span>\n        <span class=\"k\">break</span>\n\n<span class=\"n\">tcpSocket</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre></div>',1,0,1),(43,'TCP-单进程epoll-server','FangHao','2017-05-05 19:25:46',0,'```python\r\nimport socket\r\nimport select\r\n\r\n# 创建套接字\r\ns = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\r\n\r\n# 设置可以重复使用绑定的信息\r\ns.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)\r\n\r\n# 绑定本机信息\r\ns.bind((\"\",7788))\r\n\r\n# 变为被动\r\ns.listen(10)\r\n\r\n# 创建一个epoll对象\r\nepoll=select.epoll()\r\n\r\n# 测试，用来打印套接字对应的文件描述符\r\n# print s.fileno()\r\n# print select.EPOLLIN|select.EPOLLET\r\n\r\n# 注册事件到epoll中\r\n# epoll.register(fd[, eventmask])\r\n# 注意，如果fd已经注册过，则会发生异常\r\n# 将创建的套接字添加到epoll的事件监听中\r\nepoll.register(s.fileno(),select.EPOLLIN|select.EPOLLET)\r\n\r\n\r\nconnections = {}\r\naddresses = {}\r\n\r\n# 循环等待客户端的到来或者对方发送数据\r\nwhile True:\r\n\r\n    # epoll 进行 fd 扫描的地方 -- 未指定超时时间则为阻塞等待\r\n    epoll_list=epoll.poll()\r\n\r\n    # 对事件进行判断\r\n    for fd,events in epoll_list:\r\n\r\n        # print fd\r\n        # print events\r\n\r\n        # 如果是socket创建的套接字被激活\r\n        if fd == s.fileno():\r\n            conn,addr=s.accept()\r\n\r\n            print(\'有新的客户端到来%s\'%str(addr))\r\n\r\n            # 将 conn 和 addr 信息分别保存起来\r\n            connections[conn.fileno()] = conn\r\n            addresses[conn.fileno()] = addr\r\n\r\n            # 向 epoll 中注册 连接 socket 的 可读 事件\r\n            epoll.register(conn.fileno(), select.EPOLLIN | select.EPOLLET)\r\n\r\n\r\n        elif events == select.EPOLLIN:\r\n            # 从激活 fd 上接收\r\n            recvData = connections[fd].recv(1024)\r\n\r\n            if len(recvData)>0:\r\n                print(\'recv:%s\'%recvData)\r\n            else:\r\n                # 从 epoll 中移除该 连接 fd\r\n                epoll.unregister(fd)\r\n\r\n                # server 侧主动关闭该 连接 fd\r\n                connections[fd].close()\r\n\r\n                print(\"%s---offline---\"%str(addresses[fd]))\r\n```\r\n\r\n## 说明\r\n\r\n- EPOLLIN （可读）\r\n- EPOLLOUT （可写）\r\n- EPOLLET （ET模式）\r\n\r\n\r\n> epoll对文件描述符的操作有两种模式：LT（level trigger）和ET（edge trigger）。LT模式是默认模式，LT模式与ET模式的区别如下：\r\n\r\n> > LT模式：当epoll检测到描述符事件发生并将此事件通知应用程序，应用程序可以不立即处理该事件。下次调用epoll时，会再次响应应用程序并通知此事件。\r\n\r\n> > ET模式：当epoll检测到描述符事件发生并将此事件通知应用程序，应用程序必须立即处理该事件。如果不处理，下次调用epoll时，不会再次响应应用程序并通知此事件。','<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">socket</span>\n<span class=\"kn\">import</span> <span class=\"nn\">select</span>\n\n<span class=\"c1\"># 创建套接字</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 设置可以重复使用绑定的信息</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">setsockopt</span><span class=\"p\">(</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">SOL_SOCKET</span><span class=\"p\">,</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">SO_REUSEADDR</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 绑定本机信息</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">((</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span><span class=\"mi\">7788</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># 变为被动</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 创建一个epoll对象</span>\n<span class=\"n\">epoll</span><span class=\"o\">=</span><span class=\"n\">select</span><span class=\"o\">.</span><span class=\"n\">epoll</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># 测试，用来打印套接字对应的文件描述符</span>\n<span class=\"c1\"># print s.fileno()</span>\n<span class=\"c1\"># print select.EPOLLIN|select.EPOLLET</span>\n\n<span class=\"c1\"># 注册事件到epoll中</span>\n<span class=\"c1\"># epoll.register(fd[, eventmask])</span>\n<span class=\"c1\"># 注意，如果fd已经注册过，则会发生异常</span>\n<span class=\"c1\"># 将创建的套接字添加到epoll的事件监听中</span>\n<span class=\"n\">epoll</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">fileno</span><span class=\"p\">(),</span><span class=\"n\">select</span><span class=\"o\">.</span><span class=\"n\">EPOLLIN</span><span class=\"o\">|</span><span class=\"n\">select</span><span class=\"o\">.</span><span class=\"n\">EPOLLET</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">connections</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"n\">addresses</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n<span class=\"c1\"># 循环等待客户端的到来或者对方发送数据</span>\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># epoll 进行 fd 扫描的地方 -- 未指定超时时间则为阻塞等待</span>\n    <span class=\"n\">epoll_list</span><span class=\"o\">=</span><span class=\"n\">epoll</span><span class=\"o\">.</span><span class=\"n\">poll</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># 对事件进行判断</span>\n    <span class=\"k\">for</span> <span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"n\">events</span> <span class=\"ow\">in</span> <span class=\"n\">epoll_list</span><span class=\"p\">:</span>\n\n        <span class=\"c1\"># print fd</span>\n        <span class=\"c1\"># print events</span>\n\n        <span class=\"c1\"># 如果是socket创建的套接字被激活</span>\n        <span class=\"k\">if</span> <span class=\"n\">fd</span> <span class=\"o\">==</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">fileno</span><span class=\"p\">():</span>\n            <span class=\"n\">conn</span><span class=\"p\">,</span><span class=\"n\">addr</span><span class=\"o\">=</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">accept</span><span class=\"p\">()</span>\n\n            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;有新的客户端到来</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span><span class=\"o\">%</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"p\">))</span>\n\n            <span class=\"c1\"># 将 conn 和 addr 信息分别保存起来</span>\n            <span class=\"n\">connections</span><span class=\"p\">[</span><span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">fileno</span><span class=\"p\">()]</span> <span class=\"o\">=</span> <span class=\"n\">conn</span>\n            <span class=\"n\">addresses</span><span class=\"p\">[</span><span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">fileno</span><span class=\"p\">()]</span> <span class=\"o\">=</span> <span class=\"n\">addr</span>\n\n            <span class=\"c1\"># 向 epoll 中注册 连接 socket 的 可读 事件</span>\n            <span class=\"n\">epoll</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">fileno</span><span class=\"p\">(),</span> <span class=\"n\">select</span><span class=\"o\">.</span><span class=\"n\">EPOLLIN</span> <span class=\"o\">|</span> <span class=\"n\">select</span><span class=\"o\">.</span><span class=\"n\">EPOLLET</span><span class=\"p\">)</span>\n\n\n        <span class=\"k\">elif</span> <span class=\"n\">events</span> <span class=\"o\">==</span> <span class=\"n\">select</span><span class=\"o\">.</span><span class=\"n\">EPOLLIN</span><span class=\"p\">:</span>\n            <span class=\"c1\"># 从激活 fd 上接收</span>\n            <span class=\"n\">recvData</span> <span class=\"o\">=</span> <span class=\"n\">connections</span><span class=\"p\">[</span><span class=\"n\">fd</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">recvData</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;recv:</span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span><span class=\"o\">%</span><span class=\"n\">recvData</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># 从 epoll 中移除该 连接 fd</span>\n                <span class=\"n\">epoll</span><span class=\"o\">.</span><span class=\"n\">unregister</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span>\n\n                <span class=\"c1\"># server 侧主动关闭该 连接 fd</span>\n                <span class=\"n\">connections</span><span class=\"p\">[</span><span class=\"n\">fd</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n                <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">---offline---&quot;</span><span class=\"o\">%</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">addresses</span><span class=\"p\">[</span><span class=\"n\">fd</span><span class=\"p\">]))</span>\n</pre></div>\n\n\n<h2>说明</h2>\n<ul>\n<li>EPOLLIN （可读）</li>\n<li>EPOLLOUT （可写）</li>\n<li>EPOLLET （ET模式）</li>\n</ul>\n<blockquote>\n<p>epoll对文件描述符的操作有两种模式：LT（level trigger）和ET（edge trigger）。LT模式是默认模式，LT模式与ET模式的区别如下：</p>\n<blockquote>\n<p>LT模式：当epoll检测到描述符事件发生并将此事件通知应用程序，应用程序可以不立即处理该事件。下次调用epoll时，会再次响应应用程序并通知此事件。</p>\n<p>ET模式：当epoll检测到描述符事件发生并将此事件通知应用程序，应用程序必须立即处理该事件。如果不处理，下次调用epoll时，不会再次响应应用程序并通知此事件。</p>\n</blockquote>\n</blockquote>',1,0,1),(44,'Python 线程池','FangHao','2017-05-05 22:50:24',0,'## mutilprocessing.dummy\r\n> multiprocessing.dummy 模块与 multiprocessing 模块的区别： dummy 模块是多线程，而 multiprocessing 是多进程， api 都是通用的。 所有可以很方便将代码在多线程和多进程之间切换\r\n\r\n```python\r\n# from multiprocessing import Pool\r\nfrom multiprocessing.dummy import Pool as ThreadPool\r\nimport time\r\nimport urllib2\r\n\r\nurls = [\r\n    \'http://www.baidu.com\',\r\n    \'http://home.baidu.com/\',\r\n    \'http://tieba.baidu.com/\',\r\n    \'http://zhidao.baidu.com/\',\r\n    \'http://music.baidu.com/\',\r\n    \'http://image.baidu.com/\',\r\n    \'http://python-china.org/\',\r\n    \'http://python-china.org/node/about\',\r\n    \'http://python-china.org/node/\',\r\n    \'http://python-china.org/account/signin\',\r\n    \'http://python-china.org/account/signup\',\r\n    \'http://www.qq.com\',\r\n    \'http://www.youku.com\',\r\n    \'http://www.tudou.com\'\r\n]\r\n\r\nstart = time.time()\r\nresults = map(urllib2.urlopen, urls)\r\nprint \'Normal:\', time.time() - start\r\n\r\nstart2 = time.time()\r\n# 开8个 worker，没有参数时默认是 cpu 的核心数\r\npool = ThreadPool(processes=8)\r\n# 在线程中执行 urllib2.urlopen(url) 并返回执行结果\r\nresults2 = pool.map(urllib2.urlopen, urls)\r\npool.close()\r\npool.join()\r\nprint \'Thread Pool:\', time.time() - start2\r\n```','<h2>mutilprocessing.dummy</h2>\n<blockquote>\n<p>multiprocessing.dummy 模块与 multiprocessing 模块的区别： dummy 模块是多线程，而 multiprocessing 是多进程， api 都是通用的。 所有可以很方便将代码在多线程和多进程之间切换</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># from multiprocessing import Pool</span>\n<span class=\"kn\">from</span> <span class=\"nn\">multiprocessing.dummy</span> <span class=\"kn\">import</span> <span class=\"n\">Pool</span> <span class=\"k\">as</span> <span class=\"n\">ThreadPool</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">urllib2</span>\n\n<span class=\"n\">urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">&#39;http://www.baidu.com&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;http://home.baidu.com/&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;http://tieba.baidu.com/&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;http://zhidao.baidu.com/&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;http://music.baidu.com/&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;http://image.baidu.com/&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;http://python-china.org/&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;http://python-china.org/node/about&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;http://python-china.org/node/&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;http://python-china.org/account/signin&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;http://python-china.org/account/signup&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;http://www.qq.com&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;http://www.youku.com&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;http://www.tudou.com&#39;</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">urllib2</span><span class=\"o\">.</span><span class=\"n\">urlopen</span><span class=\"p\">,</span> <span class=\"n\">urls</span><span class=\"p\">)</span>\n<span class=\"k\">print</span> <span class=\"s1\">&#39;Normal:&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span>\n\n<span class=\"n\">start2</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"c1\"># 开8个 worker，没有参数时默认是 cpu 的核心数</span>\n<span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"n\">ThreadPool</span><span class=\"p\">(</span><span class=\"n\">processes</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"c1\"># 在线程中执行 urllib2.urlopen(url) 并返回执行结果</span>\n<span class=\"n\">results2</span> <span class=\"o\">=</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">urllib2</span><span class=\"o\">.</span><span class=\"n\">urlopen</span><span class=\"p\">,</span> <span class=\"n\">urls</span><span class=\"p\">)</span>\n<span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>\n<span class=\"k\">print</span> <span class=\"s1\">&#39;Thread Pool:&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start2</span>\n</pre></div>',1,0,1),(45,'aaaa','FangHao','2017-05-06 16:30:55',0,'#h1\n##h2\n','<h1>h1</h1>\n<h2>h2</h2>',1,1,1),(46,'property属性','FangHao','2017-05-07 14:16:23',0,'## property函数的作用\n> 讲方法转换为只读\n\n> 重新设定一个属性设置和读取属性\n\n```python\nIn [1]: class Money(object):\n   ...:     def __init__(self):\n   ...:         self.__money = 0\n   ...:     @property\n   ...:     def money(self):\n   ...:         return self.__money\n   ...:     @money.setter\n   ...:     def money(self,value):\n   ...:         if isinstance(value,int):\n   ...:             self.__money = value\n   ...:         else:\n   ...:             print \'error:not integer\'\n   ...:\n\nIn [2]: a = Money()\n\nIn [3]: a.money\nOut[3]: 0\n\nIn [4]: a._Money__money\nOut[4]: 0\n\nIn [5]: a.money = 100\n\nIn [6]: a.money\nOut[6]: 100\n\nIn [7]: a._Money__money\nOut[7]: 100\n```','<h2>property函数的作用</h2>\n<blockquote>\n<p>讲方法转换为只读</p>\n<p>重新设定一个属性设置和读取属性</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"k\">class</span> <span class=\"nc\">Money</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__money</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"nd\">@property</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"k\">def</span> <span class=\"nf\">money</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>         <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__money</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"nd\">@money.setter</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>     <span class=\"k\">def</span> <span class=\"nf\">money</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"n\">value</span><span class=\"p\">):</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>         <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"nb\">int</span><span class=\"p\">):</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>             <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__money</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>         <span class=\"k\">else</span><span class=\"p\">:</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>             <span class=\"k\">print</span> <span class=\"s1\">&#39;error:not integer&#39;</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Money</span><span class=\"p\">()</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">money</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">_Money__money</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">money</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">money</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"mi\">100</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">_Money__money</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"mi\">100</span>\n</pre></div>',1,0,1),(47,'Python进制转换','FangHao','2017-05-09 00:28:04',0,'```python\n#coding=utf-8\n\nimport os,sys\n\n# global definition\n# base = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F]\nbase = [str(x) for x in range(10)] + [ chr(x) for x in range(ord(\'A\'),ord(\'A\')+6)]\n\n# bin2dec\n# 二进制 to 十进制: int(str,n=10)\ndef bin2dec(string_num):\n    return str(int(string_num, 2))\n\n# hex2dec\n# 十六进制 to 十进制\ndef hex2dec(string_num):\n    return str(int(string_num.upper(), 16))\n\n# dec2bin\n# 十进制 to 二进制: bin()\ndef dec2bin(string_num):\n    num = int(string_num)\n    mid = []\n    while True:\n        if num == 0: break\n        num,rem = divmod(num, 2)\n        mid.append(base[rem])\n\n    return \'\'.join([str(x) for x in mid[::-1]])\n\n# dec2hex\n# 十进制 to 八进制: oct()\n# 十进制 to 十六进制: hex()\ndef dec2hex(string_num):\n    num = int(string_num)\n    mid = []\n    while True:\n        if num == 0: break\n        num,rem = divmod(num, 16)\n        mid.append(base[rem])\n\n    return \'\'.join([str(x) for x in mid[::-1]])\n\n# hex2tobin\n# 十六进制 to 二进制: bin(int(str,16))\ndef hex2bin(string_num):\n    return dec2bin(hex2dec(string_num.upper()))\n\n# bin2hex\n# 二进制 to 十六进制: hex(int(str,2))\ndef bin2hex(string_num):\n    return dec2hex(bin2dec(string_num))\n\n```','<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">os</span><span class=\"o\">,</span><span class=\"nn\">sys</span>\n\n<span class=\"c1\"># global definition</span>\n<span class=\"c1\"># base = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F]</span>\n<span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)]</span> <span class=\"o\">+</span> <span class=\"p\">[</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">),</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">6</span><span class=\"p\">)]</span>\n\n<span class=\"c1\"># bin2dec</span>\n<span class=\"c1\"># 二进制 to 十进制: int(str,n=10)</span>\n<span class=\"k\">def</span> <span class=\"nf\">bin2dec</span><span class=\"p\">(</span><span class=\"n\">string_num</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">string_num</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># hex2dec</span>\n<span class=\"c1\"># 十六进制 to 十进制</span>\n<span class=\"k\">def</span> <span class=\"nf\">hex2dec</span><span class=\"p\">(</span><span class=\"n\">string_num</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">string_num</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">(),</span> <span class=\"mi\">16</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># dec2bin</span>\n<span class=\"c1\"># 十进制 to 二进制: bin()</span>\n<span class=\"k\">def</span> <span class=\"nf\">dec2bin</span><span class=\"p\">(</span><span class=\"n\">string_num</span><span class=\"p\">):</span>\n    <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">string_num</span><span class=\"p\">)</span>\n    <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"k\">break</span>\n        <span class=\"n\">num</span><span class=\"p\">,</span><span class=\"n\">rem</span> <span class=\"o\">=</span> <span class=\"nb\">divmod</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">mid</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">[</span><span class=\"n\">rem</span><span class=\"p\">])</span>\n\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">mid</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n\n<span class=\"c1\"># dec2hex</span>\n<span class=\"c1\"># 十进制 to 八进制: oct()</span>\n<span class=\"c1\"># 十进制 to 十六进制: hex()</span>\n<span class=\"k\">def</span> <span class=\"nf\">dec2hex</span><span class=\"p\">(</span><span class=\"n\">string_num</span><span class=\"p\">):</span>\n    <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">string_num</span><span class=\"p\">)</span>\n    <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"k\">break</span>\n        <span class=\"n\">num</span><span class=\"p\">,</span><span class=\"n\">rem</span> <span class=\"o\">=</span> <span class=\"nb\">divmod</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">)</span>\n        <span class=\"n\">mid</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">[</span><span class=\"n\">rem</span><span class=\"p\">])</span>\n\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">mid</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n\n<span class=\"c1\"># hex2tobin</span>\n<span class=\"c1\"># 十六进制 to 二进制: bin(int(str,16))</span>\n<span class=\"k\">def</span> <span class=\"nf\">hex2bin</span><span class=\"p\">(</span><span class=\"n\">string_num</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">dec2bin</span><span class=\"p\">(</span><span class=\"n\">hex2dec</span><span class=\"p\">(</span><span class=\"n\">string_num</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()))</span>\n\n<span class=\"c1\"># bin2hex</span>\n<span class=\"c1\"># 二进制 to 十六进制: hex(int(str,2))</span>\n<span class=\"k\">def</span> <span class=\"nf\">bin2hex</span><span class=\"p\">(</span><span class=\"n\">string_num</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">dec2hex</span><span class=\"p\">(</span><span class=\"n\">bin2dec</span><span class=\"p\">(</span><span class=\"n\">string_num</span><span class=\"p\">))</span>\n</pre></div>',1,0,1),(48,'面试总结（1）','FangHao','2017-05-09 22:48:42',0,'## Django自定义模板\r\n1. 在app应用下创建templatetags文件夹，如:users/templatetags\r\n2. 创建\\__init__.py文件\r\n3. 示例代码 filters.py\r\n\r\n```python\r\n#coding=utf-8\r\nfrom django.template import Library\r\nregister = Library()\r\n\r\n@register.filters\r\ndef mod(value):\r\n  return value%2\r\n```\r\n\r\n4. 模板中使用过滤器\r\n\r\n```html\r\n{% load filters %}\r\n{% if book.id|mod %}\r\n```\r\n\r\n## 装饰器\r\n1. 记录函数执行时间的装饰器\r\ndecorator_1.py\r\n\r\n```python\r\n# coding=utf-8\r\ndef changeMod(pre=\'isSecond\'):\r\n    \"\"\"扩展原有装饰器功能，在原有装饰器基础上设置外部变量\"\"\"\r\n    def tastTime(func):\r\n        import time\r\n\r\n        def wrapper(*args, **kw):\r\n            t1 = time.clock()\r\n            if pre == \'isSecond\':\r\n                func(*args, **kw)\r\n                t2 = time.clock()\r\n                print \'Having using %.9f times\' % (t2 - t1)\r\n            else:\r\n                func(*args, **kw)\r\n                t2 = time.clock()\r\n                print \'Having using {} times\' .format(t2 - t1)\r\n        return wrapper\r\n    return tastTime\r\n\r\n\r\n@changeMod(pre=\'isMin\')\r\n# @changeMod()\r\ndef printWord(word):\r\n    print word\r\n\r\n\r\nprintWord(\'hello world\')\r\n\r\n```\r\n\r\n## 斐波那契数列\r\n\r\n```python\r\n# coding=utf-8\r\ndef fib1(n):\r\n    \"\"\"递归方式，效率较慢\"\"\"\r\n    if n == 0:\r\n        return 0\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        return fib(n - 1) + fib(n - 2)\r\n\r\n\r\n# print fib1(10)\r\n\r\n# ******************************************** #\r\n\r\ndic = {0: 0, 1: 1}\r\n\r\n\r\ndef fib2(n):\r\n    \"\"\"递归方法，并检验是否计算过\"\"\"\r\n    if n not in dic:\r\n        dic[n] = fib2(n - 1) + fib2(n - 2)\r\n    return dic[n]\r\n\r\n\r\n# print fib2(10)\r\n\r\n# ******************************************** #\r\n\r\n\r\ndef fib3(n):\r\n    \"\"\"迭代方式\"\"\"\r\n    a, b = 0, 1\r\n    for i in range(n):\r\n        a, b = b, a + b\r\n    return a\r\n\r\n\r\n# print fib3(10)\r\n\r\n# ******************************************** #\r\n```\r\n\r\n## 快速排序\r\n```python\r\n# coding=utf-8\r\ndef quickSort(lists):\r\n    less = []\r\n    privotList = []\r\n    more = []\r\n\r\n    if len(lists) <= 1:\r\n        return lists\r\n    else:\r\n        privot = lists[0]\r\n        for i in lists:\r\n            if i < privot:\r\n                less.append(i)\r\n            elif i > privot:\r\n                more.append(i)\r\n            else:\r\n                privotList.append(i)\r\n\r\n        less = quickSort(less)\r\n        more = quickSort(more)\r\n\r\n    return less + privotList + more\r\n\r\n\r\nlists = [1, 2, 3, 4, 5, 7, 1, 5, 2, 0, 8, 5, 8, 2, 9, 4]\r\n\r\nnew_lists = quickSort(lists)\r\nprint(new_lists)\r\n```\r\n\r\n## 冒泡排序\r\n```python\r\n# coding=utf-8\r\ndef bubbleSort(lists):\r\n    for i in range(0, len(lists)):\r\n        for j in range(i + 1, len(lists)):\r\n            if lists[i] > lists[j]:\r\n                lists[i], lists[j] = lists[j], lists[i]\r\n    return lists\r\n\r\n\r\nlists = [1, 2, 34, 5, 6, 7, 8, 0, 123, 5, 61, 23, 1, 2, 5, 0]\r\n\r\nnew_lists = bubbleSort(lists)\r\nprint new_lists\r\n```\r\n\r\n## 桶排序\r\n```python\r\n# coding=utf-8\r\ndef bucketSort(lst):\r\n    pre_list = [0] * 10\r\n    for sorce in lst:\r\n        pre_list[sorce - 1] += 1\r\n\r\n    result = []\r\n    i = 0\r\n    while i < len(lst):\r\n        j = 0\r\n        while j < pre_list[i]:\r\n            result.append(i + 1)\r\n            j += 1\r\n        i += 1\r\n    print result\r\n\r\n\r\nlst = [7, 9, 3, 5, 7, 10, 5, 4, 8, 3]\r\nbucketSort(lst)\r\n```\r\n\r\n## Bootstrap栅格\r\n考察实现过程\r\ncss中使用@media，来规定每一个class不同尺寸占用的栅格数\r\n\r\n```html\r\n/* lg占用3个栅格，md占用3个栅格，sm占用6个栅格 */\r\n<div class=\"col-lg-3 col-md-3 col-sm-6\"><div class=\"box\"></div></div>\r\n```\r\n\r\n## redis相关\r\n1. 5种类型：string,list,hash,set,zset\r\n2. set一个数字，拿出来的值是什么\r\n\r\n考察是否知道在存的时候有数据类型转换\r\n```bash\r\npython@ubuntu:~$ redis-cli\r\n127.0.0.1:6379> get keys*\r\n(nil)\r\n127.0.0.1:6379> set isNumber 10\r\nOK\r\n127.0.0.1:6379> get isNumber\r\n\"10\"\r\n127.0.0.1:6379>\r\n```\r\n\r\n## Django用户认证系统\r\n[在Django中自定义身份验证](http://python.usyiyi.cn/django/ref/request-response.html)\r\n\r\n## scrapy模块流程\r\n[scrapy框架解读--深入理解爬虫原理](http://blog.csdn.net/u010155229/article/details/51554769)\r\n\r\n## 生成器\r\n\r\n## 迭代器\r\n\r\n## 前后端分离\r\n\r\n## 进程线程协程\r\n\r\n1. 进程资源控制\r\n- multiprocessing.Lock\r\n- multiprocessing.Semaphore\r\n- multiprocessing.Event\r\n\r\n## Git相关操作\r\n\r\n## MySQL查询\r\n\r\n## MySQL高可用性\r\n[MySQL高可用方案选型参考](http://imysql.com/2015/09/14/solutions-of-mysql-ha.shtml)\r\n\r\n## MySQL索引原理\r\n[MySQL索引背后的数据结构及算法原理](http://blog.codinglabs.org/articles/theory-of-mysql-index.html)\r\n\r\n## 时间复杂度和空间复杂度\r\n[算法的时间复杂度和空间复杂度-总结](http://blog.csdn.net/zolalad/article/details/11848739)\r\n\r\n## MySQL MongoDB Redis选择\r\n[HBase vs. MongoDB vs. MySQL vs. Oracle vs. Redis，三大主流开源 NoSQL 数据库的 PK 两大主流传统 SQL 数据库](http://blog.csdn.net/defonds/article/details/48471087)\r\n\r\n## MySQL索引\r\n[MySQL索引及查询优化总结](https://www.qcloud.com/community/article/382852?fromSource=gwzcw.107764.107764.107764)\r\n\r\n**索引是MySQL提高数据查询效率的数据结构**\r\n\r\n1. 普通索引\r\n\r\n```SQL\r\ncreate index indexName on MyTable(cloumnName(length));\r\nalter MyTable add index indexName on (cloumnName(length));\r\ndrop index indexName on MyTable;\r\n```\r\n\r\n2. 唯一索引\r\n```SQL\r\ncreate unique index indexName on MyTable(cloumnName(length));\r\nalter MyTable add unique index indexName on (cloumnName(length));\r\n```\r\n\r\n3. 主键索引\r\n- 一个表只能有一个主键\r\n\r\n4. 组合索引\r\n\r\n```sql\r\nCREATE TABLE mytable(  \r\n\r\nID INT NOT NULL,   \r\n\r\nusername VARCHAR(16) NOT NULL,  \r\n\r\ncity VARCHAR(50) NOT NULL,  \r\n\r\nage INT NOT NULL\r\n\r\n);  \r\n```\r\n\r\n```SQL\r\ncreate index indexName on MyTable(username(16),city,age);\r\nalter MyTable add index indexName (username(16),city,age);\r\n```\r\n上述建索引的方式相当于建立了下面三种组合索引(MySQL最左前缀)\r\n\r\n> username,city,age\r\n> username,city\r\n> username\r\n\r\n下面几个sql会用到索引\r\n\r\n```SQL\r\nselect * from MyTable where username=\'admin\' and city=\'BeiJing\';\r\nselect * from MyTable where username=\'admin\';\r\n```\r\n\r\n下面几个就不会走索引\r\n\r\n```SQL\r\nselect * from MyTable where username=\'admin\' and age=20;\r\nselect * from MyTable where age=20;\r\n```\r\n\r\n5. 建索引的时机\r\n**WHERE、ORDER_BY**\r\n\r\n在WHERE和JOIN中出现的列需要建立索引，但也不完全如此，因为MySQL只对<，<=，=，>，>=，BETWEEN，IN，以及某些时候的LIKE才会使用索引\r\n例如：\r\n```sql\r\nlike \'Python%\'\r\n```\r\n会走索引\r\n\r\n```sql\r\nlike \'%Pyhton%\';\r\nlike \'%Python\';\r\n```\r\n就不会走索引\r\n\r\n6. 全文索引：MyISAM，聚簇索引：InnoDB\r\n\r\n7. 其他注意点\r\n**因为在以通配符%和_开头作查询时，MySQL不会使用索引**\r\n**索引不会包含有NULL值的列**\r\n**不使用NOT IN和<>操作**\r\n','<h2>Django自定义模板</h2>\n<ol>\n<li>在app应用下创建templatetags文件夹，如:users/templatetags</li>\n<li>创建__init__.py文件</li>\n<li>示例代码 filters.py</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">#coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.template</span> <span class=\"kn\">import</span> <span class=\"n\">Library</span>\n<span class=\"n\">register</span> <span class=\"o\">=</span> <span class=\"n\">Library</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@register.filters</span>\n<span class=\"k\">def</span> <span class=\"nf\">mod</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"o\">%</span><span class=\"mi\">2</span>\n</pre></div>\n\n\n<ol>\n<li>模板中使用过滤器</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span>{% load filters %}\n{% if book.id|mod %}\n</pre></div>\n\n\n<h2>装饰器</h2>\n<ol>\n<li>记录函数执行时间的装饰器\ndecorator_1.py</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># coding=utf-8</span>\n<span class=\"k\">def</span> <span class=\"nf\">changeMod</span><span class=\"p\">(</span><span class=\"n\">pre</span><span class=\"o\">=</span><span class=\"s1\">&#39;isSecond&#39;</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;扩展原有装饰器功能，在原有装饰器基础上设置外部变量&quot;&quot;&quot;</span>\n    <span class=\"k\">def</span> <span class=\"nf\">tastTime</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">):</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">wrapper</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">):</span>\n            <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">clock</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">pre</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;isSecond&#39;</span><span class=\"p\">:</span>\n                <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">)</span>\n                <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">clock</span><span class=\"p\">()</span>\n                <span class=\"k\">print</span> <span class=\"s1\">&#39;Having using </span><span class=\"si\">%.9f</span><span class=\"s1\"> times&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">t2</span> <span class=\"o\">-</span> <span class=\"n\">t1</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">)</span>\n                <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">clock</span><span class=\"p\">()</span>\n                <span class=\"k\">print</span> <span class=\"s1\">&#39;Having using {} times&#39;</span> <span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">t2</span> <span class=\"o\">-</span> <span class=\"n\">t1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">wrapper</span>\n    <span class=\"k\">return</span> <span class=\"n\">tastTime</span>\n\n\n<span class=\"nd\">@changeMod</span><span class=\"p\">(</span><span class=\"n\">pre</span><span class=\"o\">=</span><span class=\"s1\">&#39;isMin&#39;</span><span class=\"p\">)</span>\n<span class=\"c1\"># @changeMod()</span>\n<span class=\"k\">def</span> <span class=\"nf\">printWord</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span> <span class=\"n\">word</span>\n\n\n<span class=\"n\">printWord</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello world&#39;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<h2>斐波那契数列</h2>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># coding=utf-8</span>\n<span class=\"k\">def</span> <span class=\"nf\">fib1</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;递归方式，效率较慢&quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span>\n    <span class=\"k\">elif</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># print fib1(10)</span>\n\n<span class=\"c1\"># ******************************************** #</span>\n\n<span class=\"n\">dic</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">fib2</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;递归方法，并检验是否计算过&quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">dic</span><span class=\"p\">:</span>\n        <span class=\"n\">dic</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">fib2</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">fib2</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">dic</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span>\n\n\n<span class=\"c1\"># print fib2(10)</span>\n\n<span class=\"c1\"># ******************************************** #</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">fib3</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;迭代方式&quot;&quot;&quot;</span>\n    <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span>\n\n\n<span class=\"c1\"># print fib3(10)</span>\n\n<span class=\"c1\"># ******************************************** #</span>\n</pre></div>\n\n\n<h2>快速排序</h2>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># coding=utf-8</span>\n<span class=\"k\">def</span> <span class=\"nf\">quickSort</span><span class=\"p\">(</span><span class=\"n\">lists</span><span class=\"p\">):</span>\n    <span class=\"n\">less</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">privotList</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">more</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lists</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">lists</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">privot</span> <span class=\"o\">=</span> <span class=\"n\">lists</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">lists</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">privot</span><span class=\"p\">:</span>\n                <span class=\"n\">less</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"n\">privot</span><span class=\"p\">:</span>\n                <span class=\"n\">more</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">privotList</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\n        <span class=\"n\">less</span> <span class=\"o\">=</span> <span class=\"n\">quickSort</span><span class=\"p\">(</span><span class=\"n\">less</span><span class=\"p\">)</span>\n        <span class=\"n\">more</span> <span class=\"o\">=</span> <span class=\"n\">quickSort</span><span class=\"p\">(</span><span class=\"n\">more</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">less</span> <span class=\"o\">+</span> <span class=\"n\">privotList</span> <span class=\"o\">+</span> <span class=\"n\">more</span>\n\n\n<span class=\"n\">lists</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n\n<span class=\"n\">new_lists</span> <span class=\"o\">=</span> <span class=\"n\">quickSort</span><span class=\"p\">(</span><span class=\"n\">lists</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">new_lists</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<h2>冒泡排序</h2>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># coding=utf-8</span>\n<span class=\"k\">def</span> <span class=\"nf\">bubbleSort</span><span class=\"p\">(</span><span class=\"n\">lists</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lists</span><span class=\"p\">)):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lists</span><span class=\"p\">)):</span>\n            <span class=\"k\">if</span> <span class=\"n\">lists</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">lists</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]:</span>\n                <span class=\"n\">lists</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">lists</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">lists</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">lists</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">lists</span>\n\n\n<span class=\"n\">lists</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">61</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"n\">new_lists</span> <span class=\"o\">=</span> <span class=\"n\">bubbleSort</span><span class=\"p\">(</span><span class=\"n\">lists</span><span class=\"p\">)</span>\n<span class=\"k\">print</span> <span class=\"n\">new_lists</span>\n</pre></div>\n\n\n<h2>桶排序</h2>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># coding=utf-8</span>\n<span class=\"k\">def</span> <span class=\"nf\">bucketSort</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n    <span class=\"n\">pre_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">10</span>\n    <span class=\"k\">for</span> <span class=\"n\">sorce</span> <span class=\"ow\">in</span> <span class=\"n\">lst</span><span class=\"p\">:</span>\n        <span class=\"n\">pre_list</span><span class=\"p\">[</span><span class=\"n\">sorce</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">while</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n        <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">while</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">pre_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]:</span>\n            <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">j</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">print</span> <span class=\"n\">result</span>\n\n\n<span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">bucketSort</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<h2>Bootstrap栅格</h2>\n<p>考察实现过程\ncss中使用@media，来规定每一个class不同尺寸占用的栅格数</p>\n<div class=\"codehilite\"><pre><span></span>/* lg占用3个栅格，md占用3个栅格，sm占用6个栅格 */\n<span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;col-lg-3 col-md-3 col-sm-6&quot;</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;box&quot;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</pre></div>\n\n\n<h2>redis相关</h2>\n<ol>\n<li>5种类型：string,list,hash,set,zset</li>\n<li>set一个数字，拿出来的值是什么</li>\n</ol>\n<p>考察是否知道在存的时候有数据类型转换</p>\n<div class=\"codehilite\"><pre><span></span>python@ubuntu:~$ redis-cli\n<span class=\"m\">127</span>.0.0.1:6379&gt; get keys*\n<span class=\"o\">(</span>nil<span class=\"o\">)</span>\n<span class=\"m\">127</span>.0.0.1:6379&gt; <span class=\"nb\">set</span> isNumber <span class=\"m\">10</span>\nOK\n<span class=\"m\">127</span>.0.0.1:6379&gt; get isNumber\n<span class=\"s2\">&quot;10&quot;</span>\n<span class=\"m\">127</span>.0.0.1:6379&gt;\n</pre></div>\n\n\n<h2>Django用户认证系统</h2>\n<p><a href=\"http://python.usyiyi.cn/django/ref/request-response.html\">在Django中自定义身份验证</a></p>\n<h2>scrapy模块流程</h2>\n<p><a href=\"http://blog.csdn.net/u010155229/article/details/51554769\">scrapy框架解读--深入理解爬虫原理</a></p>\n<h2>生成器</h2>\n<h2>迭代器</h2>\n<h2>前后端分离</h2>\n<h2>进程线程协程</h2>\n<ol>\n<li>进程资源控制</li>\n<li>multiprocessing.Lock</li>\n<li>multiprocessing.Semaphore</li>\n<li>multiprocessing.Event</li>\n</ol>\n<h2>Git相关操作</h2>\n<h2>MySQL查询</h2>\n<h2>MySQL高可用性</h2>\n<p><a href=\"http://imysql.com/2015/09/14/solutions-of-mysql-ha.shtml\">MySQL高可用方案选型参考</a></p>\n<h2>MySQL索引原理</h2>\n<p><a href=\"http://blog.codinglabs.org/articles/theory-of-mysql-index.html\">MySQL索引背后的数据结构及算法原理</a></p>\n<h2>时间复杂度和空间复杂度</h2>\n<p><a href=\"http://blog.csdn.net/zolalad/article/details/11848739\">算法的时间复杂度和空间复杂度-总结</a></p>\n<h2>MySQL MongoDB Redis选择</h2>\n<p><a href=\"http://blog.csdn.net/defonds/article/details/48471087\">HBase vs. MongoDB vs. MySQL vs. Oracle vs. Redis，三大主流开源 NoSQL 数据库的 PK 两大主流传统 SQL 数据库</a></p>\n<h2>MySQL索引</h2>\n<p><a href=\"https://www.qcloud.com/community/article/382852?fromSource=gwzcw.107764.107764.107764\">MySQL索引及查询优化总结</a></p>\n<p><strong>索引是MySQL提高数据查询效率的数据结构</strong></p>\n<ol>\n<li>普通索引</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">create</span> <span class=\"k\">index</span> <span class=\"n\">indexName</span> <span class=\"k\">on</span> <span class=\"n\">MyTable</span><span class=\"p\">(</span><span class=\"n\">cloumnName</span><span class=\"p\">(</span><span class=\"k\">length</span><span class=\"p\">));</span>\n<span class=\"k\">alter</span> <span class=\"n\">MyTable</span> <span class=\"k\">add</span> <span class=\"k\">index</span> <span class=\"n\">indexName</span> <span class=\"k\">on</span> <span class=\"p\">(</span><span class=\"n\">cloumnName</span><span class=\"p\">(</span><span class=\"k\">length</span><span class=\"p\">));</span>\n<span class=\"k\">drop</span> <span class=\"k\">index</span> <span class=\"n\">indexName</span> <span class=\"k\">on</span> <span class=\"n\">MyTable</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<ol>\n<li>唯一索引</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">create</span> <span class=\"k\">unique</span> <span class=\"k\">index</span> <span class=\"n\">indexName</span> <span class=\"k\">on</span> <span class=\"n\">MyTable</span><span class=\"p\">(</span><span class=\"n\">cloumnName</span><span class=\"p\">(</span><span class=\"k\">length</span><span class=\"p\">));</span>\n<span class=\"k\">alter</span> <span class=\"n\">MyTable</span> <span class=\"k\">add</span> <span class=\"k\">unique</span> <span class=\"k\">index</span> <span class=\"n\">indexName</span> <span class=\"k\">on</span> <span class=\"p\">(</span><span class=\"n\">cloumnName</span><span class=\"p\">(</span><span class=\"k\">length</span><span class=\"p\">));</span>\n</pre></div>\n\n\n<ol>\n<li>主键索引</li>\n<li>\n<p>一个表只能有一个主键</p>\n</li>\n<li>\n<p>组合索引</p>\n</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"n\">mytable</span><span class=\"p\">(</span>  \n\n<span class=\"n\">ID</span> <span class=\"nb\">INT</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span>   \n\n<span class=\"n\">username</span> <span class=\"nb\">VARCHAR</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span>  \n\n<span class=\"n\">city</span> <span class=\"nb\">VARCHAR</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span>  \n\n<span class=\"n\">age</span> <span class=\"nb\">INT</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span>\n\n<span class=\"p\">);</span>  \n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">create</span> <span class=\"k\">index</span> <span class=\"n\">indexName</span> <span class=\"k\">on</span> <span class=\"n\">MyTable</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">),</span><span class=\"n\">city</span><span class=\"p\">,</span><span class=\"n\">age</span><span class=\"p\">);</span>\n<span class=\"k\">alter</span> <span class=\"n\">MyTable</span> <span class=\"k\">add</span> <span class=\"k\">index</span> <span class=\"n\">indexName</span> <span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">),</span><span class=\"n\">city</span><span class=\"p\">,</span><span class=\"n\">age</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>上述建索引的方式相当于建立了下面三种组合索引(MySQL最左前缀)</p>\n<blockquote>\n<p>username,city,age\nusername,city\nusername</p>\n</blockquote>\n<p>下面几个sql会用到索引</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">MyTable</span> <span class=\"k\">where</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">&#39;admin&#39;</span> <span class=\"k\">and</span> <span class=\"n\">city</span><span class=\"o\">=</span><span class=\"s1\">&#39;BeiJing&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">MyTable</span> <span class=\"k\">where</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">&#39;admin&#39;</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>下面几个就不会走索引</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">MyTable</span> <span class=\"k\">where</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">&#39;admin&#39;</span> <span class=\"k\">and</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">;</span>\n<span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">MyTable</span> <span class=\"k\">where</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<ol>\n<li>建索引的时机\n<strong>WHERE、ORDER_BY</strong></li>\n</ol>\n<p>在WHERE和JOIN中出现的列需要建立索引，但也不完全如此，因为MySQL只对&lt;，&lt;=，=，&gt;，&gt;=，BETWEEN，IN，以及某些时候的LIKE才会使用索引\n例如：</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">like</span> <span class=\"s1\">&#39;Python%&#39;</span>\n</pre></div>\n\n\n<p>会走索引</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">like</span> <span class=\"s1\">&#39;%Pyhton%&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">like</span> <span class=\"s1\">&#39;%Python&#39;</span><span class=\"p\">;</span>\n</pre></div>\n\n\n<p>就不会走索引</p>\n<ol>\n<li>\n<p>全文索引：MyISAM，聚簇索引：InnoDB</p>\n</li>\n<li>\n<p>其他注意点\n<strong>因为在以通配符%和_开头作查询时，MySQL不会使用索引</strong>\n<strong>索引不会包含有NULL值的列</strong>\n<strong>不使用NOT IN和&lt;&gt;操作</strong></p>\n</li>\n</ol>',1,0,1),(49,'kaoshixing','FangHao','2017-05-11 10:10:28',0,'#h1\n##h2\n\n```python\nimport time\n```','<h1>h1</h1>\n<h2>h2</h2>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n</pre></div>',1,0,1);
/*!40000 ALTER TABLE `books_bookinfo` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `books_heroinfo`
--

DROP TABLE IF EXISTS `books_heroinfo`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `books_heroinfo` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `hname` varchar(20) NOT NULL,
  `hgender` tinyint(1) NOT NULL,
  `hcontent` varchar(200) NOT NULL,
  `isDelete` tinyint(1) NOT NULL,
  `hbook_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `books_heroinfo_hbook_id_aa0636ca0ffdb68_fk_books_bookinfo_id` (`hbook_id`),
  CONSTRAINT `books_heroinfo_hbook_id_aa0636ca0ffdb68_fk_books_bookinfo_id` FOREIGN KEY (`hbook_id`) REFERENCES `books_bookinfo` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `books_heroinfo`
--

LOCK TABLES `books_heroinfo` WRITE;
/*!40000 ALTER TABLE `books_heroinfo` DISABLE KEYS */;
/*!40000 ALTER TABLE `books_heroinfo` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_admin_log`
--

DROP TABLE IF EXISTS `django_admin_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_admin_log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `action_time` datetime NOT NULL,
  `object_id` longtext,
  `object_repr` varchar(200) NOT NULL,
  `action_flag` smallint(5) unsigned NOT NULL,
  `change_message` longtext NOT NULL,
  `content_type_id` int(11) DEFAULT NULL,
  `user_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `django_content_type_id_5be8dcf167b1eae_fk_django_content_type_id` (`content_type_id`),
  KEY `django_admin_log_user_id_31469fc29bf56a0_fk_auth_user_id` (`user_id`),
  CONSTRAINT `django_admin_log_user_id_31469fc29bf56a0_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`),
  CONSTRAINT `django_content_type_id_5be8dcf167b1eae_fk_django_content_type_id` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_admin_log`
--

LOCK TABLES `django_admin_log` WRITE;
/*!40000 ALTER TABLE `django_admin_log` DISABLE KEYS */;
/*!40000 ALTER TABLE `django_admin_log` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_content_type`
--

DROP TABLE IF EXISTS `django_content_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_content_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `app_label` varchar(100) NOT NULL,
  `model` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `django_content_type_app_label_2e3edc50bb6fd6f4_uniq` (`app_label`,`model`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_content_type`
--

LOCK TABLES `django_content_type` WRITE;
/*!40000 ALTER TABLE `django_content_type` DISABLE KEYS */;
INSERT INTO `django_content_type` VALUES (1,'admin','logentry'),(3,'auth','group'),(2,'auth','permission'),(4,'auth','user'),(7,'books','bookinfo'),(8,'books','heroinfo'),(5,'contenttypes','contenttype'),(6,'sessions','session'),(10,'users','areainfo'),(9,'users','userinfo');
/*!40000 ALTER TABLE `django_content_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_migrations`
--

DROP TABLE IF EXISTS `django_migrations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_migrations` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `app` varchar(255) NOT NULL,
  `name` varchar(255) NOT NULL,
  `applied` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_migrations`
--

LOCK TABLES `django_migrations` WRITE;
/*!40000 ALTER TABLE `django_migrations` DISABLE KEYS */;
INSERT INTO `django_migrations` VALUES (1,'contenttypes','0001_initial','2017-03-27 21:58:48'),(2,'auth','0001_initial','2017-03-27 21:58:48'),(3,'admin','0001_initial','2017-03-27 21:58:48'),(4,'contenttypes','0002_remove_content_type_name','2017-03-27 21:58:48'),(5,'auth','0002_alter_permission_name_max_length','2017-03-27 21:58:48'),(6,'auth','0003_alter_user_email_max_length','2017-03-27 21:58:48'),(7,'auth','0004_alter_user_username_opts','2017-03-27 21:58:48'),(8,'auth','0005_alter_user_last_login_null','2017-03-27 21:58:48'),(9,'auth','0006_require_contenttypes_0002','2017-03-27 21:58:48'),(10,'sessions','0001_initial','2017-03-27 21:58:48'),(11,'users','0001_initial','2017-03-27 22:00:13'),(12,'books','0001_initial','2017-03-27 22:00:13');
/*!40000 ALTER TABLE `django_migrations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_session`
--

DROP TABLE IF EXISTS `django_session`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_session` (
  `session_key` varchar(40) NOT NULL,
  `session_data` longtext NOT NULL,
  `expire_date` datetime NOT NULL,
  PRIMARY KEY (`session_key`),
  KEY `django_session_de54fa62` (`expire_date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_session`
--

LOCK TABLES `django_session` WRITE;
/*!40000 ALTER TABLE `django_session` DISABLE KEYS */;
INSERT INTO `django_session` VALUES ('014urtm80ncyo4xxmk4nubekcv035bl6','NmFjNmQwMmJhM2RmMGRhYzhlMDY5MDI2ZWEyZDNjMTFiMmZkOTU1Njp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiNWZmMTM5MTRiM2ZjM2JlMjdjOTZiY2Y0Njg5MzRmNGVhZTcyYjU1MiIsImVtYWlsIjoiMTU3MzY0OTk2MEBxcS5jb20iLCJ1c2VybmFtZSI6ImJiYnFxcSIsInBhc3N3ZCI6ImJiYnFxcTE1NyIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjE0In0=','2017-04-11 12:42:33'),('050ztmnl5xqkyo9mkj2dq6mkf12b8n23','NDU1Y2MxZDMwMWVhYmU0MmIyZjBlMmQxYzE1ZmQyNzc0NzY2ODdmYjp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiOGIzNmEyYjAyZWU4NjQ0NmZmNWI2YjI2MTYwNmE2YTgzOWQyMzE5ZSIsImVtYWlsIjoicUBxcS5jb20iLCJ1c2VybmFtZSI6InF3ZSIsInBhc3N3ZCI6InF3ZXJ0eSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjkifQ==','2017-04-11 14:49:39'),('078uw3s0xtpxf8v1qvkyh7ny9g8dw8ui','MmVhMTdlMWU2YTQzYjU3NDRjYjA3Yjk2ZmVhNzYzNjAwNzRmZDk4Nzp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiYjkyOWI4ZmQ5MjdjMTNhNGJiMTMyZDA3MTZhNzBkN2RiODFkMmIxYiIsImVtYWlsIjoiZmFuZ2hhbzkzNDJAMTYzLmNvbSIsInVzZXJuYW1lIjoiRmFuZ0hhbyIsInBhc3N3ZCI6IjEyMzQ1NiIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjMifQ==','2017-05-25 19:50:09'),('08rcz144xqw8010u842n06zzpal5sgej','MzBhNTdjODZkYjQwMDdhZDVjMDdiNGZkZTA5MTE0OGRmODljZWM1NDp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiZW1haWwiOiJtcWw5MzQ4QDE2My5jb20iLCJfYXV0aF91c2VyX2hhc2giOiIzNDY5N2QzNTU5NTc0MGM3MmM2MDI2ZWE0ZGU3Y2JjYzg1ZTNmNjE2IiwiX2F1dGhfdXNlcl9pZCI6IjEwIiwicGFzc3dkIjoibXFsMTk5MzA0MDgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsInVzZXJuYW1lIjoiTWFRaWFubGkifQ==','2017-05-24 12:30:51'),('0uze0v1jzs38gh5t8dqklo4ylxu57fpi','N2JjN2FmNGNkYjFjNjk0MDYxYjMwMmI3MDdlODIxYmY2NjllMjg2Njp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiZW1haWwiOiIzMzk4NDcwMTZAcXEuY29tIiwiX2F1dGhfdXNlcl9oYXNoIjoiZmUxZGE0NzFkOWEyMjE3YmJlMDVhNDNhMWMyMDI0NWNiZmZiMTliZiIsIl9hdXRoX3VzZXJfaWQiOiIxNyIsInBhc3N3ZCI6IndxdDE5OTAwMjE1IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJ1c2VybmFtZSI6Ind3d3d3dyJ9','2017-04-25 15:01:16'),('16gcwqad7gq4tprx0vryvo53iwto728j','MmYxMzMyNDgzMmEzNGEyZTExOTRjNWUxNTFkMTA3MjYzMzM5NTM1Nzp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiOWZjNTgxYjNhYjExYTBhNmJjZDE1YWFlZGQ2MzhiZWNjZGZjYjdhOSIsImVtYWlsIjoibGpjYnh3em5weUAxNjMuY29tIiwidXNlcm5hbWUiOiJBbmVjaG8iLCJwYXNzd2QiOiJsaW4xMjM0NTYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI3In0=','2017-04-10 23:21:21'),('1oir0i2650753bzlm6t62bb2kozlf2yp','MzYzNGFmOTViMjYzMmJlNDU4NTAyMTdlYjk3ZWI4MjNiMjZlOWNlYjp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiZW1haWwiOiI0MTM0NTI5MjBAcXEuY29tIiwiX2F1dGhfdXNlcl9oYXNoIjoiZDI3NTU0OTNhMDU2NDI4NDFhYjU1MzBjNzFiMzI0NGY1YWM0ZDNlZiIsIl9hdXRoX3VzZXJfaWQiOiI1IiwicGFzc3dkIjoid2FuZ2ppbWltYSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwidXNlcm5hbWUiOiJMYW1vbnQifQ==','2017-04-10 22:44:02'),('1qgzuepsz85wzl9j6tt17dm97c9jitgb','MmVhMTdlMWU2YTQzYjU3NDRjYjA3Yjk2ZmVhNzYzNjAwNzRmZDk4Nzp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiYjkyOWI4ZmQ5MjdjMTNhNGJiMTMyZDA3MTZhNzBkN2RiODFkMmIxYiIsImVtYWlsIjoiZmFuZ2hhbzkzNDJAMTYzLmNvbSIsInVzZXJuYW1lIjoiRmFuZ0hhbyIsInBhc3N3ZCI6IjEyMzQ1NiIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjMifQ==','2017-05-24 12:27:52'),('22wfd9psr2b0wz49aogu107e0496ewcq','MmVhMTdlMWU2YTQzYjU3NDRjYjA3Yjk2ZmVhNzYzNjAwNzRmZDk4Nzp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiYjkyOWI4ZmQ5MjdjMTNhNGJiMTMyZDA3MTZhNzBkN2RiODFkMmIxYiIsImVtYWlsIjoiZmFuZ2hhbzkzNDJAMTYzLmNvbSIsInVzZXJuYW1lIjoiRmFuZ0hhbyIsInBhc3N3ZCI6IjEyMzQ1NiIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjMifQ==','2017-05-27 16:03:38'),('2qtpi3eist5ikc10ftcb5xr8hsbm7zu9','MmVhMTdlMWU2YTQzYjU3NDRjYjA3Yjk2ZmVhNzYzNjAwNzRmZDk4Nzp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiYjkyOWI4ZmQ5MjdjMTNhNGJiMTMyZDA3MTZhNzBkN2RiODFkMmIxYiIsImVtYWlsIjoiZmFuZ2hhbzkzNDJAMTYzLmNvbSIsInVzZXJuYW1lIjoiRmFuZ0hhbyIsInBhc3N3ZCI6IjEyMzQ1NiIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjMifQ==','2017-05-20 16:23:21'),('34drmmsiwaw3clrzjdup68kuv2gkmdyu','YTg1NTdiNTI5YThmNzk3MjVlNWIzMTBmM2RjNGFkNDYwNzFiZTViMDp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiZW1haWwiOiJmYW5naGFvOTM0MkAxNjMuY29tIiwiX2F1dGhfdXNlcl9oYXNoIjoiYjkyOWI4ZmQ5MjdjMTNhNGJiMTMyZDA3MTZhNzBkN2RiODFkMmIxYiIsIl9hdXRoX3VzZXJfaWQiOiIzIiwicGFzc3dkIjoiMTIzNDU2IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJ1c2VybmFtZSI6IkZhbmdIYW8ifQ==','2017-05-23 00:28:07'),('3dr0cdmqzprdoiyk7xturlkyktovyzl7','M2Q2ODg0YzdkZWMxYjVjNDQyMWZlZmQ5YWI4NjQyNGYzMTNkYzdkYzp7ImVtYWlsIjoiZmFuZ2xlMTdAMTYzLmNvbSIsInBhc3N3ZCI6ImxwMTM1NzMzMzMxMTciLCJfc2Vzc2lvbl9leHBpcnkiOjB9','2017-04-11 07:58:15'),('3y6s26jfbz6pihwxc1z4fz0ndlfl6cue','YTg1NTdiNTI5YThmNzk3MjVlNWIzMTBmM2RjNGFkNDYwNzFiZTViMDp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiZW1haWwiOiJmYW5naGFvOTM0MkAxNjMuY29tIiwiX2F1dGhfdXNlcl9oYXNoIjoiYjkyOWI4ZmQ5MjdjMTNhNGJiMTMyZDA3MTZhNzBkN2RiODFkMmIxYiIsIl9hdXRoX3VzZXJfaWQiOiIzIiwicGFzc3dkIjoiMTIzNDU2IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJ1c2VybmFtZSI6IkZhbmdIYW8ifQ==','2017-05-18 18:23:16'),('4gprohmtyuoj0xt225pt7igaxijiaqt0','ZWQ3ZTdhMGFjYmYyN2YyMjkwNGY4ZGMwNmMxYWRhODA3ZmMwYjVlMjp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiZDYzNjFmZGJkMTQ5ZDJmM2MwNDlmYzE1NWMxYjNiODJiYzZlNTM1MiIsImVtYWlsIjoiYXJjaGV2ZXJAMTYzLmNvbSIsInVzZXJuYW1lIjoiYXJjaGV2ZXIiLCJwYXNzd2QiOiJ6eGN2Ym5tIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiNCJ9','2017-05-14 10:30:36'),('5eialjprg34mnd0inr2gmbpa06u74ob4','YTg1NTdiNTI5YThmNzk3MjVlNWIzMTBmM2RjNGFkNDYwNzFiZTViMDp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiZW1haWwiOiJmYW5naGFvOTM0MkAxNjMuY29tIiwiX2F1dGhfdXNlcl9oYXNoIjoiYjkyOWI4ZmQ5MjdjMTNhNGJiMTMyZDA3MTZhNzBkN2RiODFkMmIxYiIsIl9hdXRoX3VzZXJfaWQiOiIzIiwicGFzc3dkIjoiMTIzNDU2IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJ1c2VybmFtZSI6IkZhbmdIYW8ifQ==','2017-05-26 13:35:45'),('68auqgflr6jisodrbr0ekmiv2ezjph35','MzQ5NGZkZjE0NTdhZjE3YWJjYjZkODNiZWJmM2I1MDAxZGQwMzlhZjp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiMWM0ZWMzNGRhZmMwZmE2NDdlODEyOWEyNDc2ZGZhNDMzYjk1MTU3ZiIsImVtYWlsIjoiMTIzQHFxLmNvbSIsInVzZXJuYW1lIjoiZnVubnkiLCJwYXNzd2QiOiIxMjM0NTY3IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiOCJ9','2017-04-11 01:23:19'),('7bizt8m9bdwcfzfq803df1645l2zstao','MzBhNTdjODZkYjQwMDdhZDVjMDdiNGZkZTA5MTE0OGRmODljZWM1NDp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiZW1haWwiOiJtcWw5MzQ4QDE2My5jb20iLCJfYXV0aF91c2VyX2hhc2giOiIzNDY5N2QzNTU5NTc0MGM3MmM2MDI2ZWE0ZGU3Y2JjYzg1ZTNmNjE2IiwiX2F1dGhfdXNlcl9pZCI6IjEwIiwicGFzc3dkIjoibXFsMTk5MzA0MDgiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsInVzZXJuYW1lIjoiTWFRaWFubGkifQ==','2017-04-11 09:53:22'),('7j60ptcapwm5i5d28t4n95l2ljo0pqi7','MmVhMTdlMWU2YTQzYjU3NDRjYjA3Yjk2ZmVhNzYzNjAwNzRmZDk4Nzp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiYjkyOWI4ZmQ5MjdjMTNhNGJiMTMyZDA3MTZhNzBkN2RiODFkMmIxYiIsImVtYWlsIjoiZmFuZ2hhbzkzNDJAMTYzLmNvbSIsInVzZXJuYW1lIjoiRmFuZ0hhbyIsInBhc3N3ZCI6IjEyMzQ1NiIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjMifQ==','2017-05-27 16:03:24'),('81goxec8iys7jm9uezrvqw44ody3cot3','YjdlMGQ5NWVhNjhiN2Y1NDIxN2RlZTQ3YTVkMzhjMTYzYzljYzhhYTp7fQ==','2017-05-14 10:58:35'),('8aw8uy891lkaxwll42qz5rujc0whyoiu','N2I2OTc2NjE2ZmFlZjRmMzkyNmNkOWIzOWM1NjhhNGZhMGNlNTNlYTp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiZW1haWwiOiJ6b2V6ZXJvMEBnbWFpbC5jb20iLCJfYXV0aF91c2VyX2hhc2giOiIzZTVmNWUxZjNhMDU0ZTk2NjUwYjM2MGI1YWY3N2U3NWViNGI4NjdkIiwiX2F1dGhfdXNlcl9pZCI6IjE2IiwicGFzc3dkIjoibmluZW5pbmUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsInVzZXJuYW1lIjoiem9lem9lIn0=','2017-04-18 11:49:10'),('964v4x09dymg5113dyuokxjigh0rfuly','ZTA1YWY4OWQzZjE3ODY3NjI3MjM0ODcxYTllYzFlYzA4YWRkNmZhZjp7ImVtYWlsIjoiODM3NDQ5NDExQHFxLmNvbSIsInBhc3N3ZCI6ImZlbmdkZDAyODk5OCIsIl9zZXNzaW9uX2V4cGlyeSI6MH0=','2017-04-11 08:57:15'),('96g8e49r7fmo3igezayytkv1kqp19x37','ZGVlMjkzN2QwN2VlMjE1MDdhM2Y1NzlhMGEzMDRlZWM5MjAxYWE4ZDp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiZW1haWwiOiJtaWdvbmdyZW5qaWFAMTYzLmNvbSIsIl9hdXRoX3VzZXJfaGFzaCI6IjMyNTBiOWQ1NDIwODc3NTgxYTlkMjk2MzY2NjFhNTc1NjQ5NDZjMDYiLCJfYXV0aF91c2VyX2lkIjoiMTIiLCJwYXNzd2QiOiJ6aHV0aXNoZW5nLi41MjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsInVzZXJuYW1lIjoibWlnb25ncmVuamlhIn0=','2017-04-11 15:57:53'),('ax03ji6v1o0sqqljum62lx33t77qj2l6','YjdlMGQ5NWVhNjhiN2Y1NDIxN2RlZTQ3YTVkMzhjMTYzYzljYzhhYTp7fQ==','2017-04-11 03:50:16'),('b92uv85hyfqkj5x72qzuw8w8gd3asbdu','MmVhMTdlMWU2YTQzYjU3NDRjYjA3Yjk2ZmVhNzYzNjAwNzRmZDk4Nzp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiYjkyOWI4ZmQ5MjdjMTNhNGJiMTMyZDA3MTZhNzBkN2RiODFkMmIxYiIsImVtYWlsIjoiZmFuZ2hhbzkzNDJAMTYzLmNvbSIsInVzZXJuYW1lIjoiRmFuZ0hhbyIsInBhc3N3ZCI6IjEyMzQ1NiIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjMifQ==','2017-05-14 13:03:07'),('bay5ykh517g9omk7gesdljqiao3f99c6','OGQ0ODQ4N2EwN2E1ZmJhYWJmNTYzMDFiYzQ3ODg1OGVhNGE5ZjNhMjp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiZW1haWwiOiI5MDc1OTcyMDVAcXEuY29tIiwiX2F1dGhfdXNlcl9oYXNoIjoiNzc0Nzg1YTI2YTU0Yzk4ZmY5NWMyYTZjOTBmY2FlZjg1MDZiOWYyMiIsIl9hdXRoX3VzZXJfaWQiOiI2IiwicGFzc3dkIjoiYmJxcTUyMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwidXNlcm5hbWUiOiJcdTgzYWJcdTY2MGUifQ==','2017-04-10 22:54:33'),('bdfumw82qsgh5gde9ieje3jzig74elhp','MmVhMTdlMWU2YTQzYjU3NDRjYjA3Yjk2ZmVhNzYzNjAwNzRmZDk4Nzp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiYjkyOWI4ZmQ5MjdjMTNhNGJiMTMyZDA3MTZhNzBkN2RiODFkMmIxYiIsImVtYWlsIjoiZmFuZ2hhbzkzNDJAMTYzLmNvbSIsInVzZXJuYW1lIjoiRmFuZ0hhbyIsInBhc3N3ZCI6IjEyMzQ1NiIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjMifQ==','2017-05-17 20:53:31'),('cco86hz3g2fmm4qh8tnbob8wd8mozm1y','NDU1Y2MxZDMwMWVhYmU0MmIyZjBlMmQxYzE1ZmQyNzc0NzY2ODdmYjp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiOGIzNmEyYjAyZWU4NjQ0NmZmNWI2YjI2MTYwNmE2YTgzOWQyMzE5ZSIsImVtYWlsIjoicUBxcS5jb20iLCJ1c2VybmFtZSI6InF3ZSIsInBhc3N3ZCI6InF3ZXJ0eSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjkifQ==','2017-04-11 03:50:10'),('fkwepz4kms3w9318enbv0rin09avgb1j','MTQ1ZDA2YzE5Mjk5NTczNjIzYjg5NzYyNmFmMmI2NzE3NTM5MjhmMDp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiZDRkNzM1M2ZhMDBkMmNmNGQ1ZGIyOGFhOWZiM2VhOGUxMmFhNTE5ZiIsImVtYWlsIjoiOTgxODg2MTkwQHFxLmNvbSIsInVzZXJuYW1lIjoiWHVHdWFuZ1FpYW5nIiwicGFzc3dkIjoid3N5MTk5ODA1MjQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxOSJ9','2017-05-19 23:13:18'),('haphm8ex8zpwh9ubpwgccnzrf2fnn9e4','MmYxMzMyNDgzMmEzNGEyZTExOTRjNWUxNTFkMTA3MjYzMzM5NTM1Nzp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiOWZjNTgxYjNhYjExYTBhNmJjZDE1YWFlZGQ2MzhiZWNjZGZjYjdhOSIsImVtYWlsIjoibGpjYnh3em5weUAxNjMuY29tIiwidXNlcm5hbWUiOiJBbmVjaG8iLCJwYXNzd2QiOiJsaW4xMjM0NTYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI3In0=','2017-04-14 18:35:56'),('i3bbk4i4vg22sv0l615wy08084v7d4yz','MjQxMDQ4ZDBkNTliN2QyZjFlNmM2N2QwMzU1ZjUwZTg0ZDI4MThmMDp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiMzU3ZjM0YWNlOGZkN2NhNjAzYTFmZmQwYzQ5YmFjMjRjYTk4ZDJmZSIsImVtYWlsIjoibGl1d2VpX2h3YmpAMTYzLmNvbSIsInVzZXJuYW1lIjoibGl1d2VpX3N0YXIiLCJwYXNzd2QiOiJMVzUyMzUxNi4uIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiMjEifQ==','2017-05-27 23:23:38'),('js5mcevzi9xmi0v1pzrgotubuit0dlxg','MmVhMTdlMWU2YTQzYjU3NDRjYjA3Yjk2ZmVhNzYzNjAwNzRmZDk4Nzp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiYjkyOWI4ZmQ5MjdjMTNhNGJiMTMyZDA3MTZhNzBkN2RiODFkMmIxYiIsImVtYWlsIjoiZmFuZ2hhbzkzNDJAMTYzLmNvbSIsInVzZXJuYW1lIjoiRmFuZ0hhbyIsInBhc3N3ZCI6IjEyMzQ1NiIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjMifQ==','2017-05-14 16:45:54'),('kya74vjcltb8zdkp8er3wrwz4b50wnz3','MzUxMzAyYjU2MmZkMjdiZjBlNzAzN2NlYTNjZWI1ZjIzMTUyODkyMjp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiZGVhNmUwYzBlZmNkMzBiZDBlODA1ZmFhMjU4YzZmNjIzZmYxZWVlZCIsImVtYWlsIjoiODU3MzI2MTJAcXEuY29tIiwidXNlcm5hbWUiOiJjYWljYWkiLCJwYXNzd2QiOiJjYWljYWkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIyMiJ9','2017-06-14 21:40:00'),('l482g542qlrmyywmv6jxozhd9xyi073m','MmVhMTdlMWU2YTQzYjU3NDRjYjA3Yjk2ZmVhNzYzNjAwNzRmZDk4Nzp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiYjkyOWI4ZmQ5MjdjMTNhNGJiMTMyZDA3MTZhNzBkN2RiODFkMmIxYiIsImVtYWlsIjoiZmFuZ2hhbzkzNDJAMTYzLmNvbSIsInVzZXJuYW1lIjoiRmFuZ0hhbyIsInBhc3N3ZCI6IjEyMzQ1NiIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjMifQ==','2017-05-20 16:24:48'),('lxtm632d3xi0zo6hcupl4m6o2qu8gbp8','YTg1NTdiNTI5YThmNzk3MjVlNWIzMTBmM2RjNGFkNDYwNzFiZTViMDp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiZW1haWwiOiJmYW5naGFvOTM0MkAxNjMuY29tIiwiX2F1dGhfdXNlcl9oYXNoIjoiYjkyOWI4ZmQ5MjdjMTNhNGJiMTMyZDA3MTZhNzBkN2RiODFkMmIxYiIsIl9hdXRoX3VzZXJfaWQiOiIzIiwicGFzc3dkIjoiMTIzNDU2IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJ1c2VybmFtZSI6IkZhbmdIYW8ifQ==','2017-05-19 21:46:04'),('nkz7ozggb5yxqtj16zuhw582wmayzw64','NjRmZjc2NjYyNTYzZTE1NDMyOGRlMjQwMDc3YmY2N2VhNmJjYWFjMzp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiODNkY2Y5Y2JhODhiODFmNmM1MTA2N2QzODMxMWI1N2Q1OTk1OWQ0YiIsImVtYWlsIjoic2Vyc2luQDE2My5jb20iLCJ1c2VybmFtZSI6InNlcnNpbiIsInBhc3N3ZCI6ImxpdWxpYW5nNjYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxOCJ9','2017-04-25 15:15:32'),('q7u5h91natdbt8zfj35ovexxuh6ylnb1','ZWQ3ZTdhMGFjYmYyN2YyMjkwNGY4ZGMwNmMxYWRhODA3ZmMwYjVlMjp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiZDYzNjFmZGJkMTQ5ZDJmM2MwNDlmYzE1NWMxYjNiODJiYzZlNTM1MiIsImVtYWlsIjoiYXJjaGV2ZXJAMTYzLmNvbSIsInVzZXJuYW1lIjoiYXJjaGV2ZXIiLCJwYXNzd2QiOiJ6eGN2Ym5tIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiNCJ9','2017-05-25 20:08:20'),('qn39iii221wcsxzel4yyt58h7l9gqn6s','MmVhMTdlMWU2YTQzYjU3NDRjYjA3Yjk2ZmVhNzYzNjAwNzRmZDk4Nzp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiYjkyOWI4ZmQ5MjdjMTNhNGJiMTMyZDA3MTZhNzBkN2RiODFkMmIxYiIsImVtYWlsIjoiZmFuZ2hhbzkzNDJAMTYzLmNvbSIsInVzZXJuYW1lIjoiRmFuZ0hhbyIsInBhc3N3ZCI6IjEyMzQ1NiIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjMifQ==','2017-05-24 14:00:47'),('rxye8prmqhko0wvgtt5127hkwndrjzn0','YTg1NTdiNTI5YThmNzk3MjVlNWIzMTBmM2RjNGFkNDYwNzFiZTViMDp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiZW1haWwiOiJmYW5naGFvOTM0MkAxNjMuY29tIiwiX2F1dGhfdXNlcl9oYXNoIjoiYjkyOWI4ZmQ5MjdjMTNhNGJiMTMyZDA3MTZhNzBkN2RiODFkMmIxYiIsIl9hdXRoX3VzZXJfaWQiOiIzIiwicGFzc3dkIjoiMTIzNDU2IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJ1c2VybmFtZSI6IkZhbmdIYW8ifQ==','2017-05-23 14:01:09'),('skgd6lzon44f4cs6h7u4oqo8aaqrpo0a','ZWQ3ZTdhMGFjYmYyN2YyMjkwNGY4ZGMwNmMxYWRhODA3ZmMwYjVlMjp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiZDYzNjFmZGJkMTQ5ZDJmM2MwNDlmYzE1NWMxYjNiODJiYzZlNTM1MiIsImVtYWlsIjoiYXJjaGV2ZXJAMTYzLmNvbSIsInVzZXJuYW1lIjoiYXJjaGV2ZXIiLCJwYXNzd2QiOiJ6eGN2Ym5tIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2lkIjoiNCJ9','2017-05-24 12:53:37'),('sktpmsiaavm4r11o47tbsozwj6ubse92','YTg1NTdiNTI5YThmNzk3MjVlNWIzMTBmM2RjNGFkNDYwNzFiZTViMDp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiZW1haWwiOiJmYW5naGFvOTM0MkAxNjMuY29tIiwiX2F1dGhfdXNlcl9oYXNoIjoiYjkyOWI4ZmQ5MjdjMTNhNGJiMTMyZDA3MTZhNzBkN2RiODFkMmIxYiIsIl9hdXRoX3VzZXJfaWQiOiIzIiwicGFzc3dkIjoiMTIzNDU2IiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJ1c2VybmFtZSI6IkZhbmdIYW8ifQ==','2017-05-24 08:03:54'),('v0t5laap8p5388huqw1am0nqhxtdeu89','N2NkNDIyYjMxYmE0N2NmNWUxZmExNTZhM2IxZWVmMTI2YzIyMzQ2Mjp7ImVtYWlsIjoic3VueWFuZzEyMDhAMTYzLmNvbSIsInBhc3N3ZCI6IjQ1NTc1MTQ3NSIsIl9zZXNzaW9uX2V4cGlyeSI6MH0=','2017-04-10 23:30:55'),('v8h2kaxmcfh9j4xte1r0n958us8oj503','MDI3ZGFlMzI4MjM4ZmMyZDdkMjNkNWQ4MDEyMjg0ZGNkNDcxM2ViYzp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiZW1haWwiOiJhcmNoZXZlckAxNjMuY29tIiwiX2F1dGhfdXNlcl9oYXNoIjoiZDYzNjFmZGJkMTQ5ZDJmM2MwNDlmYzE1NWMxYjNiODJiYzZlNTM1MiIsIl9hdXRoX3VzZXJfaWQiOiI0IiwicGFzc3dkIjoienhjdmJubSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwidXNlcm5hbWUiOiJhcmNoZXZlciJ9','2017-04-10 22:40:23'),('visnyp244udc00yyihupkvhh77m7umo2','MmVhMTdlMWU2YTQzYjU3NDRjYjA3Yjk2ZmVhNzYzNjAwNzRmZDk4Nzp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiYjkyOWI4ZmQ5MjdjMTNhNGJiMTMyZDA3MTZhNzBkN2RiODFkMmIxYiIsImVtYWlsIjoiZmFuZ2hhbzkzNDJAMTYzLmNvbSIsInVzZXJuYW1lIjoiRmFuZ0hhbyIsInBhc3N3ZCI6IjEyMzQ1NiIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjMifQ==','2017-05-18 21:34:34'),('y4uwkxxhvlcj2mq9er4z6nocrka7pti4','MmYxMzMyNDgzMmEzNGEyZTExOTRjNWUxNTFkMTA3MjYzMzM5NTM1Nzp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiOWZjNTgxYjNhYjExYTBhNmJjZDE1YWFlZGQ2MzhiZWNjZGZjYjdhOSIsImVtYWlsIjoibGpjYnh3em5weUAxNjMuY29tIiwidXNlcm5hbWUiOiJBbmVjaG8iLCJwYXNzd2QiOiJsaW4xMjM0NTYiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiI3In0=','2017-04-10 23:48:27'),('yss6vru2uiw9pn88mfj2uop82xi7i3zl','YTNmZTlkMDJkNDI2Mzc3OWViYTdkZmY4YjcyNjM3ZTBlYzc4YzM5Njp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiMjY4ZmZkMDI2YjEyZjMwODE0YjI4Y2RkMGE5NGE0Yzg5ZGVmYWNlMiIsImVtYWlsIjoiMTQyODE3NTAxNkBxcS5jb20iLCJ1c2VybmFtZSI6ImtvbmdiaW4iLCJwYXNzd2QiOiJrb25nYmluMjEyNyIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjIwIn0=','2017-05-24 12:31:45'),('z1hm6mpxwyhc3guarsxhpzjtp23gyl2y','Njg2NmEwMzM5ODljYjczZGFjMWFlYzIwYWIzMjdiN2IyMmUzMjAyNjp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiZW1haWwiOiI4NTczMjYxMkBxcS5jb20iLCJfYXV0aF91c2VyX2hhc2giOiJkZWE2ZTBjMGVmY2QzMGJkMGU4MDVmYWEyNThjNmY2MjNmZjFlZWVkIiwiX2F1dGhfdXNlcl9pZCI6IjIyIiwicGFzc3dkIjoiY2FpY2FpIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJ1c2VybmFtZSI6ImNhaWNhaSJ9','2017-06-14 21:37:29'),('zc3s8h04h9jh1sw999k3x4pzrno25ii4','MmVhMTdlMWU2YTQzYjU3NDRjYjA3Yjk2ZmVhNzYzNjAwNzRmZDk4Nzp7Il9zZXNzaW9uX2V4cGlyeSI6MCwiX2F1dGhfdXNlcl9oYXNoIjoiYjkyOWI4ZmQ5MjdjMTNhNGJiMTMyZDA3MTZhNzBkN2RiODFkMmIxYiIsImVtYWlsIjoiZmFuZ2hhbzkzNDJAMTYzLmNvbSIsInVzZXJuYW1lIjoiRmFuZ0hhbyIsInBhc3N3ZCI6IjEyMzQ1NiIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjMifQ==','2017-05-25 10:09:44');
/*!40000 ALTER TABLE `django_session` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users_areainfo`
--

DROP TABLE IF EXISTS `users_areainfo`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users_areainfo` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `atitle` varchar(20) NOT NULL,
  `aParent_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `users_areainfo_aParent_id_12f0d6162572a026_fk_users_areainfo_id` (`aParent_id`),
  CONSTRAINT `users_areainfo_aParent_id_12f0d6162572a026_fk_users_areainfo_id` FOREIGN KEY (`aParent_id`) REFERENCES `users_areainfo` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users_areainfo`
--

LOCK TABLES `users_areainfo` WRITE;
/*!40000 ALTER TABLE `users_areainfo` DISABLE KEYS */;
/*!40000 ALTER TABLE `users_areainfo` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users_userinfo`
--

DROP TABLE IF EXISTS `users_userinfo`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users_userinfo` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(30) NOT NULL,
  `email` varchar(254) NOT NULL,
  `ispublicemail` tinyint(1) NOT NULL,
  `gender` tinyint(1) NOT NULL,
  `campany` varchar(30) NOT NULL,
  `address` varchar(30) NOT NULL,
  `about` longtext NOT NULL,
  `url` varchar(40) NOT NULL,
  `pic` varchar(100) NOT NULL,
  `avatar_address` varchar(60) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users_userinfo`
--

LOCK TABLES `users_userinfo` WRITE;
/*!40000 ALTER TABLE `users_userinfo` DISABLE KEYS */;
INSERT INTO `users_userinfo` VALUES (1,'FangHao','fanghao9342@163.com',1,1,'','北京市海淀区学院路','Python、Django、Flask','https://github.com/SulphurFH','','/static/media/avatar/FangHao.jpg'),(2,'archever','archever@163.com',0,1,'','','','','','/static/media/avatar/archever.jpg'),(3,'Lamont','413452920@qq.com',0,1,'','','','','','/static/media/avatar/novavtar.jpg'),(4,'莫明','907597205@qq.com',0,1,'','','','','','/static/media/avatar/novavtar.jpg'),(5,'Anecho','ljcbxwznpy@163.com',0,1,'','','霖哥哥最帅了！！！','','','/static/media/avatar/Anecho.jpg'),(6,'funny','123@qq.com',0,1,'','','','','','/static/media/avatar/novavtar.jpg'),(7,'qwe','q@qq.com',0,1,'','','','','','/static/media/avatar/novavtar.jpg'),(8,'MaQianli','mql9348@163.com',0,1,'','','','','','/static/media/avatar/novavtar.jpg'),(9,'fangle','fangle17@163.com',0,1,'','','','','','/static/media/avatar/novavtar.jpg'),(10,'migongrenjia','migongrenjia@163.com',0,1,'','','','','','/static/media/avatar/novavtar.jpg'),(11,'WhyNot','362521692@qq.com',0,1,'','','','','','/static/media/avatar/novavtar.jpg'),(12,'bbbqqq','1573649960@qq.com',0,1,'','','','','','/static/media/avatar/novavtar.jpg'),(13,'zoe','zoezero@gmail.com',0,1,'','','','','','/static/media/avatar/novavtar.jpg'),(14,'zoezoe','zoezero0@gmail.com',0,1,'','','来给组长捧个场 哈哈哈','','','/static/media/avatar/novavtar.jpg'),(15,'wwwwww','339847016@qq.com',0,1,'','','','','','/static/media/avatar/novavtar.jpg'),(16,'sersin','sersin@163.com',0,1,'','','','','','/static/media/avatar/novavtar.jpg'),(17,'XuGuangQiang','981886190@qq.com',0,1,'','','','','','/static/media/avatar/novavtar.jpg'),(18,'kongbin','1428175016@qq.com',0,1,'','','','','','/static/media/avatar/novavtar.jpg'),(19,'liuwei_star','liuwei_hwbj@163.com',0,1,'','','','','','/static/media/avatar/novavtar.jpg'),(20,'caicai','85732612@qq.com ',0,1,'','','','','','/static/media/avatar/novavtar.jpg');
/*!40000 ALTER TABLE `users_userinfo` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-06-06 22:39:42
